"""
JWT Authentication Tests for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.test import TestCase
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken

User = get_user_model()


class JWTAuthenticationTest(APITestCase):
    """Test JWT authentication."""

    def setUp(self):
        """Set up test data."""
        self.user = User.objects.create_user(
            {% if features.authentication.use_email %}
            email='test@example.com',
            {% else %}
            username='testuser',
            email='test@example.com',
            {% endif %}
            password='testpass123',
            first_name='Test',
            last_name='User'
        )
        {% if features.authentication.email_verification %}
        self.user.email_verified = True
        self.user.save()
    {% endif %}

    def test_token_obtain(self):
        """Test obtaining JWT tokens."""
        url = reverse('auth:token_obtain_pair')
        data = {
            {% if features.authentication.use_email %}
            'email': 'test@example.com',
            {% else %}
            'username': 'testuser',
            {% endif %}
            'password': 'testpass123'
        }

        response = self.client.post(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn('access', response.data)
        self.assertIn('refresh', response.data)
        self.assertIn('user', response.data)

    def test_token_refresh(self):
        """Test refreshing JWT tokens."""
        # Get initial tokens
        refresh = RefreshToken.for_user(self.user)

        url = reverse('auth:token_refresh')
        data = {'refresh': str(refresh)}

        response = self.client.post(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn('access', response.data)

    def test_token_verify(self):
        """Test verifying JWT tokens."""
        refresh = RefreshToken.for_user(self.user)
        access_token = refresh.access_token

        url = reverse('auth:token_verify')
        data = {'token': str(access_token)}

        response = self.client.post(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_invalid_credentials(self):
        """Test authentication with invalid credentials."""
        url = reverse('auth:token_obtain_pair')
        data = {
            {% if features.authentication.use_email %}
            'email': 'test@example.com',
            {% else %}
            'username': 'testuser',
            {% endif %}
            'password': 'wrongpassword'
        }

        response = self.client.post(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_authenticated_endpoint(self):
        """Test accessing authenticated endpoint."""
        # Get token
        refresh = RefreshToken.for_user(self.user)
        access_token = refresh.access_token

        # Set authorization header
        self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {access_token}')

        url = reverse('auth:user_profile')
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['user']['email'], self.user.email)

    def test_logout(self):
        """Test logout functionality."""
        refresh = RefreshToken.for_user(self.user)
        access_token = refresh.access_token

        self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {access_token}')

        url = reverse('auth:logout')
        data = {'refresh': str(refresh)}

        response = self.client.post(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)

        {% if features.authentication.jwt_blacklist %}
        # Verify token is blacklisted
        from rest_framework_simplejwt.token_blacklist.models import BlacklistedToken

        self.assertTrue(
            BlacklistedToken.objects.filter(token__jti=refresh['jti']).exists()
        )
{% endif %}


class UserRegistrationTest(APITestCase):
    """Test user registration."""

    def test_user_registration(self):
        """Test registering a new user."""
        url = reverse('auth:register')
        data = {
            {% if features.authentication.use_email %}
            'email': 'newuser@example.com',
            {% else %}
            'username': 'newuser',
            'email': 'newuser@example.com',
            {% endif %}
            'password': 'newpass123!',
            'password2': 'newpass123!',
            'first_name': 'New',
            'last_name': 'User'
        }

        response = self.client.post(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertIn('access', response.data)
        self.assertIn('refresh', response.data)
        self.assertIn('user', response.data)

        # Verify user was created
        self.assertTrue(
            User.objects.filter(email='newuser@example.com').exists()
        )

    def test_registration_password_mismatch(self):
        """Test registration with password mismatch."""
        url = reverse('auth:register')
        data = {
            {% if features.authentication.use_email %}
            'email': 'newuser@example.com',
            {% else %}
            'username': 'newuser',
            'email': 'newuser@example.com',
            {% endif %}
            'password': 'newpass123!',
            'password2': 'differentpass123!',
            'first_name': 'New',
            'last_name': 'User'
        }

        response = self.client.post(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('password', response.data)


{% if features.authentication.jwt_cookie %}
class JWTCookieTest(APITestCase):
    """Test JWT cookie authentication."""

    def setUp(self):
        """Set up test data."""
        self.user = User.objects.create_user(
            email='cookie@example.com',
            password='cookiepass123'
        )

    def test_cookie_authentication(self):
        """Test authentication sets cookies."""
        url = reverse('auth:login')
        data = {
            'email': 'cookie@example.com',
            'password': 'cookiepass123'
        }

        response = self.client.post(url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)

        # Check cookies are set
        from django.conf import settings
        jwt_settings = settings.JWT_AUTH

        self.assertIn(jwt_settings.get('AUTH_COOKIE', 'access_token'), response.cookies)
        self.assertIn(jwt_settings.get('AUTH_COOKIE_REFRESH', 'refresh_token'), response.cookies)
{% endif %}