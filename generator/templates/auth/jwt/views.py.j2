"""
JWT Authentication Views for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
    TokenVerifyView,
)
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate, login, logout
from django.middleware.csrf import get_token
from django.views.decorators.csrf import ensure_csrf_cookie
from django.utils.decorators import method_decorator

from .serializers import (
    CustomTokenObtainPairSerializer,
    UserSerializer,
    RegisterSerializer,
{% if has_social_auth %}
    SocialAuthSerializer,
{% endif %}
{% if has_2fa %}
    TwoFactorVerifySerializer,
{% endif %}
)
from .tokens import get_tokens_for_user


@method_decorator(ensure_csrf_cookie, name='dispatch')
class CustomTokenObtainPairView(TokenObtainPairView):
    """Custom token obtain view with additional features."""
    serializer_class = CustomTokenObtainPairSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        user = serializer.validated_data['user']
        tokens = serializer.validated_data

        {% if features.authentication.jwt_cookie %}
        response = Response({
            'user': UserSerializer(user).data,
            'access': tokens['access'],
            'refresh': tokens['refresh'],
        })

        # Set cookies
        from django.conf import settings
        jwt_settings = settings.JWT_AUTH

        response.set_cookie(
            key=jwt_settings.get('AUTH_COOKIE', 'access_token'),
            value=tokens['access'],
            max_age=settings.SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'].total_seconds(),
            secure=jwt_settings.get('AUTH_COOKIE_SECURE', False),
            httponly=jwt_settings.get('AUTH_COOKIE_HTTP_ONLY', True),
            samesite=jwt_settings.get('AUTH_COOKIE_SAMESITE', 'Lax'),
        )

        response.set_cookie(
            key=jwt_settings.get('AUTH_COOKIE_REFRESH', 'refresh_token'),
            value=tokens['refresh'],
            max_age=settings.SIMPLE_JWT['REFRESH_TOKEN_LIFETIME'].total_seconds(),
            secure=jwt_settings.get('AUTH_COOKIE_SECURE', False),
            httponly=jwt_settings.get('AUTH_COOKIE_HTTP_ONLY', True),
            samesite=jwt_settings.get('AUTH_COOKIE_SAMESITE', 'Lax'),
        )

        return response
        {% else %}
        return Response({
            'user': UserSerializer(user).data,
            **tokens
        })
{% endif %}


class CustomTokenRefreshView(TokenRefreshView):
    """Custom token refresh view."""

    {% if features.authentication.jwt_cookie %}
    def post(self, request, *args, **kwargs):
        # Try to get refresh token from cookie
        from django.conf import settings
        jwt_settings = settings.JWT_AUTH

        refresh_token = request.data.get('refresh') or request.COOKIES.get(
            jwt_settings.get('AUTH_COOKIE_REFRESH', 'refresh_token')
        )

        if not refresh_token:
            return Response(
                {'detail': 'No refresh token provided'},
                status=status.HTTP_401_UNAUTHORIZED
            )

        request.data['refresh'] = refresh_token
        return super().post(request, *args, **kwargs)
{% endif %}


class LogoutView(APIView):
    """Logout view that blacklists tokens."""
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
        {% if features.authentication.jwt_blacklist %}
            # Blacklist refresh token
            refresh_token = request.data.get('refresh')
            if refresh_token:
                token = RefreshToken(refresh_token)
                token.blacklist()
            {% endif %}

            {% if features.authentication.jwt_cookie %}
            # Clear cookies
            response = Response({'detail': 'Successfully logged out'})

            from django.conf import settings
            jwt_settings = settings.JWT_AUTH

            response.delete_cookie(jwt_settings.get('AUTH_COOKIE', 'access_token'))
            response.delete_cookie(jwt_settings.get('AUTH_COOKIE_REFRESH', 'refresh_token'))

            return response
            {% else %}
            return Response({'detail': 'Successfully logged out'})
        {% endif %}

        except Exception as e:
            return Response(
                {'error': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )


class RegisterView(APIView):
    """User registration view."""
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = RegisterSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        user = serializer.save()
        tokens = get_tokens_for_user(user)

        return Response({
            'user': UserSerializer(user).data,
            **tokens
        }, status=status.HTTP_201_CREATED)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_profile(request):
    """Get current user profile."""
    return Response({
        'user': UserSerializer(request.user).data
    })


@api_view(['GET'])
@permission_classes([AllowAny])
def get_csrf_token(request):
    """Get CSRF token for SPA."""
    return Response({
        'csrfToken': get_token(request)
    })


{% if has_2fa %}
class TwoFactorVerifyView(APIView):
    """Verify 2FA code and issue tokens."""
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = TwoFactorVerifySerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        user = serializer.validated_data['user']

        # Generate tokens with 2FA verified claim
        tokens = get_tokens_for_user(user)
        # Add 2FA verified claim to token

        return Response({
            'user': UserSerializer(user).data,
            **tokens
        })
{% endif %}