"""
JWT Cookie Middleware for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.utils.deprecation import MiddlewareMixin
from django.conf import settings
from rest_framework_simplejwt.tokens import AccessToken
from rest_framework_simplejwt.exceptions import TokenError
from django.contrib.auth import get_user_model
from django.contrib.auth.models import AnonymousUser

User = get_user_model()


class JWTCookieMiddleware(MiddlewareMixin):
    """Middleware to authenticate users using JWT from cookies."""

    def process_request(self, request):
        """Process request to add user from JWT cookie."""
        # Skip if user already authenticated
        if request.user.is_authenticated:
            return

        # Get token from cookie
        jwt_settings = settings.JWT_AUTH
        access_token = request.COOKIES.get(
            jwt_settings.get('AUTH_COOKIE', 'access_token')
        )

        if not access_token:
            return

        try:
            # Validate token
            token = AccessToken(access_token)

            # Get user
            user_id = token.get('user_id')
            if user_id:
                try:
                    user = User.objects.get(id=user_id)
                    if user.is_active:
                        request.user = user
                        request._cached_user = user
                except User.DoesNotExist:
                    pass

        except TokenError:
            # Invalid token, ignore
            pass


class JWTRefreshMiddleware(MiddlewareMixin):
    """Middleware to refresh JWT tokens automatically."""

    def process_response(self, request, response):
        """Check if access token needs refresh."""
        if not hasattr(request, 'user') or not request.user.is_authenticated:
            return response

        jwt_settings = settings.JWT_AUTH
        access_token_cookie = request.COOKIES.get(
            jwt_settings.get('AUTH_COOKIE', 'access_token')
        )

        if not access_token_cookie:
            return response

        try:
            token = AccessToken(access_token_cookie)

            # Check if token is close to expiry (within 1 minute)
            from datetime import datetime, timedelta
            exp = datetime.fromtimestamp(token['exp'])

            if exp - datetime.now() < timedelta(minutes=1):
                # Refresh token
                refresh_cookie = request.COOKIES.get(
                    jwt_settings.get('AUTH_COOKIE_REFRESH', 'refresh_token')
                )

                if refresh_cookie:
                    from rest_framework_simplejwt.tokens import RefreshToken

                    refresh = RefreshToken(refresh_cookie)
                    new_access = refresh.access_token

                    # Set new access token cookie
                    response.set_cookie(
                        key=jwt_settings.get('AUTH_COOKIE', 'access_token'),
                        value=str(new_access),
                        max_age=settings.SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'].total_seconds(),
                        secure=jwt_settings.get('AUTH_COOKIE_SECURE', False),
                        httponly=jwt_settings.get('AUTH_COOKIE_HTTP_ONLY', True),
                        samesite=jwt_settings.get('AUTH_COOKIE_SAMESITE', 'Lax'),
                    )

        except Exception:
            # Ignore errors
            pass

        return response