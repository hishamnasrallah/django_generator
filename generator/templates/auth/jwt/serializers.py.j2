"""
JWT Authentication Serializers for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from rest_framework import serializers
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from django.contrib.auth import authenticate, get_user_model
from django.contrib.auth.password_validation import validate_password

User = get_user_model()


class UserSerializer(serializers.ModelSerializer):
    """Serializer for user data."""

    class Meta:
        model = User
        fields = (
            'id',
            'username',
            'email',
            'first_name',
            'last_name',
            'is_active',
            'date_joined',
            {% if features.authentication.roles %}
            'roles',
            {% endif %}
            {% if features.authentication.custom_user %}
            'phone',
            'avatar',
            'bio',
            {% endif %}
        )
        read_only_fields = ('id', 'date_joined', 'is_active')


class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    """Custom token serializer with additional validation."""

    username_field = 'email' if {{ 'True' if features.authentication.use_email else 'False' }} else 'username'

    def validate(self, attrs):
        # Use email or username for authentication
        username = attrs.get(self.username_field)
        password = attrs.get('password')

        if username and password:
            user = authenticate(
                request=self.context.get('request'),
                username=username,
                password=password
            )

            if not user:
                raise serializers.ValidationError('Invalid credentials')

            if not user.is_active:
                raise serializers.ValidationError('User account is disabled')

            {% if features.authentication.email_verification %}
            if not user.email_verified:
                raise serializers.ValidationError('Email not verified')
            {% endif %}

            {% if features.authentication.two_factor %}
            # Check if 2FA is required
            if hasattr(user, 'totpdevice_set') and user.totpdevice_set.filter(confirmed=True).exists():
                # Return partial token that requires 2FA
                raise serializers.ValidationError({
                    'requires_2fa': True,
                    'user_id': user.id
                })
        {% endif %}
        else:
            raise serializers.ValidationError('Must include username and password')

        # Get tokens
        refresh = self.get_token(user)

        data = {
            'refresh': str(refresh),
            'access': str(refresh.access_token),
            'user': user
        }

        return data

    @classmethod
    def get_token(cls, user):
        """Get token with custom claims."""
        token = super().get_token(user)

        # Add custom claims
        token['email'] = user.email
        token['full_name'] = user.get_full_name()

        return token


class RegisterSerializer(serializers.ModelSerializer):
    """Serializer for user registration."""

    password = serializers.CharField(write_only=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = (
            {% if features.authentication.use_email %}
            'email',
            {% else %}
            'username',
            'email',
            {% endif %}
            'password',
            'password2',
            'first_name',
            'last_name',
        )

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({
                'password': "Password fields didn't match."
            })

        return attrs

    def create(self, validated_data):
        validated_data.pop('password2')

        user = User.objects.create_user(**validated_data)

        {% if features.authentication.email_verification %}
        # Send verification email
        from .tasks import send_verification_email
        send_verification_email.delay(user.id)
        {% endif %}

        return user


{% if has_2fa %}
class TwoFactorVerifySerializer(serializers.Serializer):
    """Serializer for 2FA verification."""

    user_id = serializers.IntegerField()
    code = serializers.CharField(max_length=6)

    def validate(self, attrs):
        try:
            user = User.objects.get(id=attrs['user_id'])
        except User.DoesNotExist:
            raise serializers.ValidationError('Invalid user')

        # Verify TOTP code
        from django_otp import match_token

        if not match_token(user, attrs['code']):
            raise serializers.ValidationError('Invalid code')

        attrs['user'] = user
        return attrs
{% endif %}