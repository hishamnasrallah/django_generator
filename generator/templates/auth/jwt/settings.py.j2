"""
JWT Authentication Settings for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from datetime import timedelta
import os

# JWT Configuration
JWT_AUTH = {
    # Token lifetimes
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes={{ jwt_config.access_lifetime|default(5) }}),
    'REFRESH_TOKEN_LIFETIME': timedelta(days={{ jwt_config.refresh_lifetime|default(1) }}),

    # Token settings
    'ROTATE_REFRESH_TOKENS': {{ jwt_config.rotate_refresh|default(True) }},
'BLACKLIST_AFTER_ROTATION': {{ jwt_config.blacklist_after_rotation|default(True) }},
'UPDATE_LAST_LOGIN': {{ jwt_config.update_last_login|default(False) }},

# Algorithm settings
'ALGORITHM': '{{ jwt_config.algorithm|default("HS256") }}',
'SIGNING_KEY': os.environ.get('JWT_SECRET_KEY', 'your-secret-key-here'),
{% if jwt_config.algorithm in ['RS256', 'RS384', 'RS512'] %}
'VERIFYING_KEY': None,
'PRIVATE_KEY': None,
'PUBLIC_KEY': None,
{% endif %}

# Payload settings
'USER_ID_FIELD': 'id',
'USER_ID_CLAIM': 'user_id',

# Custom claims
'TOKEN_TYPE_CLAIM': 'token_type',
'JTI_CLAIM': 'jti',

# Headers
'AUTH_HEADER_TYPES': ('Bearer',),
'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',

{% if features.authentication.jwt_cookie %}
# Cookie settings
'AUTH_COOKIE': 'access_token',
'AUTH_COOKIE_REFRESH': 'refresh_token',
'AUTH_COOKIE_SECURE': {{ 'True' if project.environment == 'production' else 'False' }},
'AUTH_COOKIE_HTTP_ONLY': True,
'AUTH_COOKIE_SAMESITE': 'Lax',
'AUTH_COOKIE_PATH': '/',
'AUTH_COOKIE_DOMAIN': None,
{% endif %}
}

# Simple JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': JWT_AUTH['ACCESS_TOKEN_LIFETIME'],
    'REFRESH_TOKEN_LIFETIME': JWT_AUTH['REFRESH_TOKEN_LIFETIME'],
    'ROTATE_REFRESH_TOKENS': JWT_AUTH['ROTATE_REFRESH_TOKENS'],
    'BLACKLIST_AFTER_ROTATION': JWT_AUTH['BLACKLIST_AFTER_ROTATION'],
    'UPDATE_LAST_LOGIN': JWT_AUTH['UPDATE_LAST_LOGIN'],

    'ALGORITHM': JWT_AUTH['ALGORITHM'],
    'SIGNING_KEY': JWT_AUTH['SIGNING_KEY'],
    {% if jwt_config.algorithm in ['RS256', 'RS384', 'RS512'] %}
    'VERIFYING_KEY': JWT_AUTH['VERIFYING_KEY'],
    {% endif %}

    'AUTH_HEADER_TYPES': JWT_AUTH['AUTH_HEADER_TYPES'],
    'AUTH_HEADER_NAME': JWT_AUTH['AUTH_HEADER_NAME'],
    'USER_ID_FIELD': JWT_AUTH['USER_ID_FIELD'],
    'USER_ID_CLAIM': JWT_AUTH['USER_ID_CLAIM'],

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': JWT_AUTH['TOKEN_TYPE_CLAIM'],
    'JTI_CLAIM': JWT_AUTH['JTI_CLAIM'],

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),

    # Custom token classes
    'TOKEN_OBTAIN_SERIALIZER': 'authentication.serializers.CustomTokenObtainPairSerializer',
    'TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',
    'TOKEN_VERIFY_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenVerifySerializer',
    'TOKEN_BLACKLIST_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenBlacklistSerializer',
}