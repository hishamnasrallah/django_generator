"""
JWT Authentication Backends for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib.auth.backends import ModelBackend
from django.contrib.auth import get_user_model
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework_simplejwt.exceptions import InvalidToken, TokenError
{% if features.authentication.jwt_cookie %}
from rest_framework_simplejwt.tokens import RefreshToken
{% endif %}

User = get_user_model()


class JWTAuthenticationBackend(JWTAuthentication):
    """Custom JWT authentication backend."""

    def authenticate(self, request):
        """Authenticate request using JWT."""
        # Try standard header authentication
        header_result = super().authenticate(request)
        if header_result:
            return header_result

        {% if features.authentication.jwt_cookie %}
        # Try cookie authentication
        return self.authenticate_cookie(request)
        {% else %}
        return None
    {% endif %}

    {% if features.authentication.jwt_cookie %}
    def authenticate_cookie(self, request):
        """Authenticate using JWT from cookie."""
        from django.conf import settings

        access_token = request.COOKIES.get(
            settings.JWT_AUTH.get('AUTH_COOKIE', 'access_token')
        )

        if not access_token:
            return None

        # Validate token
        validated_token = self.get_validated_token(access_token)

        # Get user
        user = self.get_user(validated_token)

        return (user, validated_token)
    {% endif %}

    def get_user(self, validated_token):
        """Get user from validated token."""
        try:
            user_id = validated_token[self.user_id_claim]
        except KeyError:
            raise InvalidToken('Token contained no recognizable user identification')

        try:
            user = User.objects.get(**{self.user_id_field: user_id})
        except User.DoesNotExist:
            raise InvalidToken('User not found')

        if not user.is_active:
            raise InvalidToken('User is inactive')

        {% if features.authentication.two_factor %}
        # Check 2FA status
        if hasattr(user, 'totpdevice_set') and user.totpdevice_set.filter(confirmed=True).exists():
            if not validated_token.get('2fa_verified', False):
                raise InvalidToken('2FA verification required')
        {% endif %}

        return user


class EmailBackend(ModelBackend):
    """Authentication backend that uses email instead of username."""

    def authenticate(self, request, username=None, password=None, **kwargs):
        """Authenticate using email."""
        email = kwargs.get('email') or username
        if email is None:
            return None

        try:
            user = User.objects.get(email__iexact=email)
        except User.DoesNotExist:
            # Run the default password hasher once to reduce the timing
            # difference between an existing and a nonexistent user
            User().set_password(password)
            return None
        else:
            if user.check_password(password) and self.user_can_authenticate(user):
                return user

        return None