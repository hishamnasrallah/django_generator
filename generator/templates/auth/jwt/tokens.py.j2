"""
Custom JWT Token Classes for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from rest_framework_simplejwt.tokens import RefreshToken, AccessToken
from typing import Dict, Any


class CustomAccessToken(AccessToken):
    """Custom access token with additional claims."""

    @classmethod
    def for_user(cls, user) -> 'CustomAccessToken':
        """Generate token for user with custom claims."""
        token = super().for_user(user)

        # Add custom claims
        token['email'] = user.email
        token['full_name'] = user.get_full_name()
        {% if features.authentication.roles %}
        token['roles'] = list(user.roles.values_list('name', flat=True))
        {% endif %}
        {% if features.authentication.permissions_in_token %}
        token['permissions'] = list(user.get_all_permissions())
        {% endif %}

        return token


class CustomRefreshToken(RefreshToken):
    """Custom refresh token."""

    access_token_class = CustomAccessToken

    @classmethod
    def for_user(cls, user) -> 'CustomRefreshToken':
        """Generate refresh token for user."""
        token = super().for_user(user)

        # Add device info if available
        if hasattr(user, '_current_device_id'):
            token['device_id'] = user._current_device_id

        return token


def get_tokens_for_user(user) -> Dict[str, str]:
    """
    Generate access and refresh tokens for user.

    Args:
        user: User instance

    Returns:
        Dict with 'access' and 'refresh' token strings
    """
    refresh = CustomRefreshToken.for_user(user)

    return {
        'refresh': str(refresh),
        'access': str(refresh.access_token),
    }


{% if features.authentication.jwt_blacklist %}
def blacklist_token(token: str) -> bool:
    """
    Blacklist a token.

    Args:
        token: Token string to blacklist

    Returns:
        True if successfully blacklisted
    """
    try:
        token = RefreshToken(token)
        token.blacklist()
        return True
    except Exception:
        return False


def blacklist_all_tokens_for_user(user) -> None:
    """Blacklist all tokens for a user."""
    from rest_framework_simplejwt.token_blacklist.models import OutstandingToken

    tokens = OutstandingToken.objects.filter(user=user)
    for token in tokens:
        token.blacklist()
{% endif %}