"""
{{ provider_name }} OAuth Adapter for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from allauth.socialaccount.adapter import DefaultSocialAccountAdapter
from allauth.socialaccount.providers.{{ provider }}.views import {{ provider_name }}OAuth2Adapter
from django.contrib.auth import get_user_model

User = get_user_model()


class {{ provider_name }}Adapter({{ provider_name }}OAuth2Adapter):
    """Custom {{ provider_name }} OAuth adapter."""

    def complete_login(self, request, app, token, response, **kwargs):
        """
        Complete the login process for {{ provider_name }}.

        This method is called after successful OAuth authentication.
        """
        # Get the default login result
        login = super().complete_login(request, app, token, response, **kwargs)

        # Add custom data extraction
        {% if provider == 'google' %}
        # Extract Google-specific data
        if 'email_verified' in response:
            login.account.extra_data['email_verified'] = response['email_verified']

        if 'hd' in response:  # Hosted domain for G Suite
            login.account.extra_data['domain'] = response['hd']
        {% elif provider == 'github' %}
        # Extract GitHub-specific data
        if 'two_factor_authentication' in response:
            login.account.extra_data['2fa_enabled'] = response['two_factor_authentication']

        # Get additional user info
        import requests
        headers = {'Authorization': f'token {token.token}'}

        # Get user organizations
        orgs_response = requests.get('https://api.github.com/user/orgs', headers=headers)
        if orgs_response.status_code == 200:
            login.account.extra_data['organizations'] = orgs_response.json()
        {% elif provider == 'facebook' %}
        # Extract Facebook-specific data
        if 'age_range' in response:
            login.account.extra_data['age_range'] = response['age_range']

        if 'location' in response:
            login.account.extra_data['location'] = response['location']
        {% elif provider == 'linkedin' %}
        # Extract LinkedIn-specific data
        if 'industry' in response:
            login.account.extra_data['industry'] = response['industry']

        if 'positions' in response:
            login.account.extra_data['positions'] = response['positions']
        {% endif %}

        return login

    def populate_user(self, request, sociallogin, data):
        """
        Populate user instance with data from {{ provider_name }}.
        """
        user = super().populate_user(request, sociallogin, data)

        {% if provider == 'google' %}
        # Set email as verified if Google says so
        if data.get('email_verified'):
            user.email_verified = True
        {% elif provider == 'github' %}
        # Use GitHub username if available
        if 'login' in data and not user.username:
            user.username = data['login']
        {% elif provider == 'facebook' %}
        # Parse Facebook name
        if 'name' in data and not (user.first_name or user.last_name):
            parts = data['name'].split(' ', 1)
            user.first_name = parts[0]
            if len(parts) > 1:
                user.last_name = parts[1]
        {% elif provider == 'linkedin' %}
        # Use LinkedIn professional info
        if 'headline' in data and hasattr(user, 'profile'):
            user.profile.headline = data['headline']
        {% endif %}

        return user

    def save_user(self, request, sociallogin, form=None):
        """
        Save user after social authentication.
        """
        user = super().save_user(request, sociallogin, form)

        # Post-save processing
        {% if features.authentication.send_welcome_email %}
        # Send welcome email for new users
        if sociallogin.is_existing is False:
            from authentication.tasks import send_welcome_email
            send_welcome_email.delay(user.id, provider='{{ provider }}')
        {% endif %}

        {% if features.authentication.log_social_auth %}
        # Log social authentication
        from authentication.models import AuthenticationLog
        AuthenticationLog.objects.create(
            user=user,
            provider='{{ provider }}',
            ip_address=request.META.get('REMOTE_ADDR'),
            user_agent=request.META.get('HTTP_USER_AGENT', '')
        )
        {% endif %}

        return user