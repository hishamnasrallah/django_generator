"""
Base OAuth Adapter for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from allauth.socialaccount.adapter import DefaultSocialAccountAdapter
from allauth.exceptions import ImmediateHttpResponse
from django.contrib import messages
from django.shortcuts import redirect
from django.contrib.auth import get_user_model

User = get_user_model()


class CustomSocialAccountAdapter(DefaultSocialAccountAdapter):
    """Custom social account adapter with additional features."""

    def pre_social_login(self, request, sociallogin):
        """
        Called after social login, before user is logged in.

        Can be used to connect social accounts to existing users.
        """
        # If user is already logged in, link the account
        if request.user.is_authenticated:
            # Check if this social account is already connected to another user
            if sociallogin.is_existing and sociallogin.user != request.user:
                messages.error(
                    request,
                    f'This {sociallogin.account.provider} account is already connected to another user.'
                )
                raise ImmediateHttpResponse(redirect('/accounts/connections/'))

            # Connect the social account to current user
            if not sociallogin.is_existing:
                sociallogin.user = request.user
                sociallogin.save(request)
                messages.success(
                    request,
                    f'{sociallogin.account.provider.title()} account connected successfully.'
                )
                raise ImmediateHttpResponse(redirect('/accounts/connections/'))

        # Check if email already exists
        if sociallogin.user.pk is None:
            email = sociallogin.user.email
            if email:
                try:
                    existing_user = User.objects.get(email__iexact=email)
                    # Connect social account to existing user
                    sociallogin.user = existing_user
                    sociallogin.save(request)

                    {% if features.authentication.auto_link_on_email %}
                    # Auto-link based on email
                    messages.info(
                        request,
                        f'Connected {sociallogin.account.provider.title()} to your existing account.'
                    )
                    {% else %}
                    # Require confirmation
                    messages.warning(
                        request,
                        'An account with this email already exists. Please login first to connect your social account.'
                    )
                    raise ImmediateHttpResponse(redirect('/accounts/login/'))
                {% endif %}
                except User.DoesNotExist:
                    pass

    def is_auto_signup_allowed(self, request, sociallogin):
        """
        Check if auto signup is allowed for this social login.
        """
        # Check provider-specific rules
        provider = sociallogin.account.provider

        {% for provider in providers %}
        {% if provider == 'google' %}
        if provider == 'google':
            # Only allow G Suite domains
            domain = sociallogin.account.extra_data.get('hd')
            allowed_domains = {{ oauth_settings.google_allowed_domains|default([]) }}
            if allowed_domains and domain not in allowed_domains:
                return False
        {% elif provider == 'github' %}
        if provider == 'github':
            # Check organization membership
            orgs = sociallogin.account.extra_data.get('organizations', [])
            required_orgs = {{ oauth_settings.github_required_orgs|default([]) }}
            if required_orgs:
                org_names = [org.get('login') for org in orgs]
                if not any(org in org_names for org in required_orgs):
                    return False
        {% endif %}
        {% endfor %}

        return True

    def save_user(self, request, sociallogin, form=None):
        """
        Save user after social signup.
        """
        user = super().save_user(request, sociallogin, form)

        # Set default permissions/roles
        {% if features.authentication.roles %}
        from authentication.models import Role

        # Assign default role
        default_role = Role.objects.get(name='user')
        user.roles.add(default_role)
        {% endif %}

        # Create user profile
        {% if features.authentication.custom_user %}
        from authentication.models import UserProfile

        if not hasattr(user, 'profile'):
            UserProfile.objects.create(user=user)
        {% endif %}

        return user

    def get_login_redirect_url(self, request):
        """
        Get redirect URL after successful login.
        """
        # Check for next parameter
        next_url = request.GET.get('next')
        if next_url:
            return next_url

        # Provider-specific redirects
        if hasattr(request, 'sociallogin'):
            provider = request.sociallogin.account.provider

            # Check if this is first login
            if request.sociallogin.is_existing is False:
                return '/accounts/welcome/'

        return super().get_login_redirect_url(request)