"""
OAuth Views for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.shortcuts import render, redirect
from django.views.decorators.http import require_http_methods
from allauth.socialaccount.models import SocialAccount
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import status

from .pipeline import disconnect_social_account


@login_required
def social_connections(request):
    """View to manage social account connections."""
    # Get user's connected accounts
    social_accounts = SocialAccount.objects.filter(user=request.user)

    # Get available providers
    from allauth.socialaccount import providers

    provider_list = []
    for provider in providers.registry.get_list():
        connected = social_accounts.filter(provider=provider.id).exists()
        provider_list.append({
            'id': provider.id,
            'name': provider.name,
            'connected': connected,
            'accounts': social_accounts.filter(provider=provider.id)
        })

    context = {
        'providers': provider_list,
        'can_disconnect': request.user.has_usable_password() or social_accounts.count() > 1,
    }

    return render(request, 'authentication/social_connections.html', context)


@login_required
@require_http_methods(['POST'])
def disconnect_social(request, provider):
    """Disconnect a social account."""
    success = disconnect_social_account(request.user, provider)

    if success:
        messages.success(request, f'{provider.title()} account disconnected successfully.')
    else:
        messages.error(
            request,
            'Cannot disconnect this account. You need at least one authentication method.'
        )

    return redirect('auth:social_connections')


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def api_social_connections(request):
    """API endpoint to get social connections."""
    social_accounts = SocialAccount.objects.filter(user=request.user)

    connections = []
    for account in social_accounts:
        connections.append({
            'provider': account.provider,
            'uid': account.uid,
            'date_joined': account.date_joined,
            'last_login': account.last_login,
            'extra_data': account.extra_data,
        })

    return Response({
        'connections': connections,
        'can_disconnect': request.user.has_usable_password() or social_accounts.count() > 1,
    })


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def api_disconnect_social(request, provider):
    """API endpoint to disconnect social account."""
    success = disconnect_social_account(request.user, provider)

    if success:
        return Response({'detail': 'Account disconnected successfully.'})
    else:
        return Response(
            {'detail': 'Cannot disconnect this account.'},
            status=status.HTTP_400_BAD_REQUEST
        )


{% if features.authentication.social_login_popup %}
def social_login_popup(request):
    """Handle social login in popup window."""
    if request.user.is_authenticated:
        return render(request, 'authentication/social_popup_close.html', {
            'success': True,
            'user': request.user,
        })
    else:
        return render(request, 'authentication/social_popup_close.html', {
            'success': False,
            'error': 'Authentication failed',
        })
{% endif %}