"""
OAuth Pipeline for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from typing import Dict, Any, Optional
from allauth.socialaccount.models import SocialAccount
from django.contrib.auth import get_user_model

User = get_user_model()


def social_auth_pipeline(sociallogin):
    """
    Custom social authentication pipeline.

    This function is called during the social authentication process
    and can be used to customize user creation and profile updates.
    """
    user = sociallogin.user
    account = sociallogin.account

    # Extract user data from social account
    extra_data = account.extra_data

    # Update user profile with social data
    if not user.first_name and 'first_name' in extra_data:
        user.first_name = extra_data['first_name']

    if not user.last_name and 'last_name' in extra_data:
        user.last_name = extra_data['last_name']

    # Handle provider-specific data
    if account.provider == 'google':
        handle_google_data(user, extra_data)
    elif account.provider == 'github':
        handle_github_data(user, extra_data)
    elif account.provider == 'facebook':
        handle_facebook_data(user, extra_data)

    # Save user if needed
    if user.pk:
        user.save()

    return user


def handle_google_data(user: User, extra_data: Dict[str, Any]) -> None:
    """Handle Google-specific user data."""
    # Update profile picture
    if hasattr(user, 'profile') and 'picture' in extra_data:
        user.profile.avatar_url = extra_data['picture']
        user.profile.save()

    # Update verified status
    if 'email_verified' in extra_data:
        user.email_verified = extra_data['email_verified']


def handle_github_data(user: User, extra_data: Dict[str, Any]) -> None:
    """Handle GitHub-specific user data."""
    # Update profile fields
    if hasattr(user, 'profile'):
        profile = user.profile

        if 'bio' in extra_data:
            profile.bio = extra_data['bio']

        if 'avatar_url' in extra_data:
            profile.avatar_url = extra_data['avatar_url']

        if 'company' in extra_data:
            profile.company = extra_data['company']

        if 'location' in extra_data:
            profile.location = extra_data['location']

        profile.save()


def handle_facebook_data(user: User, extra_data: Dict[str, Any]) -> None:
    """Handle Facebook-specific user data."""
    # Update profile picture
    if hasattr(user, 'profile') and 'picture' in extra_data:
        picture_data = extra_data['picture'].get('data', {})
        if 'url' in picture_data:
            user.profile.avatar_url = picture_data['url']
            user.profile.save()


def create_user_profile(sender, request, sociallogin, **kwargs):
    """
    Signal handler to create user profile after social signup.
    """
    if sociallogin.is_existing:
        return

    user = sociallogin.user

    # Create user profile if it doesn't exist
    if hasattr(user, 'profile'):
        return

    {% if features.authentication.custom_user %}
    from authentication.models import UserProfile

    profile = UserProfile.objects.create(user=user)

    # Populate profile from social account
    social_auth_pipeline(sociallogin)
{% endif %}


def link_social_account(user: User, provider: str, uid: str, extra_data: Dict[str, Any]) -> Optional[SocialAccount]:
    """
    Link a social account to an existing user.
    """
    try:
        # Check if account already exists
        account = SocialAccount.objects.get(provider=provider, uid=uid)

        if account.user != user:
            # Account is linked to another user
            return None

        return account
    except SocialAccount.DoesNotExist:
        # Create new social account
        account = SocialAccount.objects.create(
            user=user,
            provider=provider,
            uid=uid,
            extra_data=extra_data
        )
        return account


def disconnect_social_account(user: User, provider: str) -> bool:
    """
    Disconnect a social account from a user.
    """
    try:
        account = SocialAccount.objects.get(user=user, provider=provider)

        # Check if user has other authentication methods
        if user.has_usable_password() or user.socialaccount_set.count() > 1:
            account.delete()
            return True

        # Don't disconnect if it's the only auth method
        return False
    except SocialAccount.DoesNotExist:
        return False