"""
Two-Factor Authentication Models for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.db import models
from django.contrib.auth import get_user_model
from django.utils.translation import gettext_lazy as _
from django_otp.models import Device

User = get_user_model()


class TrustedDevice(models.Model):
    """Model to store trusted devices for 2FA."""

    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='trusted_devices'
    )

    device_id = models.CharField(
        _('device ID'),
        max_length=255,
        help_text=_('Unique identifier for this device')
    )

    name = models.CharField(
        _('device name'),
        max_length=100,
        help_text=_('Human-readable name for this device')
    )

    browser = models.CharField(
        _('browser'),
        max_length=50,
        blank=True
    )

    os = models.CharField(
        _('operating system'),
        max_length=50,
        blank=True
    )

    ip_address = models.GenericIPAddressField(
        _('IP address'),
        null=True,
        blank=True
    )

    trusted_at = models.DateTimeField(
        _('trusted at'),
        auto_now_add=True
    )

    last_used = models.DateTimeField(
        _('last used'),
        auto_now=True
    )

    expires_at = models.DateTimeField(
        _('expires at'),
        null=True,
        blank=True
    )

    class Meta:
        verbose_name = _('trusted device')
        verbose_name_plural = _('trusted devices')
        unique_together = ['user', 'device_id']
        ordering = ['-last_used']

    def __str__(self):
        return f"{self.user.username} - {self.name}"

    def is_expired(self):
        """Check if device trust has expired."""
        if not self.expires_at:
            return False
        from django.utils import timezone
        return timezone.now() > self.expires_at


class BackupCode(models.Model):
    """Model to store backup codes for 2FA."""

    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='backup_codes'
    )

    code = models.CharField(
        _('code'),
        max_length=20,
        unique=True
    )

    used = models.BooleanField(
        _('used'),
        default=False
    )

    used_at = models.DateTimeField(
        _('used at'),
        null=True,
        blank=True
    )

    created_at = models.DateTimeField(
        _('created at'),
        auto_now_add=True
    )

    class Meta:
        verbose_name = _('backup code')
        verbose_name_plural = _('backup codes')
        ordering = ['created_at']

    def __str__(self):
        return f"{self.user.username} - {'Used' if self.used else 'Available'}"

    def mark_used(self):
        """Mark code as used."""
        from django.utils import timezone
        self.used = True
        self.used_at = timezone.now()
        self.save()


class TwoFactorAuthLog(models.Model):
    """Log 2FA authentication attempts."""

    SUCCESS = 'success'
    FAILURE = 'failure'

    STATUS_CHOICES = [
        (SUCCESS, _('Success')),
        (FAILURE, _('Failure')),
    ]

    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='two_factor_logs'
    )

    method = models.CharField(
        _('method'),
        max_length=20,
        choices=[
            ('totp', _('TOTP')),
            ('sms', _('SMS')),
            ('email', _('Email')),
            ('backup', _('Backup Code')),
        ]
    )

    status = models.CharField(
        _('status'),
        max_length=10,
        choices=STATUS_CHOICES
    )

    ip_address = models.GenericIPAddressField(
        _('IP address'),
        null=True,
        blank=True
    )

    user_agent = models.TextField(
        _('user agent'),
        blank=True
    )

    error_message = models.TextField(
        _('error message'),
        blank=True
    )

    timestamp = models.DateTimeField(
        _('timestamp'),
        auto_now_add=True
    )

    class Meta:
        verbose_name = _('2FA authentication log')
        verbose_name_plural = _('2FA authentication logs')
        ordering = ['-timestamp']

    def __str__(self):
        return f"{self.user.username} - {self.method} - {self.status}"