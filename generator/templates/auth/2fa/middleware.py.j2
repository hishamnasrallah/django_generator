"""
Two-Factor Authentication Middleware for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.shortcuts import redirect
from django.urls import reverse
from django.utils.deprecation import MiddlewareMixin
from django_otp import user_has_device
from django.contrib.auth import logout
from django.contrib import messages
from django.conf import settings
from datetime import datetime, timedelta

from .models import TrustedDevice


class EnforceTwoFactorMiddleware(MiddlewareMixin):
    """
    Middleware to enforce 2FA for certain users.

    This middleware checks if users who should have 2FA enabled
    actually have it set up and redirects them to setup if not.
    """

    def process_request(self, request):
        # Skip if user not authenticated
        if not request.user.is_authenticated:
            return

        # Skip for exempt paths
        path = request.path
        for exempt_path in getattr(settings, 'TWO_FACTOR_EXEMPT_PATHS', []):
            if path.startswith(exempt_path):
                return

        # Skip if already on 2FA setup page
        setup_url = reverse('2fa:setup')
        if path.startswith(setup_url):
            return

        # Check if 2FA should be enforced
        if self.should_enforce_2fa(request.user):
            if not user_has_device(request.user):
                # Check grace period
                if self.in_grace_period(request.user):
                    # Show warning message
                    self.show_grace_period_warning(request)
                else:
                    # Force redirect to setup
                    messages.warning(
                        request,
                        'Two-factor authentication is required for your account.'
                    )
                    return redirect(setup_url)

        # Check if device is trusted
        {% if remember_device %}
        if user_has_device(request.user) and not request.user.is_verified():
            if not self.is_device_trusted(request):
                return redirect('2fa:verify')
    {% endif %}

    def should_enforce_2fa(self, user):
        """Check if 2FA should be enforced for user."""
        {% if enforce_for_staff %}
        if user.is_staff:
            return True
        {% endif %}

        {% if enforce_for_superuser %}
        if user.is_superuser:
            return True
        {% endif %}

        # Check for specific roles
        {% if features.authentication.roles %}
        enforced_roles = getattr(settings, 'TWO_FACTOR_ENFORCED_ROLES', [])
        if user.roles.filter(name__in=enforced_roles).exists():
            return True
        {% endif %}

        return False

    def in_grace_period(self, user):
        """Check if user is still in grace period."""
        # Get user creation date or first login
        reference_date = user.date_joined

        grace_days = {{ grace_period|default(30) }}
        grace_end = reference_date + timedelta(days=grace_days)

        return datetime.now().date() < grace_end.date()

    def show_grace_period_warning(self, request):
        """Show grace period warning message."""
        user = request.user
        reference_date = user.date_joined

        grace_days = {{ grace_period|default(30) }}
        grace_end = reference_date + timedelta(days=grace_days)

        days_left = (grace_end.date() - datetime.now().date()).days

        if days_left > 0:
            messages.info(
                request,
                f'Please enable two-factor authentication. '
                f'You have {days_left} days remaining.'
            )

    {% if remember_device %}
    def is_device_trusted(self, request):
        """Check if current device is trusted."""
        device_id = request.COOKIES.get('device_id')

        if not device_id:
            return False

        try:
            device = TrustedDevice.objects.get(
                user=request.user,
                device_id=device_id
            )

            # Check if expired
            if device.is_expired():
                device.delete()
                return False

            # Update last used
            device.save()

            return True
        except TrustedDevice.DoesNotExist:
            return False
{% endif %}