"""
Two-Factor Authentication Views for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.views.generic import FormView, TemplateView
from django.utils.decorators import method_decorator
from django_otp import user_has_device
from django_otp.decorators import otp_required

from .forms import (
    EnableTwoFactorForm,
    VerifyTokenForm,
    BackupCodeForm,
{% if has_sms %}
    SMSDeviceForm,
{% endif %}
{% if has_email %}
    EmailDeviceForm,
{% endif %}
)
from .models import BackupCode, TrustedDevice, TwoFactorAuthLog


@method_decorator(login_required, name='dispatch')
class SetupView(FormView):
    """Setup 2FA for user."""

    template_name = 'two_factor/setup.html'
    form_class = EnableTwoFactorForm
    success_url = reverse_lazy('2fa:backup_codes')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['methods'] = {{ methods }}
        context['has_2fa'] = user_has_device(self.request.user)
        return context

    def form_valid(self, form):
        # Create TOTP device
        device = form.save()

        # Generate backup codes
        {% if backup_codes %}
        self.generate_backup_codes()
        {% endif %}

        messages.success(
            self.request,
            'Two-factor authentication has been enabled successfully!'
        )

        return super().form_valid(form)

    {% if backup_codes %}
    def generate_backup_codes(self):
        """Generate backup codes for user."""
        import secrets

        # Delete existing unused codes
        BackupCode.objects.filter(user=self.request.user, used=False).delete()

        # Generate new codes
        codes = []
        for _ in range({{ backup_codes|default(10) }}):
            code = secrets.token_hex(5).upper()
            BackupCode.objects.create(
                user=self.request.user,
                code=code
            )
            codes.append(code)

        # Store in session to display
        self.request.session['new_backup_codes'] = codes
{% endif %}


@method_decorator(login_required, name='dispatch')
class VerifyView(FormView):
    """Verify 2FA token."""

    template_name = 'two_factor/verify.html'
    form_class = VerifyTokenForm

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        # Log successful verification
        TwoFactorAuthLog.objects.create(
            user=self.request.user,
            method=form.cleaned_data.get('method', 'totp'),
            status=TwoFactorAuthLog.SUCCESS,
            ip_address=self.request.META.get('REMOTE_ADDR')
        )

        # Mark device as trusted if requested
        {% if remember_device %}
        if form.cleaned_data.get('trust_device'):
            self.trust_device()
        {% endif %}

        # Redirect to next URL or home
        next_url = self.request.GET.get('next', '/')
        return redirect(next_url)

    def form_invalid(self, form):
        # Log failed verification
        TwoFactorAuthLog.objects.create(
            user=self.request.user,
            method='totp',
            status=TwoFactorAuthLog.FAILURE,
            ip_address=self.request.META.get('REMOTE_ADDR'),
            error_message='Invalid token'
        )

        return super().form_invalid(form)

    {% if remember_device %}
    def trust_device(self):
        """Mark current device as trusted."""
        import uuid
        from django.utils import timezone
        from datetime import timedelta

        device_id = self.request.COOKIES.get('device_id', str(uuid.uuid4()))

        TrustedDevice.objects.update_or_create(
            user=self.request.user,
            device_id=device_id,
            defaults={
                'name': self.get_device_name(),
                'browser': self.get_browser(),
                'os': self.get_os(),
                'ip_address': self.request.META.get('REMOTE_ADDR'),
                'expires_at': timezone.now() + timedelta(days={{ remember_device|default(30) }})
            }
        )

        # Set device ID cookie
        self.request.session['device_id'] = device_id

    def get_device_name(self):
        """Get device name from user agent."""
        user_agent = self.request.META.get('HTTP_USER_AGENT', '')
        # Simple parsing - you might want to use a library like user-agents
        if 'Mobile' in user_agent:
            return 'Mobile Device'
        elif 'Tablet' in user_agent:
            return 'Tablet'
        else:
            return 'Desktop'

    def get_browser(self):
        """Get browser from user agent."""
        user_agent = self.request.META.get('HTTP_USER_AGENT', '')
        if 'Chrome' in user_agent:
            return 'Chrome'
        elif 'Firefox' in user_agent:
            return 'Firefox'
        elif 'Safari' in user_agent:
            return 'Safari'
        elif 'Edge' in user_agent:
            return 'Edge'
        return 'Unknown'

    def get_os(self):
        """Get OS from user agent."""
        user_agent = self.request.META.get('HTTP_USER_AGENT', '')
        if 'Windows' in user_agent:
            return 'Windows'
        elif 'Mac' in user_agent:
            return 'macOS'
        elif 'Linux' in user_agent:
            return 'Linux'
        elif 'Android' in user_agent:
            return 'Android'
        elif 'iOS' in user_agent:
            return 'iOS'
        return 'Unknown'
{% endif %}


@method_decorator([login_required, otp_required], name='dispatch')
class BackupCodesView(TemplateView):
    """Display backup codes."""

    template_name = 'two_factor/backup_codes.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # Get new codes from session or existing codes
        new_codes = self.request.session.pop('new_backup_codes', None)

        if new_codes:
            context['codes'] = new_codes
            context['new_codes'] = True
        else:
            context['codes'] = BackupCode.objects.filter(
                user=self.request.user,
                used=False
            ).values_list('code', flat=True)
            context['new_codes'] = False

        return context


@method_decorator([login_required, otp_required], name='dispatch')
class DisableView(TemplateView):
    """Disable 2FA."""

    template_name = 'two_factor/disable.html'

    def post(self, request, *args, **kwargs):
        # Disable all devices
        for device in request.user.totpdevice_set.all():
            device.delete()

        {% if has_sms %}
        for device in request.user.smsdevice_set.all():
            device.delete()
        {% endif %}

        {% if has_email %}
        for device in request.user.emaildevice_set.all():
            device.delete()
        {% endif %}

        # Delete backup codes
        BackupCode.objects.filter(user=request.user).delete()

        # Delete trusted devices
        TrustedDevice.objects.filter(user=request.user).delete()

        messages.success(request, 'Two-factor authentication has been disabled.')

        return redirect('account_security')


{% if has_sms %}
@method_decorator(login_required, name='dispatch')
class SMSDeviceView(FormView):
    """Setup SMS 2FA device."""

    template_name = 'two_factor/sms_setup.html'
    form_class = SMSDeviceForm
    success_url = reverse_lazy('2fa:verify')

    def form_valid(self, form):
        device = form.save()
        # Send verification SMS
        device.generate_challenge()

        messages.info(
            self.request,
            f'A verification code has been sent to {device.number}'
        )

        return super().form_valid(form)
{% endif %}


{% if has_email %}
@method_decorator(login_required, name='dispatch')
class EmailDeviceView(FormView):
    """Setup Email 2FA device."""

    template_name = 'two_factor/email_setup.html'
    form_class = EmailDeviceForm
    success_url = reverse_lazy('2fa:verify')

    def form_valid(self, form):
        device = form.save()
        # Send verification email
        device.generate_challenge()

        messages.info(
            self.request,
            f'A verification code has been sent to {device.email}'
        )

        return super().form_valid(form)
{% endif %}