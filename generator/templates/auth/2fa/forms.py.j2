"""
Two-Factor Authentication Forms for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django import forms
from django.contrib.auth import get_user_model
from django_otp.forms import OTPTokenForm
from django_otp.plugins.otp_totp.models import TOTPDevice
{% if has_sms %}
from two_factor.forms import SMSDeviceForm as BaseSMSDeviceForm
{% endif %}
{% if has_email %}
from django_otp.plugins.otp_email.models import EmailDevice
{% endif %}

from .models import BackupCode

User = get_user_model()


class EnableTwoFactorForm(forms.Form):
    """Form to enable 2FA with TOTP."""

    token = forms.CharField(
        label='Verification Code',
        max_length=6,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Enter 6-digit code',
            'autocomplete': 'off',
            'inputmode': 'numeric',
            'pattern': '[0-9]{6}'
        })
    )

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        self.device = None
        super().__init__(*args, **kwargs)

    def clean_token(self):
        token = self.cleaned_data['token']

        # Get or create TOTP device
        if not self.device:
            self.device = TOTPDevice.objects.filter(
                user=self.user,
                confirmed=False
            ).first()

            if not self.device:
                self.device = TOTPDevice.objects.create(
                    user=self.user,
                    name='default',
                    confirmed=False
                )

        # Verify token
        if not self.device.verify_token(token):
            raise forms.ValidationError('Invalid verification code.')

        return token

    def save(self):
        """Confirm the TOTP device."""
        self.device.confirmed = True
        self.device.save()
        return self.device


class VerifyTokenForm(OTPTokenForm):
    """Form to verify 2FA token."""

    {% if remember_device %}
    trust_device = forms.BooleanField(
        label='Trust this device for {{ remember_device|default(30) }} days',
        required=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )
    {% endif %}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.fields['otp_token'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'Enter verification code',
            'autocomplete': 'off',
            'inputmode': 'numeric'
        })

        # Add backup code option
        self.fields['otp_token'].help_text = 'Enter your 6-digit code or a backup code'

    def clean_otp_token(self):
        """Clean OTP token - also check backup codes."""
        token = self.cleaned_data.get('otp_token')

        # First try normal OTP verification
        try:
            return super().clean_otp_token()
        except forms.ValidationError:
            # Try backup code
            if self.user and len(token) > 6:  # Backup codes are longer
                backup = BackupCode.objects.filter(
                    user=self.user,
                    code=token.upper(),
                    used=False
                ).first()

                if backup:
                    backup.mark_used()
                    self.cleaned_data['method'] = 'backup'
                    return token

            raise


class BackupCodeForm(forms.Form):
    """Form to verify backup code."""

    code = forms.CharField(
        label='Backup Code',
        max_length=20,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Enter backup code',
            'autocomplete': 'off'
        })
    )

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

    def clean_code(self):
        code = self.cleaned_data['code'].upper()

        backup = BackupCode.objects.filter(
            user=self.user,
            code=code,
            used=False
        ).first()

        if not backup:
            raise forms.ValidationError('Invalid or already used backup code.')

        self.backup = backup
        return code

    def save(self):
        """Mark backup code as used."""
        self.backup.mark_used()
        return self.backup


{% if has_sms %}
class SMSDeviceForm(forms.Form):
    """Form to setup SMS device."""

    phone_number = forms.CharField(
        label='Phone Number',
        max_length=15,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '+1234567890',
            'type': 'tel'
        })
    )

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

    def clean_phone_number(self):
        phone = self.cleaned_data['phone_number']

        # Basic validation
        if not phone.startswith('+'):
            raise forms.ValidationError('Phone number must include country code (e.g., +1)')

        # Check if number already registered
        from two_factor.models import SMSDevice
        if SMSDevice.objects.filter(number=phone).exclude(user=self.user).exists():
            raise forms.ValidationError('This phone number is already registered.')

        return phone

    def save(self):
        """Create SMS device."""
        from two_factor.models import SMSDevice

        device = SMSDevice.objects.create(
            user=self.user,
            name='SMS',
            number=self.cleaned_data['phone_number'],
            confirmed=False
        )

        return device
{% endif %}


{% if has_email %}
class EmailDeviceForm(forms.Form):
    """Form to setup Email device."""

    email = forms.EmailField(
        label='Email Address',
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': 'your@email.com'
        })
    )

    use_primary = forms.BooleanField(
        label='Use my primary email address',
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)

        if self.user:
            self.fields['email'].initial = self.user.email

    def clean(self):
        cleaned_data = super().clean()

        if cleaned_data.get('use_primary'):
            cleaned_data['email'] = self.user.email

        return cleaned_data

    def save(self):
        """Create Email device."""
        device = EmailDevice.objects.create(
            user=self.user,
            name='Email',
            email=self.cleaned_data['email'],
            confirmed=False
        )

        return device
{% endif %}