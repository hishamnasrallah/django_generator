"""
Permission Decorators for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from functools import wraps
from django.core.exceptions import PermissionDenied
from django.contrib.auth import REDIRECT_FIELD_NAME
from django.contrib.auth.decorators import user_passes_test
from django.shortcuts import get_object_or_404


def permission_required(perm, login_url=None, raise_exception=False):
    """
    Decorator for views that checks whether a user has a particular permission.
    """
    def check_perms(user):
        if isinstance(perm, str):
            perms = (perm,)
        else:
            perms = perm

        if user.has_perms(perms):
            return True

        if raise_exception:
            raise PermissionDenied

        return False

    return user_passes_test(check_perms, login_url=login_url)


def staff_required(view_func=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url='login'):
    """
    Decorator for views that checks that the user is logged in and is staff.
    """
    actual_decorator = user_passes_test(
        lambda u: u.is_active and u.is_staff,
        login_url=login_url,
        redirect_field_name=redirect_field_name
    )

    if view_func:
        return actual_decorator(view_func)
    return actual_decorator


def superuser_required(view_func=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url='login'):
    """
    Decorator for views that checks that the user is logged in and is superuser.
    """
    actual_decorator = user_passes_test(
        lambda u: u.is_active and u.is_superuser,
        login_url=login_url,
        redirect_field_name=redirect_field_name
    )

    if view_func:
        return actual_decorator(view_func)
    return actual_decorator


{% if features.authentication.roles %}
def role_required(role_name, raise_exception=True):
    """
    Decorator to check if user has specific role.
    """
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if not request.user.is_authenticated:
                if raise_exception:
                    raise PermissionDenied("Authentication required.")
                return redirect('login')

            if not request.user.roles.filter(name=role_name).exists():
                if raise_exception:
                    raise PermissionDenied(f"Role '{role_name}' required.")
                return redirect('home')

            return view_func(request, *args, **kwargs)
        return _wrapped_view
    return decorator


def any_role_required(role_names, raise_exception=True):
    """
    Decorator to check if user has any of the specified roles.
    """
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if not request.user.is_authenticated:
                if raise_exception:
                    raise PermissionDenied("Authentication required.")
                return redirect('login')

            if not request.user.roles.filter(name__in=role_names).exists():
                if raise_exception:
                    raise PermissionDenied(f"One of these roles required: {', '.join(role_names)}")
                return redirect('home')

            return view_func(request, *args, **kwargs)
        return _wrapped_view
    return decorator
{% endif %}


def owner_required(model, owner_field='owner', pk_url_kwarg='pk'):
    """
    Decorator to check if user owns the object.
    """
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            # Get object
            pk = kwargs.get(pk_url_kwarg)
            obj = get_object_or_404(model, pk=pk)

            # Check ownership
            owner = getattr(obj, owner_field)
            if owner != request.user:
                raise PermissionDenied("You don't own this resource.")

            # Add object to kwargs for use in view
            kwargs['object'] = obj

            return view_func(request, *args, **kwargs)
        return _wrapped_view
    return decorator


def ajax_required(view_func):
    """
    Decorator to ensure view is only accessible via AJAX.
    """
    @wraps(view_func)
    def _wrapped_view(request, *args, **kwargs):
        if not request.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest':
            raise PermissionDenied("AJAX request required.")
        return view_func(request, *args, **kwargs)
    return _wrapped_view


def method_required(methods):
    """
    Decorator to restrict view to specific HTTP methods.
    """
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if request.method not in methods:
                raise PermissionDenied(f"Method not allowed. Allowed methods: {', '.join(methods)}")
            return view_func(request, *args, **kwargs)
        return _wrapped_view
    return decorator


def group_required(group_name, raise_exception=True):
    """
    Decorator to check if user belongs to specific group.
    """
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if not request.user.is_authenticated:
                if raise_exception:
                    raise PermissionDenied("Authentication required.")
                return redirect('login')

            if not request.user.groups.filter(name=group_name).exists():
                if raise_exception:
                    raise PermissionDenied(f"Group '{group_name}' membership required.")
                return redirect('home')

            return view_func(request, *args, **kwargs)
        return _wrapped_view
    return decorator