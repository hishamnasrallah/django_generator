"""
Role Admin for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib import admin
from django.contrib.auth import get_user_model
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

from .models import Role, RoleAssignment

User = get_user_model()


@admin.register(Role)
class RoleAdmin(admin.ModelAdmin):
    """Admin interface for Role model."""

    list_display = ['name', 'description', 'is_active', 'user_count', 'permission_count', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name', 'description']
    filter_horizontal = ['permissions', {% if role_hierarchy %}'parent_roles'{% endif %}]

    fieldsets = (
        (None, {
            'fields': ('name', 'description', 'is_active')
        }),
        ('Permissions', {
            'fields': ('permissions',),
            'classes': ('collapse',)
        }),
        {% if role_hierarchy %}
        ('Role Hierarchy', {
            'fields': ('parent_roles',),
            'classes': ('collapse',)
        }),
        {% endif %}
    )

    def user_count(self, obj):
        """Count of users with this role."""
        count = obj.users.count()
        url = reverse('admin:auth_user_changelist') + f'?roles__id__exact={obj.id}'
        return format_html('<a href="{}">{} users</a>', url, count)
    user_count.short_description = 'Users'

    def permission_count(self, obj):
        """Count of permissions for this role."""
        return obj.permissions.count()
    permission_count.short_description = 'Permissions'

    def get_readonly_fields(self, request, obj=None):
        """Make name readonly for existing roles."""
        if obj:  # Editing an existing role
            return ['name'] + list(self.readonly_fields)
        return self.readonly_fields


@admin.register(RoleAssignment)
class RoleAssignmentAdmin(admin.ModelAdmin):
    """Admin interface for RoleAssignment model."""

    list_display = ['user', 'role', 'assigned_by', 'assigned_at', 'expires_at', 'is_expired']
    list_filter = ['role', 'assigned_at', 'expires_at']
    search_fields = ['user__username', 'user__email', 'role__name', 'reason']
    raw_id_fields = ['user', 'assigned_by']
    date_hierarchy = 'assigned_at'

    fieldsets = (
        (None, {
            'fields': ('user', 'role')
        }),
        ('Assignment Details', {
            'fields': ('assigned_by', 'reason', 'expires_at')
        }),
    )

    def is_expired(self, obj):
        """Show if assignment is expired."""
        if obj.is_expired():
            return format_html('<span style="color: red;">✗ Expired</span>')
        elif obj.expires_at:
            return format_html('<span style="color: green;">✓ Active</span>')
        else:
            return format_html('<span style="color: blue;">∞ Permanent</span>')
    is_expired.short_description = 'Status'

    def save_model(self, request, obj, form, change):
        """Set assigned_by to current user if not set."""
        if not obj.assigned_by:
            obj.assigned_by = request.user
        super().save_model(request, obj, form, change)


# Extend User admin to show roles
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin

# Unregister the default UserAdmin
admin.site.unregister(User)


@admin.register(User)
class UserAdmin(BaseUserAdmin):
    """Extended User admin with role support."""

    # Add roles to the user form
    fieldsets = BaseUserAdmin.fieldsets + (
        ('Roles', {'fields': ('roles',)}),
    )

    filter_horizontal = BaseUserAdmin.filter_horizontal + ('roles',)

    list_display = BaseUserAdmin.list_display + ('role_list',)
    list_filter = BaseUserAdmin.list_filter + ('roles',)

    def role_list(self, obj):
        """Display user's roles."""
        roles = obj.roles.filter(is_active=True)
        if roles:
            return ', '.join([role.name for role in roles])
        return '-'
    role_list.short_description = 'Roles'