"""
Permission Mixins for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.exceptions import PermissionDenied
from django.shortcuts import redirect
from django.contrib import messages


class OwnerRequiredMixin:
    """Mixin to ensure user is the owner of the object."""

    owner_field = 'owner'  # Field name for owner
    owner_url_kwarg = 'pk'  # URL kwarg for object lookup

    def dispatch(self, request, *args, **kwargs):
        obj = self.get_object()
        owner = getattr(obj, self.owner_field)

        if owner != request.user:
            return self.handle_no_ownership()

        return super().dispatch(request, *args, **kwargs)

    def handle_no_ownership(self):
        """Handle when user is not the owner."""
        if self.request.user.is_authenticated:
            raise PermissionDenied("You don't own this resource.")
        return redirect('login')


class StaffRequiredMixin(LoginRequiredMixin):
    """Mixin to ensure user is staff."""

    def dispatch(self, request, *args, **kwargs):
        if not request.user.is_staff:
            return self.handle_no_permission()
        return super().dispatch(request, *args, **kwargs)

    def handle_no_permission(self):
        messages.error(self.request, "Staff access required.")
        return redirect('home')


class SuperuserRequiredMixin(LoginRequiredMixin):
    """Mixin to ensure user is superuser."""

    def dispatch(self, request, *args, **kwargs):
        if not request.user.is_superuser:
            return self.handle_no_permission()
        return super().dispatch(request, *args, **kwargs)

    def handle_no_permission(self):
        messages.error(self.request, "Superuser access required.")
        return redirect('home')


{% if features.authentication.roles %}
class RoleRequiredMixin(LoginRequiredMixin):
    """Mixin to check if user has required role."""

    required_role = None
    required_roles = []  # For multiple roles (OR condition)

    def dispatch(self, request, *args, **kwargs):
        if not self.has_required_role():
            return self.handle_no_role()
        return super().dispatch(request, *args, **kwargs)

    def has_required_role(self):
        """Check if user has required role."""
        user = self.request.user

        if self.required_role:
            return user.roles.filter(name=self.required_role).exists()

        if self.required_roles:
            return user.roles.filter(name__in=self.required_roles).exists()

        return True

    def handle_no_role(self):
        """Handle when user doesn't have required role."""
        messages.error(
            self.request,
            f"You need the '{self.required_role or 'appropriate'}' role to access this page."
        )
        return redirect('home')
{% endif %}


class PermissionMessageMixin:
    """Mixin to add permission denied messages."""

    permission_denied_message = ""

    def dispatch(self, request, *args, **kwargs):
        try:
            return super().dispatch(request, *args, **kwargs)
        except PermissionDenied as e:
            messages.error(request, str(e) or self.permission_denied_message)
            return redirect('home')


class MultiplePermissionsMixin:
    """Mixin to check multiple permissions with AND/OR logic."""

    permissions = {}  # {'any': [...], 'all': [...]}

    def dispatch(self, request, *args, **kwargs):
        if not self.check_permissions():
            return self.handle_no_permission()
        return super().dispatch(request, *args, **kwargs)

    def check_permissions(self):
        """Check if user has required permissions."""
        user = self.request.user

        # Check 'all' permissions (AND)
        if 'all' in self.permissions:
            for perm in self.permissions['all']:
                if not user.has_perm(perm):
                    return False

        # Check 'any' permissions (OR)
        if 'any' in self.permissions:
            has_any = False
            for perm in self.permissions['any']:
                if user.has_perm(perm):
                    has_any = True
                    break
            if not has_any:
                return False

        return True

    def handle_no_permission(self):
        """Handle permission denied."""
        messages.error(self.request, "You don't have the required permissions.")
        return redirect('home')


class ObjectPermissionMixin:
    """Mixin for object-level permissions."""

    def has_object_permission(self, obj):
        """
        Check if user has permission for specific object.
        Override this method in subclasses.
        """
        return True

    def dispatch(self, request, *args, **kwargs):
        # For detail views, check object permission
        if hasattr(self, 'get_object'):
            obj = self.get_object()
            if not self.has_object_permission(obj):
                return self.handle_no_object_permission(obj)

        return super().dispatch(request, *args, **kwargs)

    def handle_no_object_permission(self, obj):
        """Handle when user doesn't have object permission."""
        raise PermissionDenied(f"You don't have permission to access this {obj._meta.verbose_name}.")