"""
Role Model for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.db import models
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission
from django.utils.translation import gettext_lazy as _

User = get_user_model()


class Role(models.Model):
    """Role model for role-based access control."""

    name = models.CharField(
        _('name'),
        max_length=50,
        unique=True,
        help_text=_('Unique name for this role')
    )

    description = models.TextField(
        _('description'),
        blank=True,
        help_text=_('Description of what this role represents')
    )

    permissions = models.ManyToManyField(
        Permission,
        verbose_name=_('permissions'),
        blank=True,
        related_name='roles'
    )

    {% if role_hierarchy %}
    parent_roles = models.ManyToManyField(
        'self',
        symmetrical=False,
        blank=True,
        related_name='child_roles',
        help_text=_('Roles that this role inherits permissions from')
    )
    {% endif %}

    is_active = models.BooleanField(
        _('active'),
        default=True,
        help_text=_('Designates whether this role should be treated as active.')
    )

    created_at = models.DateTimeField(_('created at'), auto_now_add=True)
    updated_at = models.DateTimeField(_('updated at'), auto_now=True)

    class Meta:
        verbose_name = _('role')
        verbose_name_plural = _('roles')
        ordering = ['name']

    def __str__(self):
        return self.name

    def get_permissions(self):
        """Get all permissions for this role including inherited ones."""
        permissions = set(self.permissions.all())

        {% if role_hierarchy %}
        # Add inherited permissions
        for parent in self.parent_roles.filter(is_active=True):
            permissions.update(parent.get_permissions())
        {% endif %}

        return permissions

    def has_permission(self, perm):
        """Check if role has specific permission."""
        if isinstance(perm, str):
            app_label, codename = perm.split('.')
            return self.get_permissions().filter(
                content_type__app_label=app_label,
                codename=codename
            ).exists()
        return perm in self.get_permissions()


# Add role field to User model
User.add_to_class('roles', models.ManyToManyField(
    Role,
    verbose_name=_('roles'),
    blank=True,
    related_name='users',
    help_text=_('The roles this user belongs to.')
))


# Extend User model with role methods
def user_get_roles(self):
    """Get all active roles for user."""
    return self.roles.filter(is_active=True)

def user_has_role(self, role_name):
    """Check if user has specific role."""
    return self.roles.filter(name=role_name, is_active=True).exists()

def user_has_any_role(self, role_names):
    """Check if user has any of the specified roles."""
    return self.roles.filter(name__in=role_names, is_active=True).exists()

def user_get_role_permissions(self):
    """Get all permissions from user's roles."""
    permissions = set()
    for role in self.get_roles():
        permissions.update(role.get_permissions())
    return permissions

# Add methods to User model
User.add_to_class('get_roles', user_get_roles)
User.add_to_class('has_role', user_has_role)
User.add_to_class('has_any_role', user_has_any_role)
User.add_to_class('get_role_permissions', user_get_role_permissions)


class RoleAssignment(models.Model):
    """Track role assignments with metadata."""

    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='role_assignments'
    )

    role = models.ForeignKey(
        Role,
        on_delete=models.CASCADE,
        related_name='assignments'
    )

    assigned_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        related_name='role_assignments_made'
    )

    assigned_at = models.DateTimeField(auto_now_add=True)

    expires_at = models.DateTimeField(
        null=True,
        blank=True,
        help_text=_('When this role assignment expires')
    )

    reason = models.TextField(
        blank=True,
        help_text=_('Reason for role assignment')
    )

    class Meta:
        verbose_name = _('role assignment')
        verbose_name_plural = _('role assignments')
        unique_together = ['user', 'role']
        ordering = ['-assigned_at']

    def __str__(self):
        return f"{self.user} - {self.role}"

    def is_expired(self):
        """Check if assignment has expired."""
        if not self.expires_at:
            return False
        from django.utils import timezone
        return timezone.now() > self.expires_at