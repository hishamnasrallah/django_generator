"""
Role-based Permissions for {{ project.name }}

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.db.models import Q
from django.contrib.auth.models import Permission
from rest_framework import permissions

from .models import Role


class RoleBasedPermission(permissions.BasePermission):
    """Base class for role-based permissions."""

    required_roles = []
    require_all_roles = False  # If True, user must have all roles

    def has_permission(self, request, view):
        if not request.user.is_authenticated:
            return False

        if not self.required_roles:
            return True

        user_roles = request.user.roles.filter(is_active=True).values_list('name', flat=True)

        if self.require_all_roles:
            # User must have all required roles
            return all(role in user_roles for role in self.required_roles)
        else:
            # User must have at least one required role
            return any(role in user_roles for role in self.required_roles)


# Predefined role permissions
class IsAdmin(RoleBasedPermission):
    """Check if user has admin role."""
    required_roles = ['admin']


class IsModerator(RoleBasedPermission):
    """Check if user has moderator role."""
    required_roles = ['moderator']


class IsEditor(RoleBasedPermission):
    """Check if user has editor role."""
    required_roles = ['editor']


class IsStaffRole(RoleBasedPermission):
    """Check if user has any staff role."""
    required_roles = ['admin', 'moderator', 'editor']
    require_all_roles = False


def create_default_roles():
    """Create default roles for the system."""
    default_roles = [
        {
            'name': 'admin',
            'description': 'Full system access',
            'permissions': ['*']  # All permissions
        },
        {
            'name': 'moderator',
            'description': 'Content moderation and user management',
            'permissions': [
                'auth.view_user',
                'auth.change_user',
                'contenttypes.view_contenttype',
                # Add more as needed
            ]
        },
        {
            'name': 'editor',
            'description': 'Content creation and editing',
            'permissions': [
                # Add app-specific permissions
            ]
        },
        {
            'name': 'user',
            'description': 'Basic user access',
            'permissions': [
                # Basic permissions
            ]
        }
    ]

    for role_data in default_roles:
        role, created = Role.objects.get_or_create(
            name=role_data['name'],
            defaults={'description': role_data['description']}
        )

        if created:
            # Add permissions
            if '*' in role_data['permissions']:
                # Add all permissions
                role.permissions.set(Permission.objects.all())
            else:
                # Add specific permissions
                for perm_string in role_data['permissions']:
                    try:
                        app_label, codename = perm_string.split('.')
                        perm = Permission.objects.get(
                            content_type__app_label=app_label,
                            codename=codename
                        )
                        role.permissions.add(perm)
                    except (ValueError, Permission.DoesNotExist):
                        pass


def get_user_permissions(user):
    """Get all permissions for a user including role-based permissions."""
    if not user.is_authenticated:
        return set()

    # Get direct user permissions
    user_perms = set(user.user_permissions.all())

    # Get group permissions
    group_perms = set(Permission.objects.filter(group__user=user))

    # Get role permissions
    role_perms = set()
    for role in user.roles.filter(is_active=True):
        role_perms.update(role.get_permissions())

    return user_perms | group_perms | role_perms


def has_role_permission(user, permission):
    """Check if user has permission through roles."""
    if not user.is_authenticated:
        return False

    if user.is_superuser:
        return True

    # Check role permissions
    for role in user.roles.filter(is_active=True):
        if role.has_permission(permission):
            return True

    return False


class RolePermissionBackend:
    """Authentication backend that checks role permissions."""

    def authenticate(self, request, username=None, password=None, **kwargs):
        return None  # This backend doesn't authenticate

    def has_perm(self, user_obj, perm, obj=None):
        """Check if user has permission through roles."""
        if not user_obj.is_active:
            return False

        return has_role_permission(user_obj, perm)

    def has_module_perms(self, user_obj, app_label):
        """Check if user has any permissions in the app."""
        if not user_obj.is_active:
            return False

        for role in user_obj.roles.filter(is_active=True):
            if role.permissions.filter(content_type__app_label=app_label).exists():
                return True

        return False