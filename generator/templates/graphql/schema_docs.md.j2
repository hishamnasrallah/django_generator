# {{ project.name }} GraphQL API Documentation

Generated on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

## Overview

The {{ project.name }} GraphQL API provides a flexible and efficient way to query and mutate data. This document describes the available types, queries, mutations, and subscriptions.

## Authentication

{%- if features.authentication.jwt %}
The API uses JWT (JSON Web Token) authentication. To authenticate:

1. Use the `tokenAuth` mutation to obtain an access token
2. Include the token in the `Authorization` header: `Bearer YOUR_TOKEN`

### Authentication Mutations

```graphql
mutation TokenAuth($username: String!, $password: String!) {
  tokenAuth(username: $username, password: $password) {
    token
    payload
    refreshExpiresIn
  }
}

mutation RefreshToken($token: String!) {
  refreshToken(token: $token) {
    token
    payload
    refreshExpiresIn
  }
}

mutation VerifyToken($token: String!) {
  verifyToken(token: $token) {
    payload
  }
}
```
{%- else %}
The API uses session-based authentication. Login through the web interface or use the appropriate authentication endpoint.
{%- endif %}

## Schema Overview

### Root Types

- **Query**: Entry point for read operations
- **Mutation**: Entry point for write operations
{%- set has_subscriptions = namespace(value=false) %}
{%- for app in apps %}
{%- if app.graphql is defined and app.graphql.subscriptions %}
{%- set has_subscriptions.value = true %}
{%- endif %}
{%- endfor %}
{%- if has_subscriptions.value %}
- **Subscription**: Entry point for real-time updates
{%- endif %}

## Object Types

{%- for app in apps %}
{%- if app.models %}
### {{ app.name|title }} Types

{%- for model in app.models %}
#### {{ model.name }}Type

{%- if model.description is defined %}
{{ model.description }}
{%- else %}
Represents a {{ model.name }} object.
{%- endif %}

**Fields:**

| Field | Type | Description |
|-------|------|-------------|
{%- for field in model.fields %}
| `{{ field.name }}` | `{%- if field.type == 'CharField' -%}String
{%- elif field.type == 'TextField' -%}String
{%- elif field.type == 'IntegerField' -%}Int
{%- elif field.type == 'BooleanField' -%}Boolean
{%- elif field.type == 'DateTimeField' -%}DateTime
{%- elif field.type == 'DateField' -%}Date
{%- elif field.type == 'DecimalField' -%}Decimal
{%- elif field.type == 'FloatField' -%}Float
{%- elif field.type == 'JSONField' -%}JSON
{%- elif field.type == 'ForeignKey' -%}
{%- if field.related_model is defined -%}{{ field.related_model }}Type{%- else -%}ID{%- endif -%}
{%- elif field.type == 'ManyToManyField' -%}
[{%- if field.related_model is defined -%}{{ field.related_model }}Type{%- else -%}ID{%- endif -%}]
{%- else -%}String
{%- endif -%}
{%- if field.required is defined and field.required %}!{% endif %}` | {%- if field.description is defined -%}{{ field.description }}{%- else -%}{{ field.name|title|replace('_', ' ') }}{%- endif %} |
{%- endfor %}
| `id` | `ID!` | Unique identifier |
| `createdAt` | `DateTime!` | Creation timestamp |
| `updatedAt` | `DateTime!` | Last update timestamp |

{%- if model.relationships is defined and model.relationships %}
**Relationships:**

| Field | Type | Description |
|-------|------|-------------|
{%- for rel in model.relationships %}
| `{{ rel.name }}` | `{{ rel.type }}` | {{ rel.description }} |
{%- endfor %}
{%- endif %}

{%- endfor %}
{%- endif %}
{%- endfor %}

## Rate Limiting

The API implements rate limiting to prevent abuse:

{%- if project.api_settings is defined and project.api_settings.anon_rate_limit is defined %}
- Anonymous users: {{ project.api_settings.anon_rate_limit }}
{%- else %}
- Anonymous users: 100 requests/hour
{%- endif %}
{%- if project.api_settings is defined and project.api_settings.user_rate_limit is defined %}
- Authenticated users: {{ project.api_settings.user_rate_limit }}
{%- else %}
- Authenticated users: 1000 requests/hour
{%- endif %}

Rate limit information is included in response headers:
- `X-RateLimit-Limit`: Maximum requests allowed
- `X-RateLimit-Remaining`: Requests remaining
- `X-RateLimit-Reset`: Time when limit resets

## Tools and Resources

### GraphQL Playground

Access the interactive GraphQL playground at:
```
{%- if project.base_url is defined %}
{{ project.base_url }}/graphql/
{%- else %}
http://localhost:8000/graphql/
{%- endif %}
```

### Schema Introspection

Get the full schema:
```graphql
query IntrospectionQuery {
  __schema {
    types {
      name
      kind
      description
      fields {
        name
        type {
          name
          kind
        }
      }
    }
  }
}
```

### Client Libraries

Recommended GraphQL clients:
- **JavaScript**: Apollo Client, urql
- **Python**: gql
- **Mobile**: Apollo iOS, Apollo Android

## Changelog

### Version {%- if project.version is defined %} {{ project.version }}{%- else %} 1.0.0{%- endif %}

- Initial GraphQL API release
- Support for all CRUD operations
{%- if has_subscriptions.value %}
- Real-time subscriptions
{%- endif %}
{%- set has_file_uploads = namespace(value=false) %}
{%- for app in apps %}
{%- if app.models is defined %}
{%- for model in app.models %}
{%- if model.fields is defined %}
{%- for field in model.fields %}
{%- if field.type == 'FileField' or field.type == 'ImageField' %}
{%- set has_file_uploads.value = true %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- if has_file_uploads.value %}
- File upload support
{%- endif %}
- Cursor-based pagination
- Advanced filtering and ordering

---

For questions or issues, please contact {%- if project.support_email is defined %} [{{ project.support_email }}](mailto:{{ project.support_email }}){%- else %} [support@example.com](mailto:support@example.com){%- endif %}