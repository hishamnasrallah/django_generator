"""
GraphQL error handling for {{ project.name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import logging
from django.core.exceptions import ValidationError, PermissionDenied, ObjectDoesNotExist
from django.db import IntegrityError
from graphql import GraphQLError
{% if features.monitoring.sentry %}
import sentry_sdk
{% endif %}


logger = logging.getLogger(__name__)


class GraphQLValidationError(GraphQLError):
    """
    Custom validation error for GraphQL.
    """

    def __init__(self, message, field=None, code=None):
        super().__init__(message)
        self.field = field
        self.code = code or 'validation_error'

        extensions = {'code': self.code}
        if field:
            extensions['field'] = field

        self.extensions = extensions


class GraphQLPermissionError(GraphQLError):
    """
    Custom permission error for GraphQL.
    """

    def __init__(self, message='Permission denied'):
        super().__init__(message)
        self.extensions = {'code': 'permission_denied'}


class GraphQLNotFoundError(GraphQLError):
    """
    Custom not found error for GraphQL.
    """

    def __init__(self, message='Resource not found'):
        super().__init__(message)
        self.extensions = {'code': 'not_found'}


class GraphQLAuthenticationError(GraphQLError):
    """
    Custom authentication error for GraphQL.
    """

    def __init__(self, message='Authentication required'):
        super().__init__(message)
        self.extensions = {'code': 'authentication_required'}


class GraphQLRateLimitError(GraphQLError):
    """
    Custom rate limit error for GraphQL.
    """

    def __init__(self, message='Rate limit exceeded'):
        super().__init__(message)
        self.extensions = {'code': 'rate_limit_exceeded'}


def format_error(error):
    """
    Format GraphQL errors with additional context.
    """
    formatted = error.formatted

    # Add request ID if available
    if hasattr(error, 'original_error'):
        original = error.original_error

        # Log the error
        logger.error(
            f'GraphQL error: {str(original)}',
            exc_info=True,
            extra={
                'error_type': type(original).__name__,
                'error_message': str(original),
            }
        )

        {% if features.monitoring.sentry %}
        # Send to Sentry
        if not isinstance(original, (ValidationError, PermissionDenied, ObjectDoesNotExist)):
            sentry_sdk.capture_exception(original)
        {% endif %}

        # Handle specific Django exceptions
        if isinstance(original, ValidationError):
            formatted['extensions'] = {
                'code': 'validation_error',
                'errors': original.message_dict if hasattr(original, 'message_dict') else {'non_field_errors': [str(original)]},
            }
        elif isinstance(original, PermissionDenied):
            formatted['extensions'] = {
                'code': 'permission_denied',
            }
        elif isinstance(original, ObjectDoesNotExist):
            formatted['extensions'] = {
                'code': 'not_found',
            }
        elif isinstance(original, IntegrityError):
            formatted['extensions'] = {
                'code': 'integrity_error',
            }
            # Don't expose database details in production
            if not settings.DEBUG:
                formatted['message'] = 'Database integrity error'

    return formatted


def handle_errors(func):
    """
    Decorator to handle common errors in resolvers.
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValidationError as e:
            raise GraphQLValidationError(str(e))
        except PermissionDenied as e:
            raise GraphQLPermissionError(str(e) or 'Permission denied')
        except ObjectDoesNotExist as e:
            raise GraphQLNotFoundError(str(e) or 'Resource not found')
        except Exception as e:
            logger.error(f'Unhandled error in resolver: {str(e)}', exc_info=True)
            {% if features.monitoring.sentry %}
            sentry_sdk.capture_exception(e)
            {% endif %}

            # Re-raise in debug mode
            if settings.DEBUG:
                raise

            # Generic error in production
            raise GraphQLError('An unexpected error occurred')

    return wrapper


# Error messages
ERROR_MESSAGES = {
    'authentication_required': 'You must be logged in to perform this action',
    'permission_denied': 'You do not have permission to perform this action',
    'not_found': 'The requested resource was not found',
    'validation_error': 'The provided data is invalid',
    'rate_limit_exceeded': 'Too many requests. Please try again later',
    'server_error': 'An unexpected error occurred. Please try again later',
}