"""
GraphQL subscriptions for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import graphene
import channels_graphql_ws
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from asgiref.sync import async_to_sync

from ..models import {{ models|map(attribute='name')|join(', ') }}
from .types import {{ types|map(attribute='name')|join(', ') }}


{% for model in models %}
{% if model and model.get('graphql', {}).get('subscriptions', False) %}
class {{ model.name }}Subscription(channels_graphql_ws.Subscription):
    """Subscriptions for {{ model.name }} model."""

    # Subscription events
    {{ model.name|lower }}_created = graphene.Field({{ model.name }}Type)
    {{ model.name|lower }}_updated = graphene.Field({{ model.name }}Type)
    {{ model.name|lower }}_deleted = graphene.ID()

    class Arguments:
        # Filter arguments
        {% for field in model.fields %}
        {% if field.name in ['status', 'category', 'type'] %}
        {{ field.name }} = graphene.String()
    {% endif %}
    {% endfor %}

    @staticmethod
    def subscribe(root, info, **kwargs):
        """Subscribe to {{ model.name }} events."""
        # Return subscription group based on filters
        filters = []
        {% for field in model.fields %}
        {% if field.name in ['status', 'category', 'type'] %}
        if kwargs.get('{{ field.name }}'):
            filters.append(f"{{ field.name }}_{kwargs['{{ field.name }}']}")
        {% endif %}
        {% endfor %}

        if filters:
            return [f"{{ model.name|lower }}_{filter}" for filter in filters]
        return ['{{ model.name|lower }}_all']

    @staticmethod
    def publish(payload, info, **kwargs):
        """Publish {{ model.name }} events."""
        event_type = payload.get('type')

        if event_type == 'created':
            return {{ model.name }}Subscription({{ model.name|lower }}_created=payload['instance'])
        elif event_type == 'updated':
            return {{ model.name }}Subscription({{ model.name|lower }}_updated=payload['instance'])
        elif event_type == 'deleted':
            return {{ model.name }}Subscription({{ model.name|lower }}_deleted=payload['id'])

        return {{ model.name }}Subscription()


# Signal handlers for {{ model.name }}
@receiver(post_save, sender={{ model.name }})
def {{ model.name|lower }}_saved_handler(sender, instance, created, **kwargs):
    """Handle {{ model.name }} save events."""
    # Prepare subscription groups
    groups = ['{{ model.name|lower }}_all']

    {% for field in model.fields %}
    {% if field.name in ['status', 'category', 'type'] %}
    if hasattr(instance, '{{ field.name }}'):
        groups.append(f"{{ model.name|lower }}_{{ field.name }}_{getattr(instance, '{{ field.name }}')}")
    {% endif %}
    {% endfor %}

    # Send to subscription groups
    for group in groups:
        async_to_sync(channel_layer.group_send)(
            group,
            {
                'type': 'graphql_subscription',
                'operation': '{{ model.name }}Subscription',
                'payload': {
                    'type': 'created' if created else 'updated',
                    'instance': instance,
                }
            }
        )


@receiver(post_delete, sender={{ model.name }})
def {{ model.name|lower }}_deleted_handler(sender, instance, **kwargs):
    """Handle {{ model.name }} delete events."""
    # Prepare subscription groups
    groups = ['{{ model.name|lower }}_all']

    {% for field in model.fields %}
    {% if field.name in ['status', 'category', 'type'] %}
    if hasattr(instance, '{{ field.name }}'):
        groups.append(f"{{ model.name|lower }}_{{ field.name }}_{getattr(instance, '{{ field.name }}')}")
    {% endif %}
    {% endfor %}

    # Send to subscription groups
    for group in groups:
        async_to_sync(channel_layer.group_send)(
            group,
            {
                'type': 'graphql_subscription',
                'operation': '{{ model.name }}Subscription',
                'payload': {
                    'type': 'deleted',
                    'id': str(instance.pk),
                }
            }
        )


{% endif %}
{% endfor %}

# Combined subscription class
class Subscription(graphene.ObjectType):
    """{{ app_name }} subscriptions."""

    {% for model in models %}
    {% if model.get('graphql', {}).get('subscriptions', False) %}
    {{ model.name|lower }}_subscription = {{ model.name }}Subscription.Field()
{% endif %}
{% endfor %}


# Channel layer
from channels.layers import get_channel_layer
channel_layer = get_channel_layer()