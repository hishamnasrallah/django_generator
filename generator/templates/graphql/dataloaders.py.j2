"""
DataLoader implementations for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from promise import Promise
from promise.dataloader import DataLoader
from collections import defaultdict

from ..models import {{ models|map(attribute='name')|join(', ') }}


{% for model in models %}
{% for field in model.fields %}
{% if field.type == 'ForeignKey' %}
class {{ model.name }}By{{ field.related_model }}Loader(DataLoader):
    """
    DataLoader for loading {{ model.name }} objects by {{ field.name }}.
    """

    def batch_load_fn(self, {{ field.name }}_ids):
        # Create a dict of {{ field.name }}_id -> [{{ model.name|lower }}s]
        {{ model.name|lower }}_by_{{ field.name }} = defaultdict(list)

        # Query all {{ model.name|lower }}s for the given {{ field.name }}_ids
        {{ model.name|lower }}s = {{ model.name }}.objects.filter(
            {{ field.name }}_id__in={{ field.name }}_ids
        ).select_related('{{ field.name }}')

        for {{ model.name|lower }} in {{ model.name|lower }}s:
            {{ model.name|lower }}_by_{{ field.name }}[{{ model.name|lower }}.{{ field.name }}_id].append({{ model.name|lower }})

        # Return in the same order as requested
        return Promise.resolve([
            {{ model.name|lower }}_by_{{ field.name }}.get({{ field.name }}_id, [])
            for {{ field.name }}_id in {{ field.name }}_ids
        ])


{% elif field.type == 'OneToOneField' %}
class {{ field.related_model }}By{{ model.name }}Loader(DataLoader):
    """
    DataLoader for loading {{ field.related_model }} objects by {{ model.name }}.
    """

    def batch_load_fn(self, {{ model.name|lower }}_ids):
        # Create a dict of {{ model.name|lower }}_id -> {{ field.related_model|lower }}
        {{ field.related_model|lower }}_by_{{ model.name|lower }} = {}

        # Query all related objects
        related_objects = {{ field.related_model }}.objects.filter(
            {{ model.name|lower }}_id__in={{ model.name|lower }}_ids
        ).select_related('{{ model.name|lower }}')

        for obj in related_objects:
            {{ field.related_model|lower }}_by_{{ model.name|lower }}[obj.{{ model.name|lower }}_id] = obj

        # Return in the same order as requested
        return Promise.resolve([
            {{ field.related_model|lower }}_by_{{ model.name|lower }}.get({{ model.name|lower }}_id)
            for {{ model.name|lower }}_id in {{ model.name|lower }}_ids
        ])


{% elif field.type == 'ManyToManyField' %}
class {{ model.name }}{{ field.name|title }}Loader(DataLoader):
    """
    DataLoader for loading {{ field.name }} for {{ model.name }}.
    """

    def batch_load_fn(self, {{ model.name|lower }}_ids):
        # Create a dict of {{ model.name|lower }}_id -> [{{ field.related_model|lower }}s]
        {{ field.name }}_by_{{ model.name|lower }} = defaultdict(list)

        # Query through the M2M relationship
        through_model = {{ model.name }}.{{ field.name }}.through
        relations = through_model.objects.filter(
            {{ model.name|lower }}_id__in={{ model.name|lower }}_ids
        ).select_related('{{ field.related_model|lower }}')

        for relation in relations:
            {{ field.name }}_by_{{ model.name|lower }}[relation.{{ model.name|lower }}_id].append(
                relation.{{ field.related_model|lower }}
            )

        # Return in the same order as requested
        return Promise.resolve([
            {{ field.name }}_by_{{ model.name|lower }}.get({{ model.name|lower }}_id, [])
            for {{ model.name|lower }}_id in {{ model.name|lower }}_ids
        ])


{% endif %}
{% endfor %}
{% endfor %}

class {{ app_name|title }}DataLoaders:
    """
    Container for all DataLoaders in {{ app_name }} app.
    """

    def __init__(self):
    {% for model in models %}
    {% for field in model.fields %}
    {% if field.type == 'ForeignKey' %}
        self.{{ model.name|lower }}_by_{{ field.name }} = {{ model.name }}By{{ field.related_model }}Loader()
        {% elif field.type == 'OneToOneField' %}
        self.{{ field.related_model|lower }}_by_{{ model.name|lower }} = {{ field.related_model }}By{{ model.name }}Loader()
        {% elif field.type == 'ManyToManyField' %}
        self.{{ model.name|lower }}_{{ field.name }} = {{ model.name }}{{ field.name|title }}Loader()
{% endif %}
{% endfor %}
{% endfor %}


def get_loaders():
    """
    Get DataLoader instances for the current request.
    """
    return {{ app_name|title }}DataLoaders()


# Middleware to attach loaders to context
class DataLoaderMiddleware:
    """
    Middleware to attach DataLoaders to GraphQL context.
    """

    def resolve(self, next, root, info, **args):
        if not hasattr(info.context, 'loaders'):
            info.context.loaders = {}

        if '{{ app_name }}' not in info.context.loaders:
            info.context.loaders['{{ app_name }}'] = get_loaders()

        return next(root, info, **args)