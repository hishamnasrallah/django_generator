"""
GraphQL testing utilities for {{ project.name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import json
from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from graphene_django.utils.testing import GraphQLTestCase as BaseGraphQLTestCase
{% if features.authentication.jwt %}
from graphql_jwt.shortcuts import get_token
{% endif %}


User = get_user_model()


class GraphQLTestCase(BaseGraphQLTestCase):
    """
    Enhanced GraphQL test case with authentication support.
    """

    GRAPHQL_URL = '/graphql/'

    def setUp(self):
        super().setUp()
        self.client = Client()

    def create_user(self, username='testuser', email='test@example.com', **kwargs):
        """Create a test user."""
        return User.objects.create_user(
            username=username,
            email=email,
            password='testpass123',
            **kwargs
        )

    {% if features.authentication.jwt %}
    def authenticate(self, user=None):
        """Authenticate the test client."""
        if user is None:
            user = self.create_user()

        token = get_token(user)
        self.client.defaults['HTTP_AUTHORIZATION'] = f'Bearer {token}'
        return user
    {% else %}
    def authenticate(self, user=None):
        """Authenticate the test client."""
        if user is None:
            user = self.create_user()

        self.client.force_login(user)
        return user
    {% endif %}

    def query(self, query, variables=None, headers=None):
        """
        Execute a GraphQL query.
        """
        body = {'query': query}
        if variables:
            body['variables'] = variables

        headers = headers or {}

        response = self.client.post(
            self.GRAPHQL_URL,
            json.dumps(body),
            content_type='application/json',
            **headers
        )

        return response

    def assert_query_success(self, response):
        """Assert that a GraphQL query was successful."""
        self.assertEqual(response.status_code, 200)

        content = json.loads(response.content)
        self.assertNotIn('errors', content)

        return content['data']

    def assert_query_error(self, response, error_code=None):
        """Assert that a GraphQL query returned an error."""
        self.assertEqual(response.status_code, 200)

        content = json.loads(response.content)
        self.assertIn('errors', content)

        if error_code:
            error = content['errors'][0]
            self.assertEqual(
                error.get('extensions', {}).get('code'),
                error_code
            )

        return content['errors']


class GraphQLTestMixin:
    """
    Mixin for GraphQL testing utilities.
    """

    def build_query(self, operation, fields, variables=None):
        """
        Build a GraphQL query string.
        """
        if variables:
            var_defs = ', '.join([
                f'${name}: {type_}'
                for name, type_ in variables.items()
            ])
            query = f'{operation}({var_defs}) {{{fields}}}'
        else:
            query = f'{operation} {{{fields}}}'

        return query

    def build_mutation(self, mutation_name, input_fields, output_fields, variables=None):
        """
        Build a GraphQL mutation string.
        """
        if variables:
            var_defs = ', '.join([
                f'${name}: {type_}'
                for name, type_ in variables.items()
            ])

            var_refs = ', '.join([
                f'{name}: ${name}'
                for name in variables.keys()
            ])

            mutation = f'''
                mutation ({var_defs}) {{
                    {mutation_name}({var_refs}) {{
                        {output_fields}
                    }}
                }}
            '''
        else:
            input_str = ', '.join([
                f'{k}: {self._format_value(v)}'
                for k, v in input_fields.items()
            ])

            mutation = f'''
                mutation {{
                    {mutation_name}({input_str}) {{
                        {output_fields}
                    }}
                }}
            '''

        return mutation

    def _format_value(self, value):
        """Format a value for GraphQL."""
        if isinstance(value, str):
            return f'"{value}"'
        elif isinstance(value, bool):
            return 'true' if value else 'false'
        elif value is None:
            return 'null'
        else:
            return str(value)


# Test data builders
class GraphQLQueryBuilder:
    """
    Builder for complex GraphQL queries.
    """

    def __init__(self):
        self.query_parts = []
        self.variables = {}

    def add_query(self, alias, query_name, args=None, fields=None):
        """Add a query to the builder."""
        args_str = ''
        if args:
            args_str = '(' + ', '.join([
                f'{k}: {v}' for k, v in args.items()
            ]) + ')'

        fields_str = fields or 'id'

        self.query_parts.append(
            f'{alias}: {query_name}{args_str} {{ {fields_str} }}'
        )

        return self

    def add_mutation(self, alias, mutation_name, args=None, fields=None):
        """Add a mutation to the builder."""
        return self.add_query(alias, mutation_name, args, fields)

    def build(self, operation_type='query'):
        """Build the final query."""
        if self.variables:
            var_defs = ', '.join([
                f'${name}: {type_}'
                for name, type_ in self.variables.items()
            ])

            return f'''
                {operation_type} ({var_defs}) {{
                    {' '.join(self.query_parts)}
                }}
            '''
        else:
            return f'''
                {operation_type} {{
                    {' '.join(self.query_parts)}
                }}
            '''


# Mock data generators
def generate_graphql_test_data(model_name, count=5):
    """
    Generate test data for GraphQL tests.
    """
    data = []

    for i in range(count):
        item = {
            'id': str(i + 1),
            f'{model_name.lower()}Name': f'Test {model_name} {i + 1}',
            'createdAt': '2024-01-01T00:00:00Z',
            'updatedAt': '2024-01-01T00:00:00Z',
        }
        data.append(item)

    return data