"""
GraphQL permission classes for {{ project.name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib.auth.models import AnonymousUser


class BasePermission:
    """
    Base permission class for GraphQL.
    """

    @staticmethod
    def has_permission(context):
        """Check if user has permission."""
        return True

    @staticmethod
    def has_object_permission(context, obj):
        """Check if user has permission for specific object."""
        return True


class IsAuthenticated(BasePermission):
    """
    Permission class requiring authentication.
    """

    @staticmethod
    def has_permission(context):
        user = getattr(context, 'user', None)
        return user and user.is_authenticated


class IsOwner(BasePermission):
    """
    Permission class for object owners.
    """

    @staticmethod
    def has_object_permission(context, obj):
        user = getattr(context, 'user', None)
        if not user or not user.is_authenticated:
            return False

        # Check various owner fields
        owner_fields = ['user', 'owner', 'created_by', 'author']
        for field in owner_fields:
            if hasattr(obj, field):
                return getattr(obj, field) == user

        return False


class IsStaff(BasePermission):
    """
    Permission class requiring staff status.
    """

    @staticmethod
    def has_permission(context):
        user = getattr(context, 'user', None)
        return user and user.is_authenticated and user.is_staff


class IsSuperuser(BasePermission):
    """
    Permission class requiring superuser status.
    """

    @staticmethod
    def has_permission(context):
        user = getattr(context, 'user', None)
        return user and user.is_authenticated and user.is_superuser


class HasModelPermission(BasePermission):
    """
    Permission class checking Django model permissions.
    """

    def __init__(self, app_label, model_name, permission_type):
        self.permission = f'{app_label}.{permission_type}_{model_name}'

    def has_permission(self, context):
        user = getattr(context, 'user', None)
        if not user or not user.is_authenticated:
            return False

        return user.has_perm(self.permission)


class ReadOnly(BasePermission):
    """
    Permission class allowing only read operations.
    """

    @staticmethod
    def has_permission(context):
        # Check if this is a read operation
        info = getattr(context, 'graphql_info', None)
        if info:
            operation = info.operation.operation
            return operation == 'query'

        return True


{% if features.enterprise.multitenancy %}
class IsTenantMember(BasePermission):
    """
    Permission class for tenant members.
    """

    @staticmethod
    def has_permission(context):
        user = getattr(context, 'user', None)
        tenant = getattr(context, 'tenant', None)

        if not user or not user.is_authenticated:
            return False

        if not tenant:
            return False

        # Check if user is member of tenant
        return tenant.members.filter(id=user.id).exists()


class IsTenantAdmin(BasePermission):
    """
    Permission class for tenant admins.
    """

    @staticmethod
    def has_permission(context):
        user = getattr(context, 'user', None)
        tenant = getattr(context, 'tenant', None)

        if not user or not user.is_authenticated:
            return False

        if not tenant:
            return False

        # Check if user is admin of tenant
        return tenant.admins.filter(id=user.id).exists()
{% endif %}


def check_permissions(permission_classes, info):
    """
    Check multiple permission classes.
    """
    context = info.context

    for permission_class in permission_classes:
        if isinstance(permission_class, type):
            permission = permission_class()
        else:
            permission = permission_class

        if not permission.has_permission(context):
            return False

    return True


def check_object_permissions(permission_classes, info, obj):
    """
    Check object-level permissions.
    """
    context = info.context

    # First check general permissions
    if not check_permissions(permission_classes, info):
        return False

    # Then check object permissions
    for permission_class in permission_classes:
        if isinstance(permission_class, type):
            permission = permission_class()
        else:
            permission = permission_class

        if not permission.has_object_permission(context, obj):
            return False

    return True