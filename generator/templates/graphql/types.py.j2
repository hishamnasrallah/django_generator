"""
GraphQL types for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import graphene
from graphene_django import DjangoObjectType
from graphene_django.filter import DjangoFilterConnectionField
from django.contrib.auth import get_user_model
from django_filters import FilterSet, OrderingFilter
{% for model in models %}
from ..models import {{ model.name }}
{% endfor %}

User = get_user_model()


{% for type_def in types %}
class {{ type_def.name }}Filter(FilterSet):
    """Filter for {{ type_def.model_name }}."""
    
    order_by = OrderingFilter(
        fields=(
            {% for field in type_def.filters %}
            ('{{ field }}', '{{ field }}'),
            {% endfor %}
        )
    )
    
    class Meta:
        model = {{ type_def.model_name }}
        fields = {
            {% for field in type_def.filters %}
            '{{ field }}': ['exact', 'icontains', 'istartswith'],
            {% endfor %}
        }


class {{ type_def.name }}(DjangoObjectType):
    """GraphQL type for {{ type_def.model_name }}."""
    
    {% for field in type_def.fields %}
    {% if field.name in ['created_at', 'updated_at'] %}
    {{ field.name }} = graphene.DateTime()
    {% elif field.type == 'JSONField' %}
    {{ field.name }} = graphene.JSONString()
    {% elif field.type == 'DecimalField' %}
    {{ field.name }} = graphene.Decimal()
    {% endif %}
    {% endfor %}
    
    class Meta:
        model = {{ type_def.model_name }}
        filterset_class = {{ type_def.name }}Filter
        {% if type_def.interfaces %}
        interfaces = ({{ type_def.interfaces|join(', ') }},)
        {% endif %}
        fields = '__all__'
    
    {% for field in type_def.fields %}
    {% if field.type in ['ForeignKey', 'OneToOneField'] %}
    def resolve_{{ field.name }}(self, info):
        """Resolve {{ field.name }} with proper permissions."""
        if not self.{{ field.name }}:
            return None
        
        # Check permissions
        user = info.context.user
        if not user.is_authenticated:
            return None
        
        return self.{{ field.name }}
    {% endif %}
    {% endfor %}


{% endfor %}

# Input types for mutations
{% for type_def in types %}
class {{ type_def.model_name }}Input(graphene.InputObjectType):
    """Input type for {{ type_def.model_name }} mutations."""
    
    {% for field in type_def.fields %}
    {% if not field.name in ['id', 'created_at', 'updated_at'] %}
    {{ field.name }} = graphene.{{ field.type }}({% if field.required %}required=True{% endif %})
    {% endif %}
    {% endfor %}


class {{ type_def.model_name }}UpdateInput(graphene.InputObjectType):
    """Input type for {{ type_def.model_name }} updates."""
    
    id = graphene.ID(required=True)
    {% for field in type_def.fields %}
    {% if not field.name in ['id', 'created_at', 'updated_at'] %}
    {{ field.name }} = graphene.{{ field.type }}()
    {% endif %}
    {% endfor %}


{% endfor %}

# Connection types for pagination
{% for type_def in types %}
class {{ type_def.name }}Connection(graphene.relay.Connection):
    """Connection for {{ type_def.model_name }} pagination."""
    
    class Meta:
        node = {{ type_def.name }}
    
    total_count = graphene.Int()
    
    def resolve_total_count(self, info):
        return self.length


{% endfor %}

# Custom scalar types
class Upload(graphene.Scalar):
    """Upload scalar type for file uploads."""
    
    @staticmethod
    def serialize(value):
        return value
    
    @staticmethod
    def parse_literal(node):
        return node
    
    @staticmethod
    def parse_value(value):
        return value


# Enums
{% for model in models %}
{% for field in model.fields %}
{% if field.choices %}
class {{ model.name }}{{ field.name|title }}Enum(graphene.Enum):
    """Enum for {{ model.name }}.{{ field.name }} choices."""
    
    {% for choice in field.choices %}
    {% if choice is string %}
    {{ choice|upper }} = '{{ choice }}'
    {% else %}
    {{ choice[0]|upper }} = '{{ choice[0] }}'
    {% endif %}
    {% endfor %}


{% endif %}
{% endfor %}
{% endfor %}

# Union types for polymorphic models
{% if models|length > 1 %}
class {{ app_name|title }}Union(graphene.Union):
    """Union type for {{ app_name }} models."""
    
    class Meta:
        types = ({{ types|map(attribute='name')|join(', ') }})


{% endif %}

# Interface for common fields
class TimestampedInterface(graphene.Interface):
    """Interface for models with timestamps."""
    
    created_at = graphene.DateTime()
    updated_at = graphene.DateTime()


class AuditInterface(graphene.Interface):
    """Interface for auditable models."""
    
    created_by = graphene.Field('users.schema.UserType')
    updated_by = graphene.Field('users.schema.UserType')
    created_at = graphene.DateTime()
    updated_at = graphene.DateTime()


# Custom field resolvers
class CustomFieldMixin:
    """Mixin for custom field resolvers."""
    
    def resolve_display_name(self, info):
        """Resolve display name for the object."""
        if hasattr(self, 'name'):
            return self.name
        elif hasattr(self, 'title'):
            return self.title
        else:
            return str(self)
    
    def resolve_permissions(self, info):
        """Resolve user permissions for this object."""
        user = info.context.user
        if not user.is_authenticated:
            return []
        
        permissions = []
        model_name = self.__class__.__name__.lower()
        
        if user.has_perm(f'{{ app_name }}.view_{model_name}'):
            permissions.append('view')
        if user.has_perm(f'{{ app_name }}.change_{model_name}'):
            permissions.append('change')
        if user.has_perm(f'{{ app_name }}.delete_{model_name}'):
            permissions.append('delete')
        
        return permissions


# Apply custom field mixin to all types
{% for type_def in types %}
{{ type_def.name }}.__bases__ = (CustomFieldMixin,) + {{ type_def.name }}.__bases__
{% endfor %}