"""
Custom GraphQL scalars for {{ project.name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import graphene
from graphql.language import ast
from decimal import Decimal
import json
import uuid
from datetime import datetime, date


class JSONString(graphene.Scalar):
    """
    Serializes JSON fields to strings.
    """

    @staticmethod
    def serialize(dt):
        if isinstance(dt, (dict, list)):
            return json.dumps(dt)
        return dt

    @staticmethod
    def parse_literal(node):
        if isinstance(node, ast.StringValue):
            try:
                return json.loads(node.value)
            except json.JSONDecodeError:
                return node.value
        return None

    @staticmethod
    def parse_value(value):
        if isinstance(value, str):
            try:
                return json.loads(value)
            except json.JSONDecodeError:
                return value
        return value


class DecimalType(graphene.Scalar):
    """
    Serializes Decimal fields.
    """

    @staticmethod
    def serialize(value):
        if isinstance(value, Decimal):
            return float(value)
        return value

    @staticmethod
    def parse_literal(node):
        if isinstance(node, (ast.FloatValue, ast.IntValue)):
            return Decimal(node.value)
        return None

    @staticmethod
    def parse_value(value):
        if isinstance(value, (float, int, str)):
            return Decimal(str(value))
        return value


class UUIDType(graphene.Scalar):
    """
    Serializes UUID fields.
    """

    @staticmethod
    def serialize(value):
        if isinstance(value, uuid.UUID):
            return str(value)
        return value

    @staticmethod
    def parse_literal(node):
        if isinstance(node, ast.StringValue):
            try:
                return uuid.UUID(node.value)
            except ValueError:
                return None
        return None

    @staticmethod
    def parse_value(value):
        if isinstance(value, str):
            try:
                return uuid.UUID(value)
            except ValueError:
                return None
        return value


class DateType(graphene.Scalar):
    """
    Serializes Date fields.
    """

    @staticmethod
    def serialize(value):
        if isinstance(value, date):
            return value.isoformat()
        return value

    @staticmethod
    def parse_literal(node):
        if isinstance(node, ast.StringValue):
            try:
                return datetime.strptime(node.value, '%Y-%m-%d').date()
            except ValueError:
                return None
        return None

    @staticmethod
    def parse_value(value):
        if isinstance(value, str):
            try:
                return datetime.strptime(value, '%Y-%m-%d').date()
            except ValueError:
                return None
        return value


# Register custom scalars
graphene.types.json.JSONString = JSONString
graphene.types.decimal.Decimal = DecimalType
graphene.types.uuid.UUID = UUIDType
graphene.types.datetime.Date = DateType