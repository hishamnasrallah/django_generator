"""
GraphQL authentication utilities for {{ project.name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import jwt
from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.auth.models import AnonymousUser
from graphql_jwt.exceptions import JSONWebTokenError
from graphql_jwt.utils import get_user_by_payload
from graphql_jwt.settings import jwt_settings


User = get_user_model()


class JSONWebTokenBackend:
    """
    Custom JWT authentication backend for GraphQL.
    """

    def authenticate(self, request=None, **kwargs):
        if request is None:
            return None

        token = self.get_token_from_request(request)
        if token is None:
            return None

        try:
            payload = jwt_settings.JWT_DECODE_HANDLER(token)
            user = get_user_by_payload(payload)

            if user is None or not user.is_active:
                return None

            return user
        except (JSONWebTokenError, jwt.PyJWTError):
            return None

    def get_token_from_request(self, request):
        """
        Extract JWT token from request.
        """
        # Try Authorization header
        auth_header = request.META.get('HTTP_AUTHORIZATION', '')
        if auth_header.startswith('Bearer '):
            return auth_header[7:]

        # Try cookie
        if hasattr(request, 'COOKIES'):
            return request.COOKIES.get(jwt_settings.JWT_COOKIE_NAME)

        return None


def get_user_from_context(info):
    """
    Get authenticated user from GraphQL context.
    """
    request = info.context

    if hasattr(request, 'user') and request.user.is_authenticated:
        return request.user

    # Try JWT authentication
    backend = JSONWebTokenBackend()
    user = backend.authenticate(request=request)

    if user:
        request.user = user
        return user

    return AnonymousUser()


def require_auth(func):
    """
    Decorator to require authentication for GraphQL resolvers.
    """
    def wrapper(self, info, *args, **kwargs):
        user = get_user_from_context(info)

        if not user.is_authenticated:
            raise Exception('Authentication required')

        info.context.user = user
        return func(self, info, *args, **kwargs)

    return wrapper


def require_perms(*perms):
    """
    Decorator to require specific permissions for GraphQL resolvers.
    """
    def decorator(func):
        def wrapper(self, info, *args, **kwargs):
            user = get_user_from_context(info)

            if not user.is_authenticated:
                raise Exception('Authentication required')

            for perm in perms:
                if not user.has_perm(perm):
                    raise Exception(f'Permission denied: {perm}')

            info.context.user = user
            return func(self, info, *args, **kwargs)

        return wrapper

    return decorator


def require_staff(func):
    """
    Decorator to require staff status for GraphQL resolvers.
    """
    def wrapper(self, info, *args, **kwargs):
        user = get_user_from_context(info)

        if not user.is_authenticated or not user.is_staff:
            raise Exception('Staff access required')

        info.context.user = user
        return func(self, info, *args, **kwargs)

    return wrapper


def require_superuser(func):
    """
    Decorator to require superuser status for GraphQL resolvers.
    """
    def wrapper(self, info, *args, **kwargs):
        user = get_user_from_context(info)

        if not user.is_authenticated or not user.is_superuser:
            raise Exception('Superuser access required')

        info.context.user = user
        return func(self, info, *args, **kwargs)

    return wrapper