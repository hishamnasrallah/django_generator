"""
GraphQL middleware for {{ project.name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import time
import logging
from django.conf import settings
from django.utils import timezone
{% if features.enterprise.multitenancy %}
from django_tenants.utils import get_tenant
{% endif %}
{% if features.get('monitoring', {}).get('sentry') %}
import sentry_sdk
{% endif %}


logger = logging.getLogger(__name__)


class TimingMiddleware:
    """
    Middleware to log GraphQL query execution time.
    """

    def resolve(self, next, root, info, **args):
        start_time = time.time()

        result = next(root, info, **args)

        duration = time.time() - start_time
        operation_name = info.operation.name.value if info.operation.name else 'Anonymous'

        if duration > 1.0:  # Log slow queries
            logger.warning(
                f'Slow GraphQL query "{operation_name}" took {duration:.2f}s',
                extra={
                    'operation_name': operation_name,
                    'duration': duration,
                    'query': info.context.body.decode('utf-8'),
                }
            )

        return result


class ErrorLoggingMiddleware:
    """
    Middleware to log GraphQL errors.
    """

    def resolve(self, next, root, info, **args):
        try:
            return next(root, info, **args)
        except Exception as e:
            operation_name = info.operation.name.value if info.operation.name else 'Anonymous'

            logger.error(
                f'GraphQL error in "{operation_name}": {str(e)}',
                exc_info=True,
                extra={
                    'operation_name': operation_name,
                    'error': str(e),
                    'query': info.context.body.decode('utf-8'),
                }
            )

            {% if features.get('monitoring', {}).get('sentry') %}
            sentry_sdk.capture_exception(e)
            {% endif %}

            raise


{% if features.enterprise.multitenancy %}
class TenantMiddleware:
    """
    Middleware to set tenant context for GraphQL queries.
    """

    def resolve(self, next, root, info, **args):
        request = info.context

        # Get tenant from request
        tenant = get_tenant(request)
        if tenant:
            info.context.tenant = tenant

        return next(root, info, **args)
{% endif %}


class AuditMiddleware:
    """
    Middleware to audit GraphQL operations.
    """

    def resolve(self, next, root, info, **args):
        # Skip introspection queries
        if info.field_name.startswith('__'):
            return next(root, info, **args)

        user = info.context.user
        operation_type = info.operation.operation.value
        operation_name = info.operation.name.value if info.operation.name else 'Anonymous'

        # Log mutation operations
        if operation_type == 'mutation' and user.is_authenticated:
            logger.info(
                f'GraphQL mutation "{operation_name}" by user {user.username}',
                extra={
                    'user_id': user.id,
                    'username': user.username,
                    'operation_type': operation_type,
                    'operation_name': operation_name,
                    'timestamp': timezone.now().isoformat(),
                }
            )

        return next(root, info, **args)


# List of middleware classes to use
GRAPHQL_MIDDLEWARE = [
    TimingMiddleware,
    ErrorLoggingMiddleware,
    {% if features.enterprise.multitenancy %}
    TenantMiddleware,
    {% endif %}
    AuditMiddleware,
]