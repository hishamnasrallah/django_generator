# {{ project.name }} API Documentation

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

## Overview

The {{ project.name }} API provides comprehensive access to all application resources through a RESTful interface{%- if features.api.graphql %} and GraphQL endpoint{%- endif %}.

## Base URL

```
{%- if project.base_url is defined %}
{{ project.base_url }}/api/
{%- else %}
http://localhost:8000/api/
{%- endif %}
```

## Authentication

{%- if features.authentication.jwt %}
### JWT Authentication

The API uses JWT (JSON Web Tokens) for authentication.

#### Obtaining Tokens

```bash
POST /api/auth/login/
Content-Type: application/json

{
    "username": "your_username",
    "password": "your_password"
}
```

Response:
```json
{
    "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
    "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
}
```

#### Using Tokens

Include the access token in the Authorization header:
```bash
Authorization: Bearer YOUR_ACCESS_TOKEN
```

#### Refreshing Tokens

```bash
POST /api/auth/refresh/
Content-Type: application/json

{
    "refresh": "YOUR_REFRESH_TOKEN"
}
```
{%- else %}
### Session Authentication

The API uses session-based authentication. Login through the web interface or use the login endpoint.
{%- endif %}

## API Versioning

{%- if features.api.versioning %}
The API supports versioning through {{ features.api.versioning }}.

Current version: `v1`

Example:
```
/api/v1/resource/
```
{%- else %}
The API currently does not use versioning.
{%- endif %}

## Response Format

All API responses follow a consistent format:

### Success Response

```json
{
    "status": "success",
    "data": {
        // Response data
    },
    "message": "Operation completed successfully"
}
```

### Error Response

```json
{
    "status": "error",
    "errors": [
        {
            "field": "field_name",
            "message": "Error message"
        }
    ],
    "message": "Operation failed"
}
```

### Paginated Response

```json
{
    "count": 100,
    "next": "http://api.example.com/resource/?page=2",
    "previous": null,
    "results": [
        // Array of objects
    ]
}
```

## Available Endpoints

{%- for app in apps %}
{%- if app.models %}
### {{ app.name|title }} Endpoints

{%- for model in app.models %}
#### {{ model.name }} Resource

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | `/api/{{ app.name }}/{{ model.name|lower }}s/` | List all {{ model.name }}s |
| POST | `/api/{{ app.name }}/{{ model.name|lower }}s/` | Create a new {{ model.name }} |
| GET | `/api/{{ app.name }}/{{ model.name|lower }}s/{id}/` | Get a specific {{ model.name }} |
| PUT | `/api/{{ app.name }}/{{ model.name|lower }}s/{id}/` | Update a {{ model.name }} |
| PATCH | `/api/{{ app.name }}/{{ model.name|lower }}s/{id}/` | Partially update a {{ model.name }} |
| DELETE | `/api/{{ app.name }}/{{ model.name|lower }}s/{id}/` | Delete a {{ model.name }} |

{%- if model.api is defined and model.api.custom_actions is defined %}
**Custom Actions:**

| Method | Endpoint | Description |
|--------|----------|-------------|
{%- for action in model.api.custom_actions %}
{%- set method = action.method|default('POST') %}
{%- set url_name = action.url_name|default(action.name) %}
{%- set description = action.description|default(action.name) %}
| {{ method|upper }} | `/api/{{ app.name }}/{{ model.name|lower }}s/{%- if not action.is_list|default(false) %}{id}/{%- endif %}{{ url_name }}/` | {{ description }} |
{%- endfor %}
{%- endif %}

{%- endfor %}
{%- endif %}
{%- endfor %}

## Filtering, Searching, and Ordering

### Filtering

Use query parameters to filter results:
```
GET /api/resource/?status=active&category=tech
```

### Searching

Use the `search` parameter:
```
GET /api/resource/?search=keyword
```

### Ordering

Use the `ordering` parameter:
```
GET /api/resource/?ordering=-created_at,name
```

Use `-` prefix for descending order.

## Rate Limiting

API requests are rate-limited to prevent abuse:

{%- set api_settings = project.get('api_settings', {}) %}
{%- if api_settings.get('anon_rate_limit') %}
- Anonymous users: {{ api_settings.get('anon_rate_limit') }}
{%- else %}
- Anonymous users: 100 requests/hour
{%- endif %}
{%- if api_settings.get('user_rate_limit') %}
- Authenticated users: {{ api_settings.get('user_rate_limit') }}
{%- else %}
- Authenticated users: 1000 requests/hour
{%- endif %}

Rate limit information is included in response headers:
- `X-RateLimit-Limit`: Maximum requests allowed
- `X-RateLimit-Remaining`: Requests remaining
- `X-RateLimit-Reset`: Time when limit resets

## Error Codes

| Code | Description |
|------|-------------|
| 400 | Bad Request - Invalid parameters |
| 401 | Unauthorized - Authentication required |
| 403 | Forbidden - Insufficient permissions |
| 404 | Not Found - Resource does not exist |
| 429 | Too Many Requests - Rate limit exceeded |
| 500 | Internal Server Error |

{%- if features.api.graphql %}
## GraphQL Endpoint

The API also provides a GraphQL endpoint:

```
POST /graphql/
```

See the [GraphQL documentation](/docs/graphql/) for more details.
{%- endif %}

{%- if features.api.websockets %}
## WebSocket Support

Real-time updates are available through WebSocket connections:

```
{%- if project.base_url is defined %}
{%- set clean_url = project.base_url|replace('http://', '')|replace('https://', '') %}
ws://{{ clean_url }}/ws/
{%- else %}
ws://localhost:8000/ws/
{%- endif %}
```

See the [WebSocket documentation](/docs/websockets/) for more details.
{%- endif %}

## Code Examples

### Python

```python
import requests

# Authentication
{%- if project.base_url is defined %}
{%- set api_base = project.base_url %}
{%- else %}
{%- set api_base = 'http://localhost:8000' %}
{%- endif %}
response = requests.post('{{ api_base }}/api/auth/login/', json={
    'username': 'your_username',
    'password': 'your_password'
})
tokens = response.json()

# Make authenticated request
headers = {'Authorization': f'Bearer {tokens["access"]}'}
response = requests.get('{{ api_base }}/api/resource/', headers=headers)
data = response.json()
```

### JavaScript

```javascript
// Authentication
{%- if project.base_url is defined %}
{%- set api_base = project.base_url %}
{%- else %}
{%- set api_base = 'http://localhost:8000' %}
{%- endif %}
const response = await fetch('{{ api_base }}/api/auth/login/', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({
        username: 'your_username',
        password: 'your_password'
    })
});
const tokens = await response.json();

// Make authenticated request
const data = await fetch('{{ api_base }}/api/resource/', {
    headers: {'Authorization': `Bearer ${tokens.access}`}
}).then(r => r.json());
```

### cURL

```bash
# Authentication
{%- if project.base_url is defined %}
{%- set api_base = project.base_url %}
{%- else %}
{%- set api_base = 'http://localhost:8000' %}
{%- endif %}
curl -X POST {{ api_base }}/api/auth/login/ \
  -H "Content-Type: application/json" \
  -d '{"username": "your_username", "password": "your_password"}'

# Make authenticated request
curl -X GET {{ api_base }}/api/resource/ \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN"
```

## Support

For API support, please contact:
{%- if project.support_email is defined %}
- Email: {{ project.support_email }}
{%- else %}
- Email: support@example.com
{%- endif %}
{%- if project.docs_url is defined %}
- Documentation: {{ project.docs_url }}
{%- else %}
- Documentation: /docs/
{%- endif %}
{%- if project.issue_tracker_url is defined %}
- Issue Tracker: {{ project.issue_tracker_url }}
{%- else %}
- Issue Tracker: https://github.com/example/repo/issues
{%- endif %}