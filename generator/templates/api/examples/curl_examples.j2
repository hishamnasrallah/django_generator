#!/bin/bash

# cURL examples for {{ project.name }} API
# Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.

# Base URL
BASE_URL="http://localhost:8000"
API_URL="${BASE_URL}/api"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}{{ project.name }} API - cURL Examples${NC}\n"

# Authentication
echo -e "${GREEN}1. Authentication${NC}"

# Login
echo "Login:"
curl -X POST "${API_URL}/auth/login/" \
-H "Content-Type: application/json" \
-d '{
"username": "admin",
"password": "password"
}' | jq .

# Store the access token (manually copy from the response)
ACCESS_TOKEN="your-access-token-here"

# Refresh token
echo -e "\nRefresh Token:"
curl -X POST "${API_URL}/auth/refresh/" \
-H "Content-Type: application/json" \
-d '{
"refresh": "your-refresh-token-here"
}' | jq .

{% for app in apps %}
    {% if app.models %}
        # {{ app.name|title }} App Examples
        echo -e "\n${GREEN}{{ app.name|title }} App${NC}"

        {% for model in app.models %}
            # {{ model.name }} Operations
            echo -e "\n${BLUE}{{ model.name }} Operations${NC}"

            # List {{ model.name|plural }}
            echo -e "\nList {{ model.name|plural }}:"
            curl -X GET "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Accept: application/json" | jq .

            # List with pagination and filtering
            echo -e "\nList {{ model.name|plural }} (with pagination):"
            curl -X GET "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/?page=1&page_size=10" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Accept: application/json" | jq .

            # Get specific {{ model.name }}
            echo -e "\nGet {{ model.name }} by ID:"
            curl -X GET "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/1/" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Accept: application/json" | jq .

            # Create {{ model.name }}
            echo -e "\nCreate {{ model.name }}:"
            curl -X POST "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{
            {% for field in model.fields %}
                {% if field.required and field.name not in ['id', 'created_at', 'updated_at'] %}
                    "{{ field.name }}": {% if field.type == 'CharField' %}"Example {{ field.name }}"{% elif field.type == 'IntegerField' %}123{% elif field.type == 'BooleanField' %}true{% elif field.type == 'DateTimeField' %}"2024-01-01T00:00:00Z"{% else %}"value"{% endif %}{% if not loop.last %},{% endif %}
                {% endif %}
            {% endfor %}
            }' | jq .

            # Update {{ model.name }} (PUT)
            echo -e "\nUpdate {{ model.name }} (full update):"
            curl -X PUT "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/1/" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{
            {% for field in model.fields %}
                {% if field.name not in ['id', 'created_at', 'updated_at'] %}
                    "{{ field.name }}": {% if field.type == 'CharField' %}"Updated {{ field.name }}"{% elif field.type == 'IntegerField' %}456{% elif field.type == 'BooleanField' %}false{% elif field.type == 'DateTimeField' %}"2024-01-02T00:00:00Z"{% else %}"updated_value"{% endif %}{% if not loop.last %},{% endif %}
                {% endif %}
            {% endfor %}
            }' | jq .

            # Partial update {{ model.name }} (PATCH)
            echo -e "\nPartial update {{ model.name }}:"
            curl -X PATCH "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/1/" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{
            "{{ model.fields[0].name }}": "Partially updated value"
            }' | jq .

            # Delete {{ model.name }}
            echo -e "\nDelete {{ model.name }}:"
            curl -X DELETE "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/1/" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}"

            {% if model.api and model.api.custom_actions %}
                # Custom actions for {{ model.name }}
                {% for action in model.api.custom_actions %}
                    echo -e "\n{{ action.description or action.name|title }}:"
                    curl -X {{ action.method|upper }} "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/{% if not action.is_list %}1/{% endif %}{{ action.url_name }}/" \
                    -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                    {% if action.method|upper in ['POST', 'PUT', 'PATCH'] %}-H "Content-Type: application/json" \
                        -d '{}' \
                    {% endif %}| jq .

                {% endfor %}
            {% endif %}

            {% if model.api and model.api.allow_bulk %}
                # Bulk operations for {{ model.name }}
                echo -e "\nBulk create {{ model.name|plural }}:"
                curl -X POST "${API_URL}/{{ app.name }}/{{ model.name|lower|plural }}/bulk_create/" \
                -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                -H "Content-Type: application/json" \
                -d '{
                "items": [
                {
                {% for field in model.fields %}
                    {% if field.required and field.name not in ['id', 'created_at', 'updated_at'] %}
                        "{{ field.name }}": "Value 1"{% if not loop.last %},{% endif %}
                    {% endif %}
                {% endfor %}
                },
                {
                {% for field in model.fields %}
                    {% if field.required and field.name not in ['id', 'created_at', 'updated_at'] %}
                        "{{ field.name }}": "Value 2"{% if not loop.last %},{% endif %}
                    {% endif %}
                {% endfor %}
                }
                ]
                }' | jq .
            {% endif %}

        {% endfor %}
    {% endif %}
{% endfor %}

# Advanced Examples
echo -e "\n${GREEN}Advanced Examples${NC}"

# Search with complex filters
echo -e "\nSearch with filters:"
curl -X GET "${API_URL}/search/" \
-H "Authorization: Bearer ${ACCESS_TOKEN}" \
-H "Accept: application/json" \
-G \
--data-urlencode "q=search term" \
--data-urlencode "type=model_name" \
--data-urlencode "ordering=-created_at" | jq .

# File upload example
echo -e "\nFile upload:"
curl -X POST "${API_URL}/upload/" \
-H "Authorization: Bearer ${ACCESS_TOKEN}" \
-F "file=@/path/to/file.pdf" \
-F "description=File description" | jq .

# Export data
echo -e "\nExport data (CSV):"
curl -X GET "${API_URL}/export/" \
-H "Authorization: Bearer ${ACCESS_TOKEN}" \
-H "Accept: text/csv" \
-o export.csv

# WebSocket connection (using wscat)
echo -e "\n${GREEN}WebSocket Example${NC}"
echo "Install wscat: npm install -g wscat"
echo "Connect: wscat -c ws://localhost:8000/ws/ -H 'Authorization: Bearer ${ACCESS_TOKEN}'"

# Health check
echo -e "\n${GREEN}Health Check${NC}"
curl -X GET "${API_URL}/health/" | jq .

# API documentation
echo -e "\n${GREEN}API Documentation${NC}"
echo "Swagger UI: ${BASE_URL}/api/docs/"
echo "ReDoc: ${BASE_URL}/api/redoc/"
echo "OpenAPI Schema: ${BASE_URL}/api/schema/"

# Performance testing with Apache Bench
echo -e "\n${GREEN}Performance Testing${NC}"
echo "Install Apache Bench: apt-get install apache2-utils"
echo "Test endpoint performance:"
echo "ab -n 100 -c 10 -H 'Authorization: Bearer ${ACCESS_TOKEN}' ${API_URL}/{{ apps[0].name }}/{{ apps[0].models[0].name|lower|plural }}/"

# Using HTTPie (alternative to cURL)
echo -e "\n${GREEN}HTTPie Examples${NC}"
echo "Install HTTPie: pip install httpie"
echo "Login with HTTPie:"
echo "http POST ${API_URL}/auth/login/ username=admin password=password"
echo "Get with auth:"
echo "http GET ${API_URL}/{{ apps[0].name }}/{{ apps[0].models[0].name|lower|plural }}/ 'Authorization:Bearer ${ACCESS_TOKEN}'"