#!/bin/bash

# {{ project.name }} API Client - cURL Implementation
# Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
#
# Usage:
#   ./{{ project.name|lower|replace(' ', '_') }}_api_client.sh [command] [options]
#
# Commands:
#   login <username> <password>     - Authenticate and store tokens
    #   logout                         - Logout and clear tokens
    #   get <endpoint>                 - GET request to endpoint
        #   post <endpoint> <data>         - POST request with JSON data
            #   put <endpoint> <data>          - PUT request with JSON data
                #   patch <endpoint> <data>        - PATCH request with JSON data
                    #   delete <endpoint>              - DELETE request to endpoint
                        #   upload <endpoint> <file>       - Upload file to endpoint

                            set -euo pipefail

                            # Configuration
                            BASE_URL="${API_BASE_URL:-http://localhost:8000}"
                            API_URL="${BASE_URL}/api"
                            CONFIG_DIR="${HOME}/.{{ project.name|lower|replace(' ', '_') }}_api"
                            TOKEN_FILE="${CONFIG_DIR}/tokens.json"
                            VERBOSE="${VERBOSE:-false}"

                            # Colors for output
                            RED='\033[0;31m'
                            GREEN='\033[0;32m'
                            YELLOW='\033[1;33m'
                            BLUE='\033[0;34m'
                            NC='\033[0m' # No Color

                            # Ensure config directory exists
                            mkdir -p "${CONFIG_DIR}"

                            # Logging functions
                            log_info() {
                            echo -e "${BLUE}[INFO]${NC} $1" >&2
                            }

                            log_success() {
                            echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
                            }

                            log_error() {
                            echo -e "${RED}[ERROR]${NC} $1" >&2
                            }

                            log_warning() {
                            echo -e "${YELLOW}[WARNING]${NC} $1" >&2
                            }

                            # Debug logging
                            debug() {
                            if [[ "${VERBOSE}" == "true" ]]; then
                            echo -e "${YELLOW}[DEBUG]${NC} $1" >&2
                            fi
                            }

                            # Get stored access token
                            get_access_token() {
                            if [[ -f "${TOKEN_FILE}" ]]; then
                            jq -r '.access // empty' "${TOKEN_FILE}" 2>/dev/null || echo ""
                            else
                            echo ""
                            fi
                            }

                            # Get stored refresh token
                            get_refresh_token() {
                            if [[ -f "${TOKEN_FILE}" ]]; then
                            jq -r '.refresh // empty' "${TOKEN_FILE}" 2>/dev/null || echo ""
                            else
                            echo ""
                            fi
                            }

                            # Store tokens
                            store_tokens() {
                            local access_token="$1"
                            local refresh_token="$2"

                            echo "{\"access\": \"${access_token}\", \"refresh\": \"${refresh_token}\"}" > "${TOKEN_FILE}"
                            chmod 600 "${TOKEN_FILE}"

                            debug "Tokens stored in ${TOKEN_FILE}"
                            }

                            # Clear tokens
                            clear_tokens() {
                            rm -f "${TOKEN_FILE}"
                            debug "Tokens cleared"
                            }

                            # Build authorization header
                            get_auth_header() {
                            local token=$(get_access_token)
                            if [[ -n "${token}" ]]; then
                            echo "Authorization: Bearer ${token}"
                            else
                            echo ""
                            fi
                            }

                            # Make authenticated request
                            api_request() {
                            local method="$1"
                            local endpoint="$2"
                            local data="${3:-}"
                            local content_type="${4:-application/json}"

                            # Remove leading slash from endpoint if present
                            endpoint="${endpoint#/}"

                            local url="${API_URL}/${endpoint}"
                            local auth_header=$(get_auth_header)

                            local curl_args=(
                            -X "${method}"
                            -H "Accept: application/json"
                            )

                            # Add auth header if available
                            if [[ -n "${auth_header}" ]]; then
                            curl_args+=(-H "${auth_header}")
                            fi

                            # Add content type for requests with data
                            if [[ -n "${data}" ]]; then
                            curl_args+=(-H "Content-Type: ${content_type}")

                            if [[ "${content_type}" == "application/json" ]]; then
                            curl_args+=(-d "${data}")
                            else
                            # For multipart/form-data (file uploads)
                            curl_args+=(${data})  # data should be pre-formatted -F arguments
                            fi
                            fi

                            debug "Request: ${method} ${url}"
                            if [[ "${VERBOSE}" == "true" && -n "${data}" && "${content_type}" == "application/json" ]]; then
                            debug "Data: ${data}"
                            fi

                            # Make request and capture response and status
                            local response
                            local http_status

                            response=$(curl -s -w "\n__HTTP_STATUS__%{http_code}" "${curl_args[@]}" "${url}")
                            http_status=$(echo "${response}" | tail -n1 | sed 's/__HTTP_STATUS__//')
                            response=$(echo "${response}" | sed '$d')  # Remove last line (status)

                            debug "Response status: ${http_status}"

                            # Check status code
                            if [[ "${http_status}" -ge 200 && "${http_status}" -lt 300 ]]; then
                            if [[ -n "${response}" ]]; then
                            echo "${response}"
                            fi
                            return 0
                            else
                            log_error "Request failed with status ${http_status}"
                            if [[ -n "${response}" ]]; then
                            echo "${response}" | jq -r '.detail // .message // .error // .' >&2
                            fi
                            return 1
                            fi
                            }

                            # Authentication commands
                            cmd_login() {
                            local username="${1:-}"
                            local password="${2:-}"

                            if [[ -z "${username}" || -z "${password}" ]]; then
                            log_error "Usage: $0 login <username> <password>"
                                return 1
                                fi

                                log_info "Logging in as ${username}..."

                                local response
                                response=$(api_request POST "auth/login/" "{\"username\": \"${username}\", \"password\": \"${password}\"}")

                                if [[ $? -eq 0 ]]; then
                                local access_token=$(echo "${response}" | jq -r '.access')
                                local refresh_token=$(echo "${response}" | jq -r '.refresh')

                                if [[ -n "${access_token}" && -n "${refresh_token}" ]]; then
                                store_tokens "${access_token}" "${refresh_token}"
                                log_success "Login successful"

                                # Display user info if available
                                local user_info=$(echo "${response}" | jq -r '.user // empty')
                                if [[ -n "${user_info}" ]]; then
                                echo "${user_info}" | jq .
                                fi
                                else
                                log_error "Invalid response: missing tokens"
                                return 1
                                fi
                                else
                                return 1
                                fi
                                }

                                cmd_logout() {
                                log_info "Logging out..."

                                # Call logout endpoint if it exists
                                api_request POST "auth/logout/" "" 2>/dev/null || true

                                clear_tokens
                                log_success "Logged out successfully"
                                }

                                cmd_refresh() {
                                log_info "Refreshing access token..."

                                local refresh_token=$(get_refresh_token)
                                if [[ -z "${refresh_token}" ]]; then
                                log_error "No refresh token found. Please login first."
                                return 1
                                fi

                                local response
                                response=$(api_request POST "auth/refresh/" "{\"refresh\": \"${refresh_token}\"}")

                                if [[ $? -eq 0 ]]; then
                                local new_access_token=$(echo "${response}" | jq -r '.access')

                                if [[ -n "${new_access_token}" ]]; then
                                store_tokens "${new_access_token}" "${refresh_token}"
                                log_success "Token refreshed successfully"
                                else
                                log_error "Invalid response: missing access token"
                                return 1
                                fi
                                else
                                return 1
                                fi
                                }

                                # Generic HTTP method commands
                                cmd_get() {
                                local endpoint="${1:-}"

                                if [[ -z "${endpoint}" ]]; then
                                log_error "Usage: $0 get <endpoint>"
                                    return 1
                                    fi

                                    api_request GET "${endpoint}" | jq .
                                    }

                                    cmd_post() {
                                    local endpoint="${1:-}"
                                    local data="${2:-{}}"

                                    if [[ -z "${endpoint}" ]]; then
                                    log_error "Usage: $0 post <endpoint> [data]"
                                        return 1
                                        fi

                                        api_request POST "${endpoint}" "${data}" | jq .
                                        }

                                        cmd_put() {
                                        local endpoint="${1:-}"
                                        local data="${2:-{}}"

                                        if [[ -z "${endpoint}" ]]; then
                                        log_error "Usage: $0 put <endpoint> [data]"
                                            return 1
                                            fi

                                            api_request PUT "${endpoint}" "${data}" | jq .
                                            }

                                            cmd_patch() {
                                            local endpoint="${1:-}"
                                            local data="${2:-{}}"

                                            if [[ -z "${endpoint}" ]]; then
                                            log_error "Usage: $0 patch <endpoint> [data]"
                                                return 1
                                                fi

                                                api_request PATCH "${endpoint}" "${data}" | jq .
                                                }

                                                cmd_delete() {
                                                local endpoint="${1:-}"

                                                if [[ -z "${endpoint}" ]]; then
                                                log_error "Usage: $0 delete <endpoint>"
                                                    return 1
                                                    fi

                                                    api_request DELETE "${endpoint}"
                                                    log_success "Deleted successfully"
                                                    }

                                                    # File upload command
                                                    cmd_upload() {
                                                    local endpoint="${1:-}"
                                                    local file="${2:-}"
                                                    local field_name="${3:-file}"

                                                    if [[ -z "${endpoint}" || -z "${file}" ]]; then
                                                    log_error "Usage: $0 upload <endpoint> <file> [field_name]"
                                                        return 1
                                                        fi

                                                        if [[ ! -f "${file}" ]]; then
                                                        log_error "File not found: ${file}"
                                                        return 1
                                                        fi

                                                        log_info "Uploading ${file}..."

                                                        # Build multipart form data
                                                        local form_data="-F ${field_name}=@${file}"

                                                        api_request POST "${endpoint}" "${form_data}" "multipart/form-data" | jq .
                                                        }

                                                        # Model-specific commands
                                                        {% for app in apps %}
                                                            {% if app.models %}
                                                                {# {{ app.name|title }} commands #}
                                                                {% for model in app.models %}

                                                                    cmd_list_{{ model.name|lower }}s() {
                                                                    local query_params="${1:-}"
                                                                    local endpoint="{{ app.name }}/{{ model.name|lower }}s/"

                                                                    if [[ -n "${query_params}" ]]; then
                                                                    endpoint="${endpoint}?${query_params}"
                                                                    fi

                                                                    log_info "Listing {{ model.name }}s..."
                                                                    api_request GET "${endpoint}" | jq .
                                                                    }

                                                                    cmd_get_{{ model.name|lower }}() {
                                                                    local id="${1:-}"

                                                                    if [[ -z "${id}" ]]; then
                                                                    log_error "Usage: $0 get-{{ model.name|lower }} <id>"
                                                                    return 1
                                                                    fi

                                                                    log_info "Getting {{ model.name }} ${id}..."
                                                                    api_request GET "{{ app.name }}/{{ model.name|lower }}s/${id}/" | jq .
                                                                    }

                                                                    cmd_create_{{ model.name|lower }}() {
                                                                    local data="${1:-}"

                                                                    if [[ -z "${data}" ]]; then
                                                                    # Provide example data
                                                                    data='{
                                                                    {% for field in model.fields %}
                                                                        {% if field.required and field.name not in ['id', 'created_at', 'updated_at'] %}
                                                                            "{{ field.name }}": {% if field.type == 'CharField' or field.type == 'TextField' %}"example"{% elif field.type == 'IntegerField' %}123{% elif field.type == 'BooleanField' %}true{% elif field.type == 'DateTimeField' %}"2024-01-01T00:00:00Z"{% else %}"value"{% endif %}{% if not loop.last %},{% endif %}
                                                                        {% endif %}
                                                                    {% endfor %}
                                                                    }'
                                                                    log_info "Using example data. Pass JSON as argument to override."
                                                                    fi

                                                                    log_info "Creating {{ model.name }}..."
                                                                    api_request POST "{{ app.name }}/{{ model.name|lower }}s/" "${data}" | jq .
                                                                    }

                                                                    cmd_update_{{ model.name|lower }}() {
                                                                    local id="${1:-}"
                                                                    local data="${2:-}"

                                                                    if [[ -z "${id}" || -z "${data}" ]]; then
                                                                    log_error "Usage: $0 update-{{ model.name|lower }} <id> <data>"
                                                                    return 1
                                                                    fi

                                                                    log_info "Updating {{ model.name }} ${id}..."
                                                                    api_request PUT "{{ app.name }}/{{ model.name|lower }}s/${id}/" "${data}" | jq .
                                                                    }

                                                                    cmd_delete_{{ model.name|lower }}() {
                                                                    local id="${1:-}"

                                                                    if [[ -z "${id}" ]]; then
                                                                    log_error "Usage: $0 delete-{{ model.name|lower }} <id>"
                                                                    return 1
                                                                    fi

                                                                    log_info "Deleting {{ model.name }} ${id}..."
                                                                    api_request DELETE "{{ app.name }}/{{ model.name|lower }}s/${id}/"
                                                                    log_success "{{ model.name }} ${id} deleted successfully"
                                                                    }
                                                                {% endfor %}
                                                            {% endif %}
                                                        {% endfor %}

                                                        # Search command
                                                        cmd_search() {
                                                        local query="${1:-}"
                                                        local type="${2:-}"

                                                        if [[ -z "${query}" ]]; then
                                                        log_error "Usage: $0 search <query> [type]"
                                                            return 1
                                                            fi

                                                            local endpoint="search/?q=${query}"
                                                            if [[ -n "${type}" ]]; then
                                                            endpoint="${endpoint}&type=${type}"
                                                            fi

                                                            log_info "Searching for '${query}'..."
                                                            api_request GET "${endpoint}" | jq .
                                                            }

                                                            # Health check command
                                                            cmd_health() {
                                                            log_info "Checking API health..."
                                                            api_request GET "health/" | jq .
                                                            }

                                                            # Interactive mode
                                                            cmd_interactive() {
                                                            log_info "Entering interactive mode. Type 'help' for commands, 'exit' to quit."

                                                            while true; do
                                                            echo -n "> "
                                                            read -r line

                                                            if [[ "${line}" == "exit" || "${line}" == "quit" ]]; then
                                                            break
                                                            fi

                                                            # Parse and execute command
                                                            eval "$0 ${line}" || true
                                                            done

                                                            log_info "Exiting interactive mode."
                                                            }

                                                            # Help command
                                                            cmd_help() {
                                                            cat << EOF
                                                            {{ project.name }} API Client

                                                            Usage: $0 [command] [options]

                                                            Authentication Commands:
                                                            login <username> <password>    Authenticate with the API
                                                                logout                        Logout and clear stored tokens
                                                                refresh                       Refresh access token

                                                                HTTP Commands:
                                                                get <endpoint>                GET request to endpoint
                                                                    post <endpoint> [data]        POST request with JSON data
                                                                        put <endpoint> [data]         PUT request with JSON data
                                                                            patch <endpoint> [data]       PATCH request with JSON data
                                                                                delete <endpoint>             DELETE request to endpoint
                                                                                    upload <endpoint> <file>      Upload file to endpoint

                                                                                        Model Commands:
                                                                                        {% for app in apps %}
                                                                                            {% if app.models %}
                                                                                                {# {{ app.name|title }} #}
                                                                                                {% for model in app.models %}
                                                                                                    list-{{ model.name|lower }}s [params]        List all {{ model.name }}s
                                                                                                    get-{{ model.name|lower }} <id>             Get {{ model.name }} by ID
                                                                                                    create-{{ model.name|lower }} [data]        Create new {{ model.name }}
                                                                                                    update-{{ model.name|lower }} <id> <data>   Update {{ model.name }}
                                                                                                    delete-{{ model.name|lower }} <id>          Delete {{ model.name }}
                                                                                                {% endfor %}
                                                                                            {% endif %}
                                                                                        {% endfor %}

                                                                                        Utility Commands:
                                                                                        search <query> [type]         Search across models
                                                                                            health                        Check API health status
                                                                                            interactive                   Enter interactive mode
                                                                                            help                          Show this help message

                                                                                            Environment Variables:
                                                                                            API_BASE_URL                  Base URL for API (default: http://localhost:8000)
                                                                                            VERBOSE                       Enable verbose output (true/false)

                                                                                            Examples:
                                                                                            # Login
                                                                                            $0 login admin password123

                                                                                            # List items with pagination
                                                                                            $0 list-items "page=2&page_size=10"

                                                                                            # Create a new item
                                                                                            $0 create-item '{"name": "New Item", "description": "Test"}'

                                                                                            # Search
                                                                                            $0 search "query text" ModelName

                                                                                            # Upload file
                                                                                            $0 upload media/upload/ /path/to/file.pdf

                                                                                            EOF
                                                                                            }

                                                                                            # Main command dispatcher
                                                                                            main() {
                                                                                            local command="${1:-help}"
                                                                                            shift || true

                                                                                            case "${command}" in
                                                                                            # Authentication
                                                                                            login) cmd_login "$@" ;;
                                                                                            logout) cmd_logout "$@" ;;
                                                                                            refresh) cmd_refresh "$@" ;;

                                                                                            # HTTP methods
                                                                                            get) cmd_get "$@" ;;
                                                                                            post) cmd_post "$@" ;;
                                                                                            put) cmd_put "$@" ;;
                                                                                            patch) cmd_patch "$@" ;;
                                                                                            delete) cmd_delete "$@" ;;
                                                                                            upload) cmd_upload "$@" ;;

                                                                                            # Model commands
                                                                                            {% for app in apps %}
                                                                                                {% if app.models %}
                                                                                                    {% for model in app.models %}
                                                                                                        list-{{ model.name|lower }}s) cmd_list_{{ model.name|lower }}s "$@" ;;
                                                                                                        get-{{ model.name|lower }}) cmd_get_{{ model.name|lower }} "$@" ;;
                                                                                                        create-{{ model.name|lower }}) cmd_create_{{ model.name|lower }} "$@" ;;
                                                                                                        update-{{ model.name|lower }}) cmd_update_{{ model.name|lower }} "$@" ;;
                                                                                                        delete-{{ model.name|lower }}) cmd_delete_{{ model.name|lower }} "$@" ;;
                                                                                                    {% endfor %}
                                                                                                {% endif %}
                                                                                            {% endfor %}

                                                                                            # Utilities
                                                                                            search) cmd_search "$@" ;;
                                                                                            health) cmd_health "$@" ;;
                                                                                            interactive) cmd_interactive "$@" ;;
                                                                                            help) cmd_help "$@" ;;

                                                                                            *)
                                                                                            log_error "Unknown command: ${command}"
                                                                                            cmd_help
                                                                                            exit 1
                                                                                            ;;
                                                                                            esac
                                                                                            }

                                                                                            # Check dependencies
                                                                                            check_dependencies() {
                                                                                            local deps=("curl" "jq")
                                                                                            local missing=()

                                                                                            for dep in "${deps[@]}"; do
                                                                                            if ! command -v "${dep}" &> /dev/null; then
                                                                                            missing+=("${dep}")
                                                                                            fi
                                                                                            done

                                                                                            if [[ ${#missing[@]} -gt 0 ]]; then
                                                                                            log_error "Missing required dependencies: ${missing[*]}"
                                                                                            log_info "Please install them and try again."
                                                                                            exit 1
                                                                                            fi
                                                                                            }

                                                                                            # Run checks and main
                                                                                            check_dependencies
                                                                                            main "$@"