/**
* JavaScript/TypeScript client for {{ project.name }} API.
*
* Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
*/

/**
* {{ project.name }} API Client
*
* @example
* const client = new {{ project.name|title|replace(' ', '') }}APIClient('http://localhost:8000');
*
* // Login
* await client.login('admin', 'password');
*
* // Get all items
* const items = await client.list{{ models[0].name }}s();
*
* // Create a new item
* const newItem = await client.create{{ models[0].name }}({ name: 'Test Item' });
*/
class {{ project.name|title|replace(' ', '') }}APIClient {
constructor(baseUrl = 'http://localhost:8000', apiKey = null) {
this.baseUrl = baseUrl.replace(/\/$/, '');
this.headers = {
'Content-Type': 'application/json',
'Accept': 'application/json',
};

if (apiKey) {
this.headers['Authorization'] = `Bearer ${apiKey}`;
}
}

/**
* Make an HTTP request to the API
* @private
*/
async request(method, endpoint, options = {}) {
const url = `${this.baseUrl}${endpoint}`;

const config = {
method,
headers: { ...this.headers },
...options,
};

if (options.body && typeof options.body === 'object') {
config.body = JSON.stringify(options.body);
}

const response = await fetch(url, config);

if (!response.ok) {
const error = await response.json().catch(() => ({}));
throw new Error(error.detail || `HTTP ${response.status}: ${response.statusText}`);
}

return response.status === 204 ? null : await response.json();
}

/**
* Login to the API
* @param {string} username - Username or email
* @param {string} password - Password
* @returns {Promise<Object>} Authentication response
    */
    async login(username, password) {
    const response = await this.request('POST', '/api/auth/login/', {
    body: { username, password },
    });

    if (response.access) {
    this.headers['Authorization'] = `Bearer ${response.access}`;
    }

    return response;
    }

    /**
    * Refresh the access token
    * @param {string} refreshToken - Refresh token
    * @returns {Promise<Object>} New access token
        */
        async refreshToken(refreshToken) {
        const response = await this.request('POST', '/api/auth/refresh/', {
        body: { refresh: refreshToken },
        });

        if (response.access) {
        this.headers['Authorization'] = `Bearer ${response.access}`;
        }

        return response;
        }

        /**
        * Logout
        * @returns {Promise<void>}
            */
            async logout() {
            await this.request('POST', '/api/auth/logout/');
            delete this.headers['Authorization'];
            }

            {% for app in apps %}
                {% if app.models %}
                    // {{ app.name|title }} App Methods

                    {% for model in app.models %}
                        /**
                        * List all {{ model.name }} records
                        * @param {Object} params - Query parameters
                        * @returns {Promise<Object>} Paginated list of {{ model.name }} records
                        */
                        async list{{ model.name }}s(params = {}) {
                        const queryString = new URLSearchParams(params).toString();
                        const endpoint = `/api/{{ app.name }}/{{ model.name|lower }}s/` + (queryString ? `?${queryString}` : '');
                        return this.request('GET', endpoint);
                        }

                        /**
                        * Get a specific {{ model.name }}
                        * @param {number} id - {{ model.name }} ID
                        * @returns {Promise<Object>} {{ model.name }} details
                        */
                        async get{{ model.name }}(id) {
                        return this.request('GET', `/api/{{ app.name }}/{{ model.name|lower }}s/${id}/`);
                        }

                        /**
                        * Create a new {{ model.name }}
                        * @param {Object} data - {{ model.name }} data
                        * @returns {Promise<Object>} Created {{ model.name }}
                        */
                        async create{{ model.name }}(data) {
                        return this.request('POST', `/api/{{ app.name }}/{{ model.name|lower }}s/`, { body: data });
                        }

                        /**
                        * Update a {{ model.name }}
                        * @param {number} id - {{ model.name }} ID
                        * @param {Object} data - Updated data
                        * @returns {Promise<Object>} Updated {{ model.name }}
                        */
                        async update{{ model.name }}(id, data) {
                        return this.request('PUT', `/api/{{ app.name }}/{{ model.name|lower }}s/${id}/`, { body: data });
                        }

                        /**
                        * Partially update a {{ model.name }}
                        * @param {number} id - {{ model.name }} ID
                        * @param {Object} data - Fields to update
                        * @returns {Promise<Object>} Updated {{ model.name }}
                        */
                        async partialUpdate{{ model.name }}(id, data) {
                        return this.request('PATCH', `/api/{{ app.name }}/{{ model.name|lower }}s/${id}/`, { body: data });
                        }

                        /**
                        * Delete a {{ model.name }}
                        * @param {number} id - {{ model.name }} ID
                        * @returns {Promise<null>}
                        */
                        async delete{{ model.name }}(id) {
                        return this.request('DELETE', `/api/{{ app.name }}/{{ model.name|lower }}s/${id}/`);
                        }

                        {% if model.api and model.api.custom_actions %}
                            {% for action in model.api.custom_actions %}
                                /**
                                * {{ action.description or action.name|title|replace('_', ' ') }} for {{ model.name }}
                                * @param {{% if not action.is_list %}number{% else %}void{% endif %}} {% if not action.is_list %}id - {{ model.name }} ID{% endif %}
                                * @param {Object} data - Request data
                                * @returns {Promise<Object>} Action response
                                */
                                async {{ model.name|lower }}{{ action.name|title|replace('_', '') }}({% if not action.is_list %}id, {% endif %}data = null) {
                                const endpoint = {% if action.is_list %}`/api/{{ app.name }}/{{ model.name|lower }}s/{{ action.url_name }}/`{% else %}`/api/{{ app.name }}/{{ model.name|lower }}s/${id}/{{ action.url_name }}/`{% endif %};
                                const options = {};
                                if (data && ['POST', 'PUT', 'PATCH'].includes('{{ action.method|upper }}')) {
                                options.body = data;
                                }
                                return this.request('{{ action.method|upper }}', endpoint, options);
                                }

                            {% endfor %}
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endfor %}

            // Utility methods

            /**
            * Upload a file
            * @param {string} endpoint - Upload endpoint
            * @param {File} file - File to upload
            * @param {Object} additionalData - Additional form data
            * @returns {Promise<Object>} Upload response
                */
                async uploadFile(endpoint, file, additionalData = {}) {
                const formData = new FormData();
                formData.append('file', file);

                Object.entries(additionalData).forEach(([key, value]) => {
                formData.append(key, value);
                });

                const headers = { ...this.headers };
                delete headers['Content-Type']; // Let browser set it with boundary

                const response = await fetch(`${this.baseUrl}${endpoint}`, {
                method: 'POST',
                headers,
                body: formData,
                });

                if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                return response.json();
                }

                /**
                * Download a file
                * @param {string} endpoint - Download endpoint
                * @returns {Promise<Blob>} File blob
                    */
                    async downloadFile(endpoint) {
                    const response = await fetch(`${this.baseUrl}${endpoint}`, {
                    headers: this.headers,
                    });

                    if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    return response.blob();
                    }
                    }

                    // TypeScript type definitions
                    {% if project.get('typescript', False) %}
                        // TypeScript interfaces
                        interface PaginatedResponse<T> {
                        count: number;
                        next: string | null;
                        previous: string | null;
                        results: T[];
                        }

                        interface AuthResponse {
                        access: string;
                        refresh: string;
                        user: {
                        id: number;
                        username: string;
                        email: string;
                        };
                        }

                        interface ErrorResponse {
                        detail?: string;
                        [field: string]: string | string[] | undefined;
                        }

                        {% for app in apps %}
                            {% if app.models %}
                                // {{ app.name|title }} Types

                                {% for model in app.models %}
                                    interface {{ model.name }} {
                                    id: number;
                                    {% for field in model.fields %}
                                        {% if field.name != 'id' %}
                                            {{ field.name }}: {% if field.type == 'CharField' or field.type == 'TextField' %}string{% elif field.type == 'IntegerField' or field.type == 'BigIntegerField' %}number{% elif field.type == 'BooleanField' %}boolean{% elif field.type == 'DateTimeField' or field.type == 'DateField' %}string{% elif field.type == 'DecimalField' or field.type == 'FloatField' %}number{% elif field.type == 'JSONField' %}any{% elif field.type == 'ForeignKey' or field.type == 'OneToOneField' %}number{% elif field.type == 'ManyToManyField' %}number[]{% else %}any{% endif %};
                                        {% endif %}
                                    {% endfor %}
                                    created_at: string;
                                    updated_at: string;
                                    }

                                    interface {{ model.name }}Create {
                                    {% for field in model.fields %}
                                        {% if field.required and field.name not in ['id', 'created_at', 'updated_at'] %}
                                            {{ field.name }}: {% if field.type == 'CharField' or field.type == 'TextField' %}string{% elif field.type == 'IntegerField' or field.type == 'BigIntegerField' %}number{% elif field.type == 'BooleanField' %}boolean{% elif field.type == 'DateTimeField' or field.type == 'DateField' %}string{% elif field.type == 'DecimalField' or field.type == 'FloatField' %}number{% elif field.type == 'JSONField' %}any{% elif field.type == 'ForeignKey' or field.type == 'OneToOneField' %}number{% elif field.type == 'ManyToManyField' %}number[]{% else %}any{% endif %};
                                        {% endif %}
                                    {% endfor %}
                                    }

                                    interface {{ model.name }}Update {
                                    {% for field in model.fields %}
                                        {% if field.name not in ['id', 'created_at', 'updated_at'] %}
                                            {{ field.name }}?: {% if field.type == 'CharField' or field.type == 'TextField' %}string{% elif field.type == 'IntegerField' or field.type == 'BigIntegerField' %}number{% elif field.type == 'BooleanField' %}boolean{% elif field.type == 'DateTimeField' or field.type == 'DateField' %}string{% elif field.type == 'DecimalField' or field.type == 'FloatField' %}number{% elif field.type == 'JSONField' %}any{% elif field.type == 'ForeignKey' or field.type == 'OneToOneField' %}number{% elif field.type == 'ManyToManyField' %}number[]{% else %}any{% endif %};
                                        {% endif %}
                                    {% endfor %}
                                    }

                                {% endfor %}
                            {% endif %}
                        {% endfor %}
                    {% endif %}

                    // Export for module systems
                    if (typeof module !== 'undefined' && module.exports) {
                    module.exports = {{ project.name|title|replace(' ', '') }}APIClient;
                    }

                    // Example usage
                    async function exampleUsage() {
                    const client = new {{ project.name|title|replace(' ', '') }}APIClient('http://localhost:8000');

                    try {
                    // Login
                    console.log('Logging in...');
                    const auth = await client.login('admin', 'password');
                    console.log('Logged in:', auth.user.username);

                    {% if apps and apps[0].models %}
                        // Example with first model
                        const modelName = '{{ apps[0].models[0].name }}';

                        // List items
                        console.log(`\nListing ${modelName}s...`);
                        const items = await client.list{{ apps[0].models[0].name }}s({ page: 1, page_size: 10 });
                        console.log(`Found ${items.count} ${modelName}s`);

                        // Create a new item
                        console.log(`\nCreating new ${modelName}...`);
                        const newItem = await client.create{{ apps[0].models[0].name }}({
                        {% for field in apps[0].models[0].fields[:3] %}
                            {% if field.required and field.name not in ['id', 'created_at', 'updated_at'] %}
                                {{ field.name }}: {% if field.type == 'CharField' %}'Example {{ field.name }}'{% elif field.type == 'IntegerField' %}123{% elif field.type == 'BooleanField' %}true{% else %}'value'{% endif %},
                            {% endif %}
                        {% endfor %}
                        });
                        console.log('Created:', newItem);

                        // Update the item
                        console.log(`\nUpdating ${modelName}...`);
                        const updatedItem = await client.update{{ apps[0].models[0].name }}(newItem.id, {
                        {% if apps[0].models[0].fields %}
                            {{ apps[0].models[0].fields[0].name }}: 'Updated value',
                        {% endif %}
                        });
                        console.log('Updated:', updatedItem);

                        // Delete the item
                        console.log(`\nDeleting ${modelName}...`);
                        await client.delete{{ apps[0].models[0].name }}(newItem.id);
                        console.log('Deleted successfully');
                    {% endif %}

                    } catch (error) {
                    console.error('Error:', error.message);
                    }
                    }

                    // Run example if this file is executed directly
                    if (typeof window === 'undefined' && require.main === module) {
                    exampleUsage();
                    }

                    // React Hook Example (if using React)
                    function use{{ project.name|title|replace(' ', '') }}API() {
                    const [client] = React.useState(() => new {{ project.name|title|replace(' ', '') }}APIClient());

                    return client;
                    }

                    // Vue 3 Composition API Example
                    function use{{ project.name|title|replace(' ', '') }}APIVue() {
                    const client = new {{ project.name|title|replace(' ', '') }}APIClient();

                    return {
                    client,
                    login: (username, password) => client.login(username, password),
                    {% for app in apps %}
                        {% if app.models %}
                            {% for model in app.models %}
                                list{{ model.name }}s: (params) => client.list{{ model.name }}s(params),
                                get{{ model.name }}: (id) => client.get{{ model.name }}(id),
                                create{{ model.name }}: (data) => client.create{{ model.name }}(data),
                                update{{ model.name }}: (id, data) => client.update{{ model.name }}(id, data),
                                delete{{ model.name }}: (id) => client.delete{{ model.name }}(id),
                            {% endfor %}
                        {% endif %}
                    {% endfor %}
                    };
                    }