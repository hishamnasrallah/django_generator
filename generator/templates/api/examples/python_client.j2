"""
Python client examples for {{ project.name }} API.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""

import requests
import json
from typing import Dict, Any, Optional, List
from datetime import datetime


class {{ project.name|title }}APIClient:
"""
Python client for {{ project.name }} API.

Example usage:
client = {{ project.name|title }}APIClient('http://localhost:8000', 'your-api-key')

# Get all items
items = client.get_items()

# Create a new item
new_item = client.create_item({'name': 'Test Item', 'description': 'Test'})
"""

def __init__(self, base_url: str, api_key: Optional[str] = None):
"""
Initialize the API client.

Args:
base_url: The base URL of the API (e.g., 'http://localhost:8000')
api_key: Optional API key for authentication
"""
self.base_url = base_url.rstrip('/')
self.session = requests.Session()

# Set default headers
self.session.headers.update({
'Content-Type': 'application/json',
'Accept': 'application/json',
})

# Add API key if provided
if api_key:
self.session.headers['Authorization'] = f'Bearer {api_key}'

def _request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
"""Make an HTTP request to the API."""
url = f"{self.base_url}{endpoint}"

response = self.session.request(method, url, **kwargs)
response.raise_for_status()

return response.json() if response.content else {}

def login(self, username: str, password: str) -> Dict[str, Any]:
"""
Authenticate with the API.

Args:
username: Username or email
password: Password

Returns:
Authentication response with tokens
"""
data = {
'username': username,
'password': password,
}

response = self._request('POST', '/api/auth/login/', json=data)

# Store the access token
if 'access' in response:
self.session.headers['Authorization'] = f'Bearer {response["access"]}'

return response

def refresh_token(self, refresh: str) -> Dict[str, Any]:
"""Refresh the access token."""
data = {'refresh': refresh}
response = self._request('POST', '/api/auth/refresh/', json=data)

# Update the access token
if 'access' in response:
self.session.headers['Authorization'] = f'Bearer {response["access"]}'

return response

{% for app in apps %}
    {% if app.models %}

        # {{ app.name|title }} App Methods

        {% for model in app.models %}
            def list_{{ model.name|lower|plural }}(self, **params) -> Dict[str, Any]:
            """
            List all {{ model.name|plural }}.

            Args:
            **params: Query parameters for filtering, ordering, pagination

            Returns:
            Paginated list of {{ model.name|plural }}
            """
            return self._request('GET', '/api/{{ app.name }}/{{ model.name|lower|plural }}/', params=params)

            def get_{{ model.name|lower }}(self, id: int) -> Dict[str, Any]:
            """
            Get a specific {{ model.name }}.

            Args:
            id: {{ model.name }} ID

            Returns:
            {{ model.name }} details
            """
            return self._request('GET', f'/api/{{ app.name }}/{{ model.name|lower|plural }}/{id}/')

            def create_{{ model.name|lower }}(self, data: Dict[str, Any]) -> Dict[str, Any]:
            """
            Create a new {{ model.name }}.

            Args:
            data: {{ model.name }} data

            Returns:
            Created {{ model.name }}
            """
            return self._request('POST', '/api/{{ app.name }}/{{ model.name|lower|plural }}/', json=data)

            def update_{{ model.name|lower }}(self, id: int, data: Dict[str, Any]) -> Dict[str, Any]:
            """
            Update a {{ model.name }}.

            Args:
            id: {{ model.name }} ID
            data: Updated data

            Returns:
            Updated {{ model.name }}
            """
            return self._request('PUT', f'/api/{{ app.name }}/{{ model.name|lower|plural }}/{id}/', json=data)

            def partial_update_{{ model.name|lower }}(self, id: int, data: Dict[str, Any]) -> Dict[str, Any]:
            """
            Partially update a {{ model.name }}.

            Args:
            id: {{ model.name }} ID
            data: Fields to update

            Returns:
            Updated {{ model.name }}
            """
            return self._request('PATCH', f'/api/{{ app.name }}/{{ model.name|lower|plural }}/{id}/', json=data)

            def delete_{{ model.name|lower }}(self, id: int) -> None:
            """
            Delete a {{ model.name }}.

            Args:
            id: {{ model.name }} ID
            """
            self._request('DELETE', f'/api/{{ app.name }}/{{ model.name|lower|plural }}/{id}/')

            {% if model.api and model.api.custom_actions %}
                {% for action in model.api.custom_actions %}
                    def {{ model.name|lower }}_{{ action.name }}(self, {% if not action.is_list %}id: int, {% endif %}data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
                    """
                    {{ action.description or action.name|title }} for {{ model.name }}.

                    Args:
                    {% if not action.is_list %}id: {{ model.name }} ID
                    {% endif %}data: Optional request data

                    Returns:
                    Action response
                    """
                    endpoint = {% if action.is_list %}'/api/{{ app.name }}/{{ model.name|lower|plural }}/{{ action.url_name }}/'{% else %}f'/api/{{ app.name }}/{{ model.name|lower|plural }}/{id}/{{ action.url_name }}/'{% endif %}
                    return self._request('{{ action.method|upper }}', endpoint, json=data)

                {% endfor %}
            {% endif %}
        {% endfor %}
    {% endif %}
{% endfor %}

# Example usage
if __name__ == '__main__':
# Initialize client
client = {{ project.name|title }}APIClient('http://localhost:8000')

# Login
auth_response = client.login('admin', 'password')
print(f"Logged in: {auth_response}")

# Example: List items with pagination
items = client.list_items(page=1, page_size=10)
print(f"Items: {items}")

# Example: Create a new item
new_item = client.create_item({
'name': 'New Item',
'description': 'Created via API',
})
print(f"Created item: {new_item}")

# Example: Update an item
updated_item = client.update_item(new_item['id'], {
'name': 'Updated Item',
})
print(f"Updated item: {updated_item}")

# Example: Delete an item
client.delete_item(new_item['id'])
print("Item deleted")


# Async client using httpx
import httpx
import asyncio


class Async{{ project.name|title }}APIClient:
"""
Asynchronous Python client for {{ project.name }} API using httpx.

Example usage:
async with Async{{ project.name|title }}APIClient('http://localhost:8000') as client:
items = await client.list_items()
"""

def __init__(self, base_url: str, api_key: Optional[str] = None):
self.base_url = base_url.rstrip('/')
self.headers = {
'Content-Type': 'application/json',
'Accept': 'application/json',
}

if api_key:
self.headers['Authorization'] = f'Bearer {api_key}'

self.client = None

async def __aenter__(self):
self.client = httpx.AsyncClient(headers=self.headers)
return self

async def __aexit__(self, exc_type, exc_val, exc_tb):
await self.client.aclose()

async def _request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
"""Make an async HTTP request to the API."""
url = f"{self.base_url}{endpoint}"

response = await self.client.request(method, url, **kwargs)
response.raise_for_status()

return response.json() if response.content else {}

{% for app in apps %}
    {% if app.models %}
        {% for model in app.models %}
            async def list_{{ model.name|lower|plural }}(self, **params) -> Dict[str, Any]:
            """List all {{ model.name|plural }} asynchronously."""
            return await self._request('GET', '/api/{{ app.name }}/{{ model.name|lower|plural }}/', params=params)

            async def get_{{ model.name|lower }}(self, id: int) -> Dict[str, Any]:
            """Get a specific {{ model.name }} asynchronously."""
            return await self._request('GET', f'/api/{{ app.name }}/{{ model.name|lower|plural }}/{id}/')

            async def create_{{ model.name|lower }}(self, data: Dict[str, Any]) -> Dict[str, Any]:
            """Create a new {{ model.name }} asynchronously."""
            return await self._request('POST', '/api/{{ app.name }}/{{ model.name|lower|plural }}/', json=data)

        {% endfor %}
    {% endif %}
{% endfor %}

# Async example usage
async def main():
async with Async{{ project.name|title }}APIClient('http://localhost:8000') as client:
# List items
items = await client.list_items()
print(f"Items: {items}")

# Create multiple items concurrently
tasks = [
client.create_item({'name': f'Item {i}'})
for i in range(5)
]
results = await asyncio.gather(*tasks)
print(f"Created {len(results)} items")


if __name__ == '__main__':
asyncio.run(main())