"""
GraphQL client examples for {{ project.name }} API.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""

import requests
import json
from typing import Dict, Any, Optional, List
from gql import gql, Client
from gql.transport.requests import RequestsHTTPTransport


class {{ project.name|title }}GraphQLClient:
"""
GraphQL client for {{ project.name }} API.

Example usage:
client = {{ project.name|title }}GraphQLClient('http://localhost:8000/graphql/')

# Execute a query
result = client.query('''
query {
allItems {
edges {
node {
id
name
}
}
}
}
''')
"""

def __init__(self, endpoint: str, api_key: Optional[str] = None):
"""Initialize the GraphQL client."""
self.endpoint = endpoint

headers = {
'Content-Type': 'application/json',
'Accept': 'application/json',
}

if api_key:
headers['Authorization'] = f'Bearer {api_key}'

# Using gql library
transport = RequestsHTTPTransport(
url=endpoint,
headers=headers,
use_json=True,
)

self.client = Client(
transport=transport,
fetch_schema_from_transport=True,
)

def query(self, query: str, variables: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
"""Execute a GraphQL query."""
query_doc = gql(query)
return self.client.execute(query_doc, variable_values=variables)

def mutation(self, mutation: str, variables: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
"""Execute a GraphQL mutation."""
mutation_doc = gql(mutation)
return self.client.execute(mutation_doc, variable_values=variables)

# Authentication mutations
def login(self, username: str, password: str) -> Dict[str, Any]:
"""Login and get JWT token."""
mutation = '''
mutation TokenAuth($username: String!, $password: String!) {
tokenAuth(username: $username, password: $password) {
token
payload
refreshExpiresIn
}
}
'''

result = self.mutation(mutation, {
'username': username,
'password': password,
})

# Update authorization header with token
if result.get('tokenAuth', {}).get('token'):
token = result['tokenAuth']['token']
self.client.transport.headers['Authorization'] = f'Bearer {token}'

return result

{% for app in apps %}
    {% if app.models %}
        # {{ app.name|title }} Queries and Mutations

        {% for model in app.models %}
            def get_{{ model.name|lower }}(self, id: str) -> Dict[str, Any]:
            """Get a single {{ model.name }} by ID."""
            query = '''
            query Get{{ model.name }}($id: ID!) {
            {{ model.name|lower }}(id: $id) {
            id
            {% for field in model.fields %}
                {{ field.name|camelCase }}
            {% endfor %}
            createdAt
            updatedAt
            }
            }
            '''
            return self.query(query, {'id': id})

            def list_{{ model.name|lower|plural }}(self, first: int = 10, after: Optional[str] = None) -> Dict[str, Any]:
            """List {{ model.name|plural }} with pagination."""
            query = '''
            query List{{ model.name|plural }}($first: Int, $after: String) {
            all{{ model.name|plural }}(first: $first, after: $after) {
            pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
            }
            edges {
            cursor
            node {
            id
            {% for field in model.fields[:5] %}
                {{ field.name|camelCase }}
            {% endfor %}
            }
            }
            totalCount
            }
            }
            '''
            return self.query(query, {'first': first, 'after': after})

            def create_{{ model.name|lower }}(self, data: Dict[str, Any]) -> Dict[str, Any]:
            """Create a new {{ model.name }}."""
            mutation = '''
            mutation Create{{ model.name }}($input: {{ model.name }}Input!) {
            create{{ model.name }}(input: $input) {
            {{ model.name|lower }} {
            id
            {% for field in model.fields %}
                {{ field.name|camelCase }}
            {% endfor %}
            }
            success
            errors {
            field
            messages
            }
            }
            }
            '''
            return self.mutation(mutation, {'input': data})

            def update_{{ model.name|lower }}(self, id: str, data: Dict[str, Any]) -> Dict[str, Any]:
            """Update a {{ model.name }}."""
            mutation = '''
            mutation Update{{ model.name }}($id: ID!, $input: {{ model.name }}UpdateInput!) {
            update{{ model.name }}(id: $id, input: $input) {
            {{ model.name|lower }} {
            id
            {% for field in model.fields %}
                {{ field.name|camelCase }}
            {% endfor %}
            }
            success
            errors {
            field
            messages
            }
            }
            }
            '''
            return self.mutation(mutation, {'id': id, 'input': data})

            def delete_{{ model.name|lower }}(self, id: str) -> Dict[str, Any]:
            """Delete a {{ model.name }}."""
            mutation = '''
            mutation Delete{{ model.name }}($id: ID!) {
            delete{{ model.name }}(id: $id) {
            success
            message
            }
            }
            '''
            return self.mutation(mutation, {'id': id})

        {% endfor %}
    {% endif %}
{% endfor %}

# Example queries and mutations
EXAMPLE_QUERIES = {
'introspection': '''
query {
__schema {
types {
name
kind
description
}
}
}
''',

'search': '''
query Search($query: String!, $limit: Int) {
search(query: $query, limit: $limit) {
type
id
title
data
}
}
''',

'with_fragments': '''
fragment UserInfo on UserType {
id
username
email
firstName
lastName
}

query GetUserWithPosts($userId: ID!) {
user(id: $userId) {
...UserInfo
posts {
edges {
node {
id
title
content
publishedAt
}
}
}
}
}
''',
}

# Subscription example using websockets
import asyncio
from gql.transport.websockets import WebsocketsTransport


class {{ project.name|title }}GraphQLSubscriptionClient:
"""GraphQL subscription client using WebSockets."""

def __init__(self, ws_endpoint: str, api_key: Optional[str] = None):
self.ws_endpoint = ws_endpoint

headers = {}
if api_key:
headers['Authorization'] = f'Bearer {api_key}'

self.transport = WebsocketsTransport(
url=ws_endpoint,
headers=headers,
)

async def subscribe(self, subscription: str, variables: Optional[Dict[str, Any]] = None):
"""Subscribe to GraphQL subscription."""
async with Client(
transport=self.transport,
fetch_schema_from_transport=True,
) as session:
subscription_doc = gql(subscription)

async for result in session.subscribe(subscription_doc, variable_values=variables):
yield result


# Example subscription
async def example_subscription():
client = {{ project.name|title }}GraphQLSubscriptionClient('ws://localhost:8000/graphql/')

subscription = '''
subscription OnItemCreated {
itemCreated {
id
name
createdAt
}
}
'''

async for result in client.subscribe(subscription):
print(f"New item created: {result}")


# Example usage
if __name__ == '__main__':
# Initialize client
client = {{ project.name|title }}GraphQLClient('http://localhost:8000/graphql/')

# Login
auth_result = client.login('admin', 'password')
print(f"Logged in: {auth_result}")

# List items
items = client.list_items(first=10)
print(f"Items: {items}")

# Create item
new_item = client.create_item({
'name': 'GraphQL Test Item',
'description': 'Created via GraphQL',
})
print(f"Created: {new_item}")

# Complex query with variables
complex_query = '''
query ComplexQuery($filters: ItemFilter, $orderBy: String) {
allItems(filters: $filters, orderBy: $orderBy) {
edges {
node {
id
name
category {
id
name
}
tags {
edges {
node {
id
name
}
}
}
}
}
}
}
'''

result = client.query(complex_query, {
'filters': {'status': 'ACTIVE'},
'orderBy': '-createdAt',
})
print(f"Complex query result: {result}")

# Run subscription
# asyncio.run(example_subscription())