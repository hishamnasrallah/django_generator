"""
API module for {{ project.name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.

This module provides RESTful API endpoints for all applications.
"""

__version__ = '1.0.0'
__author__ = '{{ project.author|default("Django Enhanced Generator", true) }}'

# API Configuration
default_app_config = 'api.apps.ApiConfig'

# Import commonly used API components
from .permissions import (
    IsOwnerOrReadOnly,
    IsAuthenticatedOrReadOnly,
    IsStaffOrReadOnly,
)

from .pagination import (
    StandardResultsSetPagination,
    LargeResultsSetPagination,
)

from .exceptions import (
    APIException,
    ValidationError,
    PermissionDenied,
    NotFound,
)

from .throttling import (
    BurstRateThrottle,
    SustainedRateThrottle,
    AnonRateThrottle,
    UserRateThrottle,
)

__all__ = [
    # Permissions
    'IsOwnerOrReadOnly',
    'IsAuthenticatedOrReadOnly',
    'IsStaffOrReadOnly',

    # Pagination
    'StandardResultsSetPagination',
    'LargeResultsSetPagination',

    # Exceptions
    'APIException',
    'ValidationError',
    'PermissionDenied',
    'NotFound',

    # Throttling
    'BurstRateThrottle',
    'SustainedRateThrottle',
    'AnonRateThrottle',
    'UserRateThrottle',
]

# API Metadata
API_TITLE = '{{ project.name }} API'
API_DESCRIPTION = """
{{ project.description|default("RESTful API for " + project.name, true) }}

## Authentication

The API uses token-based authentication. Include your API token in the Authorization header:
Authorization: Bearer YOUR_API_TOKEN

## Rate Limiting

- Anonymous users: {{ project.api_settings.anon_rate_limit|default("100/hour", true) }}
- Authenticated users: {{ project.api_settings.user_rate_limit|default("1000/hour", true) }}
- Burst limit: {{ project.api_settings.burst_rate_limit|default("20/minute", true) }}

## Pagination

All list endpoints are paginated. Use the `page` and `page_size` query parameters:
GET /api/endpoint/?page=2&page_size=50

## Filtering and Ordering

Most endpoints support filtering and ordering:
GET /api/endpoint/?status=active&ordering=-created_at

## API Versioning

The API uses URL path versioning. Current version: v1
/api/v1/endpoint/
"""

# API Settings
API_SETTINGS = {
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1'],
    'VERSION_PARAM': 'version',

    # Authentication
    'DEFAULT_AUTHENTICATION_CLASSES': [
        {% if features.authentication.jwt %}
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        {% endif %}
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],

    # Permissions
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    # Pagination
    'DEFAULT_PAGINATION_CLASS': 'api.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': {{ project.api_settings.page_size|default(20, true) }},

    # Filtering
'DEFAULT_FILTER_BACKENDS': [
    'django_filters.rest_framework.DjangoFilterBackend',
    'rest_framework.filters.SearchFilter',
    'rest_framework.filters.OrderingFilter',
],

    # Throttling
'DEFAULT_THROTTLE_CLASSES': [
    'api.throttling.BurstRateThrottle',
    'api.throttling.SustainedRateThrottle',
],

'DEFAULT_THROTTLE_RATES': {
    'anon': '{{ project.api_settings.anon_rate_limit|default("100/hour", true) }}',
    'user': '{{ project.api_settings.user_rate_limit|default("1000/hour", true) }}',
    'burst': '{{ project.api_settings.burst_rate_limit|default("20/minute", true) }}',
    'sustained': '{{ project.api_settings.sustained_rate_limit|default("100/hour", true) }}',
},

# Renderers and Parsers
'DEFAULT_RENDERER_CLASSES': [
    'rest_framework.renderers.JSONRenderer',
    {% if project.api_settings.enable_browsable_api|default(true, true) %}
    'rest_framework.renderers.BrowsableAPIRenderer',
    {% endif %}
],

'DEFAULT_PARSER_CLASSES': [
    'rest_framework.parsers.JSONParser',
    'rest_framework.parsers.FormParser',
    'rest_framework.parsers.MultiPartParser',
],

# Schema
'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

# Datetime formatting
'DATETIME_FORMAT': '%Y-%m-%dT%H:%M:%S.%fZ',
'DATETIME_INPUT_FORMATS': [
    '%Y-%m-%dT%H:%M:%S.%fZ',
    '%Y-%m-%dT%H:%M:%SZ',
    '%Y-%m-%dT%H:%M:%S',
    'iso-8601',
],

# Other settings
'COERCE_DECIMAL_TO_STRING': False,
'COMPACT_JSON': False,
'STRICT_JSON': True,
'URL_FORMAT_OVERRIDE': 'format',
'FORMAT_SUFFIX_KWARG': 'format',
'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

# Spectacular Settings for OpenAPI Schema
SPECTACULAR_SETTINGS = {
    'TITLE': API_TITLE,
    'DESCRIPTION': API_DESCRIPTION,
    'VERSION': __version__,
    'SERVE_INCLUDE_SCHEMA': False,

    # Contact information
    {% if project.contact %}
    'CONTACT': {
        {% if project.contact.name %}'name': '{{ project.contact.name }}',{% endif %}
        {% if project.contact.email %}'email': '{{ project.contact.email }}',{% endif %}
        {% if project.contact.url %}'url': '{{ project.contact.url }}',{% endif %}
    },
    {% endif %}

    # License
    {% if project.license %}
    'LICENSE': {
        'name': '{{ project.license.name|default("MIT License", true) }}',
        {% if project.license.url %}'url': '{{ project.license.url }}',{% endif %}
    },
    {% endif %}

    # External documentation
    {% if project.external_docs %}
    'EXTERNAL_DOCS': {
        'description': '{{ project.external_docs.description|default("Find more info here", true) }}',
        'url': '{{ project.external_docs.url }}',
    },
    {% endif %}

    # Schema customization
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',
    'SCHEMA_MOUNT_PATH': '/api/schema/',
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    'SERVE_AUTHENTICATION': None,

    # Components
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,

    # Security
    'SECURITY': [
        {% if features.authentication.jwt %}
        {
            'Bearer': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
            }
        },
        {% endif %}
        {
            'Token': {
                'type': 'apiKey',
                'in': 'header',
                'name': 'Authorization',
                'description': 'Token-based authentication with required prefix "Token"'
            }
        },
    ],

    # Grouping
    'TAGS': [
        {% for app in apps %}
        {% if app.models %}
        {
            'name': '{{ app.name }}',
            'description': '{{ app.description|default(app.name + " operations", true) }}',
        },
        {% endif %}
        {% endfor %}
        {
            'name': 'auth',
            'description': 'Authentication operations',
        },
    ],

    # Preprocessing hooks
    'PREPROCESSING_HOOKS': [
        'api.schema.preprocessing_filter_spec',
    ],

    # Postprocessing hooks
    'POSTPROCESSING_HOOKS': [
        'drf_spectacular.hooks.postprocess_schema_enums',
    ],

    # Enum name overrides
    'ENUM_NAME_OVERRIDES': {
        {% for app in apps %}
        {% for model in app.models %}
        {% for field in model.fields %}
        {% if field.choices %}
        '{{ model.name }}{{ field.name|title }}Enum': '{{ app.name }}.models.{{ model.name }}.{{ field.name|upper }}_CHOICES',
        {% endif %}
        {% endfor %}
        {% endfor %}
        {% endfor %}
    },
}

# API URLs configuration
API_URL_PATTERNS = {
    'AUTH': 'auth/',
    {% for app in apps %}
    {% if app.models %}
    '{{ app.name|upper }}': '{{ app.name }}/',
    {% endif %}
    {% endfor %}
}

# CORS Settings (if enabled)
{% if features.api.cors %}
CORS_SETTINGS = {
    'CORS_ALLOWED_ORIGINS': [
        {% for origin in project.cors_origins|default(["http://localhost:3000", "http://localhost:8080"], true) %}
        '{{ origin }}',
        {% endfor %}
    ],
    'CORS_ALLOW_CREDENTIALS': True,
    'CORS_ALLOWED_METHODS': [
        'DELETE',
        'GET',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
    ],
    'CORS_ALLOWED_HEADERS': [
        'accept',
        'accept-encoding',
        'authorization',
        'content-type',
        'dnt',
        'origin',
        'user-agent',
        'x-csrftoken',
        'x-requested-with',
    ],
    'CORS_EXPOSE_HEADERS': [
        'content-length',
        'x-total-count',
        'x-page-count',
    ],
}
{% endif %}

# Initialize API on import
def initialize_api():
    """Initialize API configuration."""
    from django.conf import settings

    # Apply API settings to Django settings
    if not hasattr(settings, 'REST_FRAMEWORK'):
        settings.REST_FRAMEWORK = {}

    settings.REST_FRAMEWORK.update(API_SETTINGS)

    # Apply Spectacular settings
    if not hasattr(settings, 'SPECTACULAR_SETTINGS'):
        settings.SPECTACULAR_SETTINGS = {}

    settings.SPECTACULAR_SETTINGS.update(SPECTACULAR_SETTINGS)

    {% if features.api.cors %}
    # Apply CORS settings
    for key, value in CORS_SETTINGS.items():
        setattr(settings, key, value)
{% endif %}

# Auto-initialize when imported
try:
    from django.apps import apps
    if apps.ready:
        initialize_api()
except Exception:
    # Django not fully initialized yet
    pass