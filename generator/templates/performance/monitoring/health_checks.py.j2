"""
Health checks for {{ project.name }}.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.http import JsonResponse
from django.views import View
from django.db import connection
from django.core.cache import cache
from django.conf import settings
import time
import logging
{% if features.performance.celery %}
from celery import current_app as celery_app
{% endif %}
{% if features.performance.elasticsearch %}
from elasticsearch import Elasticsearch
{% endif %}

logger = logging.getLogger(__name__)


class HealthCheckView(View):
    """Comprehensive health check endpoint."""
    
    def get(self, request):
        """Perform health checks and return status."""
        health_status = {
            'status': 'healthy',
            'timestamp': time.time(),
            'checks': {},
            'version': getattr(settings, 'VERSION', '1.0.0'),
            'environment': getattr(settings, 'ENVIRONMENT', 'development'),
        }
        
        # Perform all health checks
        checks = [
            self.check_database,
            self.check_cache,
            {% if features.performance.celery %}self.check_celery,
            {% endif %}{% if features.performance.elasticsearch %}self.check_elasticsearch,
            {% endif %}self.check_disk_space,
            self.check_memory,
            self.check_models,
        ]
        
        for check in checks:
            try:
                check_name, is_healthy, details = check()
                health_status['checks'][check_name] = {
                    'status': 'healthy' if is_healthy else 'unhealthy',
                    'details': details,
                }
                
                if not is_healthy:
                    health_status['status'] = 'unhealthy'
                    
            except Exception as e:
                check_name = check.__name__.replace('check_', '')
                health_status['checks'][check_name] = {
                    'status': 'error',
                    'details': {'error': str(e)},
                }
                health_status['status'] = 'unhealthy'
                logger.error(f"Health check {check_name} failed: {e}")
        
        # Set HTTP status code based on health
        status_code = 200 if health_status['status'] == 'healthy' else 503
        
        return JsonResponse(health_status, status=status_code)
    
    def check_database(self):
        """Check database connectivity and performance."""
        start_time = time.time()
        
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                result = cursor.fetchone()
            
            duration = time.time() - start_time
            
            is_healthy = result[0] == 1 and duration < 1.0  # Should respond within 1 second
            
            details = {
                'response_time_ms': round(duration * 1000, 2),
                'connection_status': 'connected',
            }
            
            # Additional database checks
            try:
                with connection.cursor() as cursor:
                    cursor.execute("SELECT count(*) FROM django_migrations")
                    migration_count = cursor.fetchone()[0]
                    details['migrations_applied'] = migration_count
            except Exception:
                pass
            
            return 'database', is_healthy, details
            
        except Exception as e:
            return 'database', False, {'error': str(e)}
    
    def check_cache(self):
        """Check cache connectivity and performance."""
        start_time = time.time()
        test_key = 'health_check_test'
        test_value = 'test_value'
        
        try:
            # Test cache set
            cache.set(test_key, test_value, 10)
            
            # Test cache get
            cached_value = cache.get(test_key)
            
            # Clean up
            cache.delete(test_key)
            
            duration = time.time() - start_time
            is_healthy = cached_value == test_value and duration < 0.5
            
            details = {
                'response_time_ms': round(duration * 1000, 2),
                'set_get_success': cached_value == test_value,
            }
            
            return 'cache', is_healthy, details
            
        except Exception as e:
            return 'cache', False, {'error': str(e)}
    
    {% if features.performance.celery %}
    def check_celery(self):
        """Check Celery worker status."""
        try:
            # Check if workers are available
            inspect = celery_app.control.inspect()
            stats = inspect.stats()
            
            if not stats:
                return 'celery', False, {'error': 'No workers available'}
            
            worker_count = len(stats)
            active_tasks = inspect.active()
            
            details = {
                'worker_count': worker_count,
                'active_tasks': sum(len(tasks) for tasks in active_tasks.values()) if active_tasks else 0,
                'workers': list(stats.keys()),
            }
            
            is_healthy = worker_count > 0
            
            return 'celery', is_healthy, details
            
        except Exception as e:
            return 'celery', False, {'error': str(e)}
    {% endif %}
    
    {% if features.performance.elasticsearch %}
    def check_elasticsearch(self):
        """Check Elasticsearch connectivity."""
        try:
            es_config = getattr(settings, 'ELASTICSEARCH_DSL', {})
            hosts = es_config.get('default', {}).get('hosts', ['localhost:9200'])
            
            es = Elasticsearch(hosts=hosts)
            
            # Ping Elasticsearch
            if not es.ping():
                return 'elasticsearch', False, {'error': 'Elasticsearch not reachable'}
            
            # Get cluster health
            health = es.cluster.health()
            
            details = {
                'cluster_name': health['cluster_name'],
                'status': health['status'],
                'number_of_nodes': health['number_of_nodes'],
                'active_primary_shards': health['active_primary_shards'],
            }
            
            is_healthy = health['status'] in ['green', 'yellow']
            
            return 'elasticsearch', is_healthy, details
            
        except Exception as e:
            return 'elasticsearch', False, {'error': str(e)}
    {% endif %}
    
    def check_disk_space(self):
        """Check available disk space."""
        try:
            import shutil
            
            total, used, free = shutil.disk_usage('/')
            
            # Convert to GB
            total_gb = total / (1024**3)
            used_gb = used / (1024**3)
            free_gb = free / (1024**3)
            
            usage_percent = (used / total) * 100
            
            # Consider unhealthy if disk usage > 90%
            is_healthy = usage_percent < 90
            
            details = {
                'total_gb': round(total_gb, 2),
                'used_gb': round(used_gb, 2),
                'free_gb': round(free_gb, 2),
                'usage_percent': round(usage_percent, 2),
            }
            
            return 'disk_space', is_healthy, details
            
        except Exception as e:
            return 'disk_space', False, {'error': str(e)}
    
    def check_memory(self):
        """Check memory usage."""
        try:
            import psutil
            
            memory = psutil.virtual_memory()
            
            # Convert to GB
            total_gb = memory.total / (1024**3)
            available_gb = memory.available / (1024**3)
            used_gb = memory.used / (1024**3)
            
            # Consider unhealthy if memory usage > 90%
            is_healthy = memory.percent < 90
            
            details = {
                'total_gb': round(total_gb, 2),
                'used_gb': round(used_gb, 2),
                'available_gb': round(available_gb, 2),
                'usage_percent': round(memory.percent, 2),
            }
            
            return 'memory', is_healthy, details
            
        except Exception as e:
            return 'memory', False, {'error': str(e)}
    
    def check_models(self):
        """Check model integrity and basic operations."""
        try:
            from django.apps import apps
            
            model_checks = {}
            all_healthy = True
            
            # Check each app's models
            {% for app in apps %}
            try:
                {% for model in app.models %}
                from apps.{{ app.name }}.models import {{ model.name }}
                
                # Test basic query
                count = {{ model.name }}.objects.count()
                model_checks['{{ app.name }}.{{ model.name }}'] = {
                    'count': count,
                    'status': 'healthy'
                }
                {% endfor %}
                
            except Exception as e:
                model_checks['{{ app.name }}'] = {
                    'status': 'error',
                    'error': str(e)
                }
                all_healthy = False
            {% endfor %}
            
            details = {
                'models': model_checks,
                'total_models_checked': len(model_checks),
            }
            
            return 'models', all_healthy, details
            
        except Exception as e:
            return 'models', False, {'error': str(e)}


class ReadinessView(View):
    """Readiness check for Kubernetes."""
    
    def get(self, request):
        """Check if application is ready to serve traffic."""
        checks = {
            'database': self._check_database_ready(),
            'migrations': self._check_migrations_ready(),
        }
        
        all_ready = all(checks.values())
        
        response_data = {
            'ready': all_ready,
            'checks': checks,
        }
        
        status_code = 200 if all_ready else 503
        return JsonResponse(response_data, status=status_code)
    
    def _check_database_ready(self):
        """Check if database is ready."""
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            return True
        except Exception:
            return False
    
    def _check_migrations_ready(self):
        """Check if all migrations are applied."""
        try:
            from django.db.migrations.executor import MigrationExecutor
            
            executor = MigrationExecutor(connection)
            plan = executor.migration_plan(executor.loader.graph.leaf_nodes())
            
            # If plan is empty, all migrations are applied
            return len(plan) == 0
            
        except Exception:
            return False


class LivenessView(View):
    """Liveness check for Kubernetes."""
    
    def get(self, request):
        """Check if application is alive."""
        # Simple check - if we can respond, we're alive
        return JsonResponse({
            'alive': True,
            'timestamp': time.time(),
        })


# Utility functions
def is_healthy():
    """Quick health check function."""
    try:
        # Basic database check
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
        
        # Basic cache check
        cache.set('health_test', 'ok', 1)
        cache.get('health_test')
        
        return True
        
    except Exception:
        return False


def get_health_status():
    """Get detailed health status."""
    health_view = HealthCheckView()
    
    # Simulate a request
    class MockRequest:
        pass
    
    response = health_view.get(MockRequest())
    return response.content