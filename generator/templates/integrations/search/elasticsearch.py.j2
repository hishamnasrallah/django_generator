"""
Elasticsearch integration for {{ project.name }}.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Document, Search, Q
from django.conf import settings
from django.core.cache import cache
from typing import Dict, Any, List, Optional
import logging

logger = logging.getLogger(__name__)


class ElasticsearchService:
    """Service for Elasticsearch operations."""
    
    def __init__(self):
        self.client = Elasticsearch(
            hosts=getattr(settings, 'ELASTICSEARCH_DSL', {}).get('default', {}).get('hosts', ['localhost:9200'])
        )
    
    def search(self, index: str, query: Dict[str, Any], **kwargs) -> Dict[str, Any]:
        """
        Perform search query.
        
        Args:
            index: Elasticsearch index name
            query: Search query
            **kwargs: Additional search parameters
            
        Returns:
            Dict containing search results
        """
        try:
            response = self.client.search(
                index=index,
                body=query,
                **kwargs
            )
            
            return {
                'hits': response['hits']['hits'],
                'total': response['hits']['total']['value'],
                'took': response['took'],
                'aggregations': response.get('aggregations', {}),
            }
            
        except Exception as e:
            logger.error(f"Elasticsearch search failed: {e}")
            return {
                'hits': [],
                'total': 0,
                'took': 0,
                'aggregations': {},
                'error': str(e),
            }
    
    def multi_search(self, queries: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Perform multiple search queries.
        
        Args:
            queries: List of search queries with index information
            
        Returns:
            List of search results
        """
        try:
            body = []
            for query_info in queries:
                body.append({'index': query_info['index']})
                body.append(query_info['query'])
            
            response = self.client.msearch(body=body)
            
            results = []
            for resp in response['responses']:
                if 'error' in resp:
                    results.append({
                        'hits': [],
                        'total': 0,
                        'error': resp['error'],
                    })
                else:
                    results.append({
                        'hits': resp['hits']['hits'],
                        'total': resp['hits']['total']['value'],
                        'took': resp['took'],
                        'aggregations': resp.get('aggregations', {}),
                    })
            
            return results
            
        except Exception as e:
            logger.error(f"Elasticsearch multi-search failed: {e}")
            return [{'hits': [], 'total': 0, 'error': str(e)} for _ in queries]
    
    def suggest(self, index: str, text: str, field: str = 'suggest') -> List[str]:
        """
        Get search suggestions.
        
        Args:
            index: Elasticsearch index name
            text: Text to get suggestions for
            field: Field to search suggestions in
            
        Returns:
            List of suggestions
        """
        try:
            query = {
                'suggest': {
                    'text': text,
                    'simple_phrase': {
                        'phrase': {
                            'field': field,
                            'size': 5,
                            'gram_size': 3,
                            'direct_generator': [{
                                'field': field,
                                'suggest_mode': 'always',
                            }],
                        }
                    }
                }
            }
            
            response = self.client.search(index=index, body=query)
            
            suggestions = []
            for suggestion in response['suggest']['simple_phrase']:
                for option in suggestion['options']:
                    suggestions.append(option['text'])
            
            return suggestions
            
        except Exception as e:
            logger.error(f"Elasticsearch suggest failed: {e}")
            return []
    
    def aggregate(self, index: str, aggregations: Dict[str, Any], query: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        Perform aggregation query.
        
        Args:
            index: Elasticsearch index name
            aggregations: Aggregation definitions
            query: Optional filter query
            
        Returns:
            Aggregation results
        """
        try:
            body = {
                'size': 0,
                'aggs': aggregations,
            }
            
            if query:
                body['query'] = query
            
            response = self.client.search(index=index, body=body)
            
            return response.get('aggregations', {})
            
        except Exception as e:
            logger.error(f"Elasticsearch aggregation failed: {e}")
            return {}


class SearchQueryBuilder:
    """Builder for Elasticsearch queries."""
    
    def __init__(self):
        self.query = {'bool': {'must': [], 'filter': [], 'should': [], 'must_not': []}}
        self.sort = []
        self.size = 20
        self.from_offset = 0
        self.highlight = {}
        self.aggregations = {}
    
    def text_search(self, text: str, fields: List[str], boost: Optional[Dict[str, float]] = None) -> 'SearchQueryBuilder':
        """Add text search query."""
        if boost:
            boosted_fields = [f"{field}^{boost.get(field, 1.0)}" for field in fields]
        else:
            boosted_fields = fields
        
        self.query['bool']['must'].append({
            'multi_match': {
                'query': text,
                'fields': boosted_fields,
                'type': 'best_fields',
                'fuzziness': 'AUTO',
            }
        })
        
        return self
    
    def filter_term(self, field: str, value: Any) -> 'SearchQueryBuilder':
        """Add term filter."""
        self.query['bool']['filter'].append({
            'term': {field: value}
        })
        
        return self
    
    def filter_terms(self, field: str, values: List[Any]) -> 'SearchQueryBuilder':
        """Add terms filter."""
        self.query['bool']['filter'].append({
            'terms': {field: values}
        })
        
        return self
    
    def filter_range(self, field: str, gte: Optional[Any] = None, lte: Optional[Any] = None) -> 'SearchQueryBuilder':
        """Add range filter."""
        range_filter = {}
        if gte is not None:
            range_filter['gte'] = gte
        if lte is not None:
            range_filter['lte'] = lte
        
        self.query['bool']['filter'].append({
            'range': {field: range_filter}
        })
        
        return self
    
    def filter_exists(self, field: str) -> 'SearchQueryBuilder':
        """Add exists filter."""
        self.query['bool']['filter'].append({
            'exists': {'field': field}
        })
        
        return self
    
    def should_match(self, queries: List[Dict[str, Any]]) -> 'SearchQueryBuilder':
        """Add should queries."""
        self.query['bool']['should'].extend(queries)
        
        return self
    
    def must_not_match(self, queries: List[Dict[str, Any]]) -> 'SearchQueryBuilder':
        """Add must not queries."""
        self.query['bool']['must_not'].extend(queries)
        
        return self
    
    def add_sort(self, field: str, order: str = 'asc') -> 'SearchQueryBuilder':
        """Add sort criteria."""
        self.sort.append({field: {'order': order}})
        
        return self
    
    def add_highlight(self, fields: List[str], fragment_size: int = 150) -> 'SearchQueryBuilder':
        """Add highlighting."""
        self.highlight = {
            'fields': {field: {'fragment_size': fragment_size} for field in fields},
            'pre_tags': ['<mark>'],
            'post_tags': ['</mark>'],
        }
        
        return self
    
    def add_aggregation(self, name: str, agg_type: str, field: str, **kwargs) -> 'SearchQueryBuilder':
        """Add aggregation."""
        self.aggregations[name] = {
            agg_type: {
                'field': field,
                **kwargs
            }
        }
        
        return self
    
    def paginate(self, page: int = 1, page_size: int = 20) -> 'SearchQueryBuilder':
        """Add pagination."""
        self.size = page_size
        self.from_offset = (page - 1) * page_size
        
        return self
    
    def build(self) -> Dict[str, Any]:
        """Build the final query."""
        query = {
            'query': self.query,
            'size': self.size,
            'from': self.from_offset,
        }
        
        if self.sort:
            query['sort'] = self.sort
        
        if self.highlight:
            query['highlight'] = self.highlight
        
        if self.aggregations:
            query['aggs'] = self.aggregations
        
        return query


# Cached search service
class CachedSearchService(ElasticsearchService):
    """Elasticsearch service with caching."""
    
    def __init__(self, cache_timeout: int = 300):
        super().__init__()
        self.cache_timeout = cache_timeout
    
    def search(self, index: str, query: Dict[str, Any], use_cache: bool = True, **kwargs) -> Dict[str, Any]:
        """Search with caching."""
        if not use_cache:
            return super().search(index, query, **kwargs)
        
        # Create cache key
        cache_key = f"es_search:{index}:{hash(str(query))}"
        
        # Try to get from cache
        result = cache.get(cache_key)
        if result is not None:
            return result
        
        # Perform search
        result = super().search(index, query, **kwargs)
        
        # Cache result if successful
        if 'error' not in result:
            cache.set(cache_key, result, self.cache_timeout)
        
        return result


# Global service instances
elasticsearch_service = ElasticsearchService()
cached_search_service = CachedSearchService()