openapi: 3.0.3
info:
  title: {{ project_title }} API
  description: |
    {{ project.description | default('API documentation for ' + project_title) }}

    ## Authentication

    {% if features.authentication.jwt %}
    This API uses JWT Bearer token authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-token>
    ```
    {% endif %}

    ## Rate Limiting

    API requests are rate limited:
    - Anonymous users: 100 requests/hour
    - Authenticated users: 1000 requests/hour

  version: {{ project.version | default('1.0.0') }}
  contact:
    name: API Support
    email: api@{{ project_name }}.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://staging-api.{{ project_name }}.com
    description: Staging server
  - url: https://api.{{ project_name }}.com
    description: Production server

tags:
{% for app in apps %}
  - name: {{ app.name }}
    description: {{ app.description | default(app.name + ' operations') }}
{% endfor %}
  - name: auth
    description: Authentication operations

paths:
{% if features.authentication.jwt %}
  /auth/token/:
    post:
      tags:
        - auth
      summary: Obtain token
      description: Obtain access and refresh tokens
      operationId: obtainToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: secretpassword
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: Access token
                  refresh:
                    type: string
                    description: Refresh token
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/token/refresh/:
    post:
      tags:
        - auth
      summary: Refresh token
      description: Obtain new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh
              properties:
                refresh:
                  type: string
                  description: Refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: New access token
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
{% endif %}

{% for app in apps %}
{% for model in app.models %}
  /{{ app.name }}/{{ model.name | lower }}/:
    get:
      tags:
        - {{ app.name }}
      summary: List {{ model.name | plural }}
      description: Retrieve a paginated list of {{ model.name | plural | lower }}
      operationId: list{{ model.name | plural }}
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Ordering'
      {% if features.authentication.jwt %}
      security:
        - bearerAuth: []
      {% endif %}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of items
                  next:
                    type: string
                    nullable: true
                    description: URL to next page
                  previous:
                    type: string
                    nullable: true
                    description: URL to previous page
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/{{ model.name }}'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    post:
      tags:
        - {{ app.name }}
      summary: Create {{ model.name }}
      description: Create a new {{ model.name | lower }}
      operationId: create{{ model.name }}
      {% if features.authentication.jwt %}
      security:
        - bearerAuth: []
      {% endif %}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{ model.name }}Create'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{ model.name }}'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /{{ app.name }}/{{ model.name | lower }}/{id}/:
    get:
      tags:
        - {{ app.name }}
      summary: Retrieve {{ model.name }}
      description: Retrieve a single {{ model.name | lower }} by ID
      operationId: retrieve{{ model.name }}
      parameters:
        - $ref: '#/components/parameters/Id'
      {% if features.authentication.jwt %}
      security:
        - bearerAuth: []
      {% endif %}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{ model.name }}'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    put:
      tags:
        - {{ app.name }}
      summary: Update {{ model.name }}
      description: Update an existing {{ model.name | lower }}
      operationId: update{{ model.name }}
      parameters:
        - $ref: '#/components/parameters/Id'
      {% if features.authentication.jwt %}
      security:
        - bearerAuth: []
      {% endif %}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{ model.name }}Update'
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{ model.name }}'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    patch:
      tags:
        - {{ app.name }}
      summary: Partial update {{ model.name }}
      description: Partially update an existing {{ model.name | lower }}
      operationId: partialUpdate{{ model.name }}
      parameters:
        - $ref: '#/components/parameters/Id'
      {% if features.authentication.jwt %}
      security:
        - bearerAuth: []
      {% endif %}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{ model.name }}Patch'
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{ model.name }}'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    delete:
      tags:
        - {{ app.name }}
      summary: Delete {{ model.name }}
      description: Delete an existing {{ model.name | lower }}
      operationId: delete{{ model.name }}
      parameters:
        - $ref: '#/components/parameters/Id'
      {% if features.authentication.jwt %}
      security:
        - bearerAuth: []
      {% endif %}
      responses:
        '204':
          description: Deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

{% endfor %}
{% endfor %}

components:
  {% if features.authentication.jwt %}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token
  {% endif %}

  parameters:
    Id:
      name: id
      in: path
      required: true
      description: Unique identifier
      schema:
        type: integer
        format: int64

    Page:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1

    PageSize:
      name: page_size
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    Search:
      name: search
      in: query
      description: Search term
      schema:
        type: string

    Ordering:
      name: ordering
      in: query
      description: Field to order by (prefix with - for descending)
      schema:
        type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per hour
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when the rate limit resets (Unix timestamp)

  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Error code
              example: VALIDATION_ERROR
            message:
              type: string
              description: Human-readable error message
              example: Validation failed
            details:
              type: object
              description: Additional error details
              additionalProperties:
                type: array
                items:
                  type: string

{% for app in apps %}
{% for model in app.models %}
    {{ model.name }}:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        {% for field in model.fields %}
        {{ field.name }}:
          {% if field.type == 'CharField' %}
      type: string
          {% if field.max_length %}
      maxLength: {{ field.max_length }}
          {% endif %}
          {% elif field.type == 'TextField' %}
      type: string
          {% elif field.type == 'IntegerField' %}
      type: integer
          {% elif field.type == 'BooleanField' %}
      type: boolean
          {% elif field.type == 'DateTimeField' %}
      type: string
      format: date-time
          {% elif field.type == 'DateField' %}
      type: string
      format: date
          {% elif field.type == 'DecimalField' %}
      type: number
      format: double
          {% elif field.type == 'EmailField' %}
      type: string
      format: email
          {% elif field.type == 'URLField' %}
      type: string
      format: uri
          {% elif field.type == 'UUIDField' %}
      type: string
      format: uuid
          {% elif field.type == 'JSONField' %}
      type: object
          {% else %}
      type: string
          {% endif %}
          {% if field.help_text %}
      description: {{ field.help_text }}
          {% endif %}
          {% if field.blank %}
      nullable: true
          {% endif %}
        {% endfor %}
      created_at:
        type: string
        format: date-time
        readOnly: true
      updated_at:
        type: string
        format: date-time
        readOnly: true

    {{ model.name }}Create:
      type: object
      required:
        {% for field in model.fields %}
        {% if not field.blank and field.type not in ['DateTimeField', 'DateField'] %}
        - {{ field.name }}
        {% endif %}
        {% endfor %}
      properties:
        {% for field in model.fields %}
        {% if field.type not in ['DateTimeField', 'DateField'] or not field.auto_now and not field.auto_now_add %}
        {{ field.name }}:
          {% if field.type == 'CharField' %}
        type: string
          {% if field.max_length %}
        maxLength: {{ field.max_length }}
          {% endif %}
          {% elif field.type == 'TextField' %}
        type: string
          {% elif field.type == 'IntegerField' %}
        type: integer
          {% elif field.type == 'BooleanField' %}
        type: boolean
          {% elif field.type == 'DateTimeField' %}
        type: string
        format: date-time
          {% elif field.type == 'DateField' %}
        type: string
        format: date
          {% elif field.type == 'DecimalField' %}
        type: number
        format: double
          {% elif field.type == 'EmailField' %}
        type: string
        format: email
          {% elif field.type == 'URLField' %}
        type: string
        format: uri
          {% elif field.type == 'UUIDField' %}
        type: string
        format: uuid
          {% elif field.type == 'JSONField' %}
        type: object
          {% else %}
        type: string
          {% endif %}
          {% if field.help_text %}
        description: {{ field.help_text }}
          {% endif %}
        {% endif %}
        {% endfor %}

    {{ model.name }}Update:
      allOf:
        - $ref: '#/components/schemas/{{ model.name }}Create'

    {{ model.name }}Patch:
      type: object
      properties:
        {% for field in model.fields %}
        {% if field.type not in ['DateTimeField', 'DateField'] or not field.auto_now and not field.auto_now_add %}
        {{ field.name }}:
          {% if field.type == 'CharField' %}
        type: string
          {% if field.max_length %}
        maxLength: {{ field.max_length }}
          {% endif %}
          {% elif field.type == 'TextField' %}
        type: string
          {% elif field.type == 'IntegerField' %}
        type: integer
          {% elif field.type == 'BooleanField' %}
        type: boolean
          {% elif field.type == 'DateTimeField' %}
        type: string
        format: date-time
          {% elif field.type == 'DateField' %}
        type: string
        format: date
          {% elif field.type == 'DecimalField' %}
        type: number
        format: double
          {% elif field.type == 'EmailField' %}
        type: string
        format: email
          {% elif field.type == 'URLField' %}
        type: string
        format: uri
          {% elif field.type == 'UUIDField' %}
        type: string
        format: uuid
          {% elif field.type == 'JSONField' %}
        type: object
          {% else %}
        type: string
          {% endif %}
          {% if field.help_text %}
        description: {{ field.help_text }}
          {% endif %}
        {% endif %}
        {% endfor %}

{% endfor %}
{% endfor %}