# Makefile for {{ project_title }}
# Generated by Django Enhanced Generator

.PHONY: help install install-dev test test-coverage lint format clean migrate runserver shell collectstatic

# Default target
help:
	@echo "Available commands:"
	@echo "  install          Install production dependencies"
	@echo "  install-dev      Install development dependencies"
	@echo "  test             Run tests"
	@echo "  test-coverage    Run tests with coverage"
	@echo "  lint             Run linting"
	@echo "  format           Format code"
	@echo "  clean            Clean up temporary files"
	@echo "  migrate          Run database migrations"
	@echo "  runserver        Start development server"
	@echo "  shell            Start Django shell"
	@echo "  collectstatic    Collect static files"
	@echo "  docker-build     Build Docker image"
	@echo "  docker-up        Start Docker containers"
	@echo "  docker-down      Stop Docker containers"

# Python and Django settings
PYTHON := python{{ python_version }}
PIP := $(PYTHON) -m pip
MANAGE := $(PYTHON) manage.py

# Installation
install:
	$(PIP) install -r requirements/production.txt

install-dev:
	$(PIP) install -r requirements/development.txt
	pre-commit install

# Testing
test:
	$(MANAGE) test --settings={{ project_name }}.settings.testing

test-coverage:
	coverage run --source='.' $(MANAGE) test --settings={{ project_name }}.settings.testing
	coverage report
	coverage html

# Code quality
lint:
	flake8 .
	pylint {{ project_name }}/ apps/
	mypy {{ project_name }}/ apps/

format:
	black .
	isort .

# Cleanup
clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .coverage htmlcov/ .pytest_cache/

# Django commands
migrate:
	$(MANAGE) migrate

makemigrations:
	$(MANAGE) makemigrations

runserver:
	$(MANAGE) runserver

shell:
	$(MANAGE) shell

collectstatic:
	$(MANAGE) collectstatic --noinput

createsuperuser:
	$(MANAGE) createsuperuser

# Database
reset-db:
	$(MANAGE) reset_db --noinput
	$(MANAGE) migrate
	$(MANAGE) loaddata fixtures/*.json

backup-db:
	./scripts/backup_db.sh

restore-db:
	./scripts/restore_db.sh

{% if features.deployment.docker %}
# Docker commands
docker-build:
	docker build -t {{ project_name }}:latest .

docker-up:
	docker-compose up -d

docker-down:
	docker-compose down

docker-logs:
	docker-compose logs -f

docker-shell:
	docker-compose exec web $(MANAGE) shell

docker-test:
	docker-compose exec web make test
{% endif %}

{% if features.performance.celery %}
# Celery commands
celery-worker:
	celery -A {{ project_name }} worker -l info

celery-beat:
	celery -A {{ project_name }} beat -l info

celery-flower:
	celery -A {{ project_name }} flower

celery-purge:
	celery -A {{ project_name }} purge
{% endif %}

# Development setup
setup-dev: install-dev migrate
	$(MANAGE) loaddata fixtures/dev_data.json
	$(MANAGE) collectstatic --noinput

# Production setup
setup-prod: install migrate collectstatic
	$(MANAGE) check --deploy

# Security
security-check:
	safety check
	bandit -r {{ project_name }}/ apps/

# Performance
profile:
	$(MANAGE) runprofileserver

# Deployment
deploy-staging:
	./scripts/deploy.sh staging

deploy-production:
	./scripts/deploy.sh production

# Documentation
docs:
	cd docs && make html

docs-serve:
	cd docs/_build/html && $(PYTHON) -m http.server 8080

# API documentation
api-docs:
	$(MANAGE) spectacular --file schema.yml
	redoc-cli build schema.yml --output api-docs.html

# Monitoring
health-check:
	curl -f http://localhost:8000/health/ || exit 1

# Utilities
check-migrations:
	$(MANAGE) makemigrations --check --dry-run

check-security:
	$(MANAGE) check --deploy

update-deps:
	pip-compile requirements/base.in
	pip-compile requirements/development.in
	pip-compile requirements/production.in
	pip-compile requirements/testing.in

# Git hooks
pre-commit:
	pre-commit run --all-files

# Environment
env-example:
	cp .env.example .env
	@echo "Please edit .env with your configuration"