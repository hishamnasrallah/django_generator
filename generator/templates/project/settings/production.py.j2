"""
Production settings for {{ project_name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""

from .base import *

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Hosts/domain names that are valid for this site
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])

# Database connection pooling
DATABASES['default']['CONN_MAX_AGE'] = env.int('CONN_MAX_AGE', default=60)

# Security settings
SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=True)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_HSTS_SECONDS = env.int('SECURE_HSTS_SECONDS', default=31536000)
SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=True)
SECURE_HSTS_PRELOAD = env.bool('SECURE_HSTS_PRELOAD', default=True)
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Session security
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'

# CSRF security
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Strict'
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])

# Static files storage
{% if features.integrations and features.integrations.storage == 's3' %}
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# AWS settings
AWS_S3_SECURE_URLS = True
AWS_QUERYSTRING_AUTH = False
AWS_S3_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_S3_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
{% else %}
STATIC_ROOT = env('STATIC_ROOT', default=str(BASE_DIR / 'staticfiles'))
MEDIA_ROOT = env('MEDIA_ROOT', default=str(BASE_DIR / 'media'))
{% endif %}

# Email configuration
EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
SERVER_EMAIL = env('SERVER_EMAIL', default=DEFAULT_FROM_EMAIL)

# Cache configuration
{% if features.performance.caching %}
CACHES = {
    'default': {
        {% if features.performance.caching.backend == 'redis' %}
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': env('REDIS_URL'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PARSER_CLASS': 'redis.connection.HiredisParser',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 50,
                'retry_on_timeout': True,
            },
            'PICKLE_VERSION': -1,
        },
        {% elif features.performance.caching.backend == 'memcached' %}
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': env('MEMCACHED_URL'),
        {% endif %}
        'KEY_PREFIX': '{{ project_name }}_prod',
        'TIMEOUT': 300,
    }
}

# Session cache
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
{% endif %}

# Logging configuration
LOGGING['handlers']['file']['filename'] = '/var/log/{{ project_name }}/app.log'
LOGGING['handlers']['error_file']['filename'] = '/var/log/{{ project_name }}/error.log'

# Remove console handler in production
for logger in LOGGING['loggers'].values():
    logger['handlers'] = [h for h in logger.get('handlers', []) if h != 'console']

# Performance optimizations
CONN_MAX_AGE = 60

# Template caching
TEMPLATES[0]['OPTIONS']['loaders'] = [
    ('django.template.loaders.cached.Loader', [
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
    ]),
]

# Compression
MIDDLEWARE.insert(1, 'django.middleware.gzip.GZipMiddleware')
MIDDLEWARE.append('htmlmin.middleware.HtmlMinifyMiddleware')
MIDDLEWARE.append('htmlmin.middleware.MarkRequestMiddleware')

# HTML minification
HTML_MINIFY = True
EXCLUDE_FROM_MINIFYING = ('^admin/', '^debug_toolbar/')

# REST Framework production settings
{% if features.api.rest_framework %}
REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = [
    'rest_framework.renderers.JSONRenderer',
]
{% endif %}

# Celery production settings
{% if features.performance.celery %}
CELERY_TASK_ALWAYS_EAGER = False
CELERY_SEND_TASK_ERROR_EMAILS = True
{% endif %}

# Error tracking
ADMINS = [
    (admin.split('@')[0], admin) for admin in env.list('ADMINS', default=[])
]
MANAGERS = ADMINS

# Health check
HEALTH_CHECK['DISK_USAGE_MAX'] = 90
HEALTH_CHECK['MEMORY_MIN'] = 100