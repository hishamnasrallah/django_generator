"""
Logging configuration for {{ project_name }} project.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""

import os

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_production': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'json'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.environ.get('LOG_DIR', '/tmp'), '{{ project_name }}.log'),
            'maxBytes': 1024 * 1024 * 100,  # 100 MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.environ.get('LOG_DIR', '/tmp'), '{{ project_name }}_error.log'),
            'maxBytes': 1024 * 1024 * 100,  # 100 MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
        {% if features.deployment.monitoring and features.integrations.sentry %}
        'sentry': {
            'level': 'ERROR',
            'class': 'sentry_sdk.integrations.logging.EventHandler',
        },
        {% endif %}
    },
    'root': {
        'handlers': ['console', 'console_production', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'console_production', 'file'],
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['error_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG' if os.environ.get('SQL_DEBUG', 'False') == 'True' else 'INFO',
            'propagate': False,
        },
        '{{ project_name }}': {
            'handlers': ['console', 'console_production', 'file'],
            'level': os.environ.get('APP_LOG_LEVEL', 'DEBUG'),
            'propagate': False,
        },
        {% for app in apps %}
        'apps.{{ app.name }}': {
            'handlers': ['console', 'console_production', 'file'],
            'level': os.environ.get('APP_LOG_LEVEL', 'DEBUG'),
            'propagate': False,
        },
        {% endfor %}
        {% if features.performance.celery %}
        'celery': {
            'handlers': ['console', 'console_production', 'file'],
            'level': os.environ.get('CELERY_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        {% endif %}
        {% if features.api.rest_framework %}
        'rest_framework': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if os.environ.get('API_DEBUG', 'False') == 'True' else 'INFO',
            'propagate': False,
        },
        {% endif %}
    },
}