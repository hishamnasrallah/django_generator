"""
Custom form widgets for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django import forms
from django.forms import widgets
from django.template import loader
from django.utils.safestring import mark_safe
from django.utils.html import format_html
import json


class DatePickerWidget(forms.DateInput):
    """Date picker widget with calendar."""

    template_name = 'widgets/datepicker.html'

    def __init__(self, attrs=None, format=None):
        default_attrs = {'class': 'form-control datepicker', 'type': 'date'}
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs, format=format)

    class Media:
        css = {
            'all': ('css/datepicker.css',)
        }
        js = ('js/datepicker.js',)


class DateTimePickerWidget(forms.DateTimeInput):
    """DateTime picker widget."""

    template_name = 'widgets/datetimepicker.html'

    def __init__(self, attrs=None, format=None):
        default_attrs = {'class': 'form-control datetimepicker', 'type': 'datetime-local'}
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs, format=format)


class ColorPickerWidget(forms.TextInput):
    """Color picker widget."""

    template_name = 'widgets/colorpicker.html'

    def __init__(self, attrs=None):
        default_attrs = {'class': 'form-control colorpicker', 'type': 'color'}
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)


class RangeWidget(forms.NumberInput):
    """Range slider widget."""

    template_name = 'widgets/range.html'

    def __init__(self, attrs=None, min_value=0, max_value=100, step=1):
        default_attrs = {
            'class': 'form-range',
            'type': 'range',
            'min': min_value,
            'max': max_value,
            'step': step,
        }
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)


class Select2Widget(forms.Select):
    """Select2 enhanced select widget."""

    template_name = 'widgets/select2.html'

    def __init__(self, attrs=None, choices=(), data_url=None):
        default_attrs = {'class': 'form-control select2'}
        if data_url:
            default_attrs['data-ajax-url'] = data_url
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs, choices=choices)

    class Media:
        css = {
            'all': (
                'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css',
                'css/select2-bootstrap5.css',
            )
        }
        js = (
            'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js',
            'js/select2-init.js',
        )


class Select2MultipleWidget(forms.SelectMultiple):
    """Select2 multiple select widget."""

    template_name = 'widgets/select2multiple.html'

    def __init__(self, attrs=None, choices=(), data_url=None):
        default_attrs = {'class': 'form-control select2-multiple'}
        if data_url:
            default_attrs['data-ajax-url'] = data_url
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs, choices=choices)

    class Media:
        css = {
            'all': (
                'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css',
                'css/select2-bootstrap5.css',
            )
        }
        js = (
            'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js',
            'js/select2-init.js',
        )


class TagsWidget(forms.TextInput):
    """Tags input widget."""

    template_name = 'widgets/tags.html'

    def __init__(self, attrs=None, tag_separators=None):
        default_attrs = {'class': 'form-control tags-input'}
        if tag_separators:
            default_attrs['data-tag-separators'] = json.dumps(tag_separators)
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)

    class Media:
        css = {
            'all': ('css/tags-input.css',)
        }
        js = ('js/tags-input.js',)


class JSONEditorWidget(forms.Textarea):
    """JSON editor widget with syntax highlighting."""

    template_name = 'widgets/jsoneditor.html'

    def __init__(self, attrs=None, mode='code', modes=None):
        default_attrs = {
            'class': 'form-control json-editor',
            'data-mode': mode,
        }
        if modes:
            default_attrs['data-modes'] = json.dumps(modes)
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)

    class Media:
        css = {
            'all': (
                'https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/9.5.6/jsoneditor.min.css',
            )
        }
        js = (
            'https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/9.5.6/jsoneditor.min.js',
            'js/jsoneditor-init.js',
        )


class RichTextWidget(forms.Textarea):
    """Rich text editor widget."""

    template_name = 'widgets/richtext.html'

    def __init__(self, attrs=None, config=None):
        default_attrs = {'class': 'form-control rich-text-editor'}
        if config:
            default_attrs['data-config'] = json.dumps(config)
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)

    class Media:
        css = {
            'all': (
                'https://cdn.quilljs.com/1.3.6/quill.snow.css',
            )
        }
        js = (
            'https://cdn.quilljs.com/1.3.6/quill.js',
            'js/richtext-init.js',
        )


class FileUploadWidget(forms.ClearableFileInput):
    """Enhanced file upload widget with preview."""

    template_name = 'widgets/fileupload.html'

    def __init__(self, attrs=None, accept=None, multiple=False):
        default_attrs = {'class': 'form-control file-upload'}
        if accept:
            default_attrs['accept'] = accept
        if multiple:
            default_attrs['multiple'] = True
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)

    class Media:
        css = {
            'all': ('css/file-upload.css',)
        }
        js = ('js/file-upload.js',)


class ImageUploadWidget(FileUploadWidget):
    """Image upload widget with preview."""

    template_name = 'widgets/imageupload.html'

    def __init__(self, attrs=None, preview_width=200, preview_height=200):
        super().__init__(attrs=attrs, accept='image/*')
        self.preview_width = preview_width
        self.preview_height = preview_height

    def get_context(self, name, value, attrs):
        context = super().get_context(name, value, attrs)
        context['widget']['preview_width'] = self.preview_width
        context['widget']['preview_height'] = self.preview_height
        return context


class AutocompleteWidget(forms.TextInput):
    """Autocomplete widget."""

    template_name = 'widgets/autocomplete.html'

    def __init__(self, attrs=None, source_url=None, min_length=2):
        default_attrs = {
            'class': 'form-control autocomplete',
            'data-source-url': source_url,
            'data-min-length': min_length,
        }
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)

    class Media:
        css = {
            'all': ('css/autocomplete.css',)
        }
        js = ('js/autocomplete.js',)


class StarRatingWidget(forms.NumberInput):
    """Star rating widget."""

    template_name = 'widgets/starrating.html'

    def __init__(self, attrs=None, stars=5):
        default_attrs = {
            'class': 'star-rating',
            'type': 'hidden',
            'data-stars': stars,
        }
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)

    class Media:
        css = {
            'all': ('css/star-rating.css',)
        }
        js = ('js/star-rating.js',)


class ToggleSwitchWidget(forms.CheckboxInput):
    """Toggle switch widget."""

    template_name = 'widgets/toggleswitch.html'

    def __init__(self, attrs=None, on_label='On', off_label='Off'):
        default_attrs = {
            'class': 'form-check-input toggle-switch',
            'data-on-label': on_label,
            'data-off-label': off_label,
        }
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)

    class Media:
        css = {
            'all': ('css/toggle-switch.css',)
        }


class LocationPickerWidget(forms.TextInput):
    """Location picker widget with map."""

    template_name = 'widgets/locationpicker.html'

    def __init__(self, attrs=None, map_attrs=None):
        default_attrs = {'class': 'form-control location-picker'}
        if attrs:
            default_attrs.update(attrs)
        super().__init__(attrs=default_attrs)
        self.map_attrs = map_attrs or {}

    def get_context(self, name, value, attrs):
        context = super().get_context(name, value, attrs)
        context['widget']['map_attrs'] = self.map_attrs
        return context

    class Media:
        css = {
            'all': ('css/location-picker.css',)
        }
        js = (
            'https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places',
            'js/location-picker.js',
        )