"""
Forms for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django import forms
from django.forms import ModelForm, Form
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Submit, Row, Column, Fieldset, HTML
from crispy_forms.bootstrap import FormActions, PrependedText, AppendedText
{% if has_file_fields %}from django.forms import ClearableFileInput
{% endif %}{% if has_date_fields %}from django.forms import DateInput, DateTimeInput
{% endif %}

from .models import {{ models|map(attribute='name')|join(', ') }}
{% if has_custom_widgets %}from .widgets import *
{% endif %}


class BaseModelForm(ModelForm):
    """Base form with common functionality."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-lg-2'
        self.helper.field_class = 'col-lg-10'


{% for model in models %}
{% if model.forms %}
{% for form in model.forms %}
class {{ form.name|default(model.name + 'Form', true) }}({% if form.base_class %}{{ form.base_class }}{% else %}BaseModelForm{% endif %}):
    """
    Form for {{ model.name }} model.
    {% if form.description %}

    {{ form.description }}
    {% endif %}
    """
    {% if form.additional_fields %}
    # Additional fields
    {% for field in form.additional_fields %}
    {{ field.name }} = forms.{{ field.type }}(
                             {% if field.label %}label=_('{{ field.label }}'),
                             {% endif %}{% if field.required is defined %}required={{ field.required|lower }},
                             {% endif %}{% if field.help_text %}help_text=_('{{ field.help_text }}'),
                             {% endif %}{% if field.initial %}initial={{ field.initial }},
                             {% endif %}{% if field.widget %}widget={{ field.widget }},
                             {% endif %}
                             )
{% endfor %}
{% endif %}

class Meta:
    model = {{ model.name }}
    {% if form.fields %}fields = {{ form.fields }}
    {% elif form.exclude %}exclude = {{ form.exclude }}
    {% else %}fields = '__all__'
    {% endif %}
    {% if form.widgets %}
    widgets = {
        {% for field_name, widget in form.widgets.items() %}
        '{{ field_name }}': {{ widget }},
    {% endfor %}
    }
    {% endif %}
    {% if form.labels %}
    labels = {
        {% for field_name, label in form.labels.items() %}
        '{{ field_name }}': _('{{ label }}'),
        {% endfor %}
    }
    {% endif %}
    {% if form.help_texts %}
    help_texts = {
        {% for field_name, help_text in form.help_texts.items() %}
        '{{ field_name }}': _('{{ help_text }}'),
        {% endfor %}
    }
    {% endif %}
    {% if form.error_messages %}
    error_messages = {
        {% for field_name, messages in form.error_messages.items() %}
        '{{ field_name }}': {
            {% for key, message in messages.items() %}
            '{{ key }}': _('{{ message }}'),
            {% endfor %}
        },
        {% endfor %}
    }
{% endif %}

def __init__(self, *args, **kwargs):
{% if form.custom_init %}
{{ form.custom_init|indent(8) }}
{% endif %}
    super().__init__(*args, **kwargs)

    {% if form.field_customizations %}
    # Customize fields
    {% for field_name, customization in form.field_customizations.items() %}
    {% if customization.widget %}
    self.fields['{{ field_name }}'].widget = {{ customization.widget }}
    {% endif %}
    {% if customization.queryset %}
    self.fields['{{ field_name }}'].queryset = {{ customization.queryset }}
    {% endif %}
    {% if customization.required is defined %}
    self.fields['{{ field_name }}'].required = {{ customization.required|lower }}
    {% endif %}
    {% endfor %}
    {% endif %}

    {% if form.crispy_layout %}
    # Crispy forms layout
    self.helper.layout = Layout(
        {{ form.crispy_layout|indent(12) }}
    )
    {% endif %}

    {% if form.submit_button %}
    self.helper.add_input(Submit('submit', '{{ form.submit_button.text|default('Submit', true) }}', css_class='{{ form.submit_button.css_class|default('btn-primary', true) }}'))
{% endif %}

{% if form.clean_methods %}
# Field validation methods
{% for field_name, clean_method in form.clean_methods.items() %}
def clean_{{ field_name }}(self):
    """Validate {{ field_name }} field."""
    {{ field_name }} = self.cleaned_data.get('{{ field_name }}')
{{ clean_method|indent(8) }}
return {{ field_name }}

{% endfor %}
{% endif %}

{% if form.clean %}
def clean(self):
    """Form-level validation."""
    cleaned_data = super().clean()
    {{ form.clean|indent(8) }}
    return cleaned_data
{% endif %}

{% if form.save %}
def save(self, commit=True):
    """Custom save method."""
    instance = super().save(commit=False)
    {{ form.save|indent(8) }}
    if commit:
        instance.save()
        {% if form.save_m2m %}self.save_m2m()
    {% endif %}
    return instance
{% endif %}


{% endfor %}
{% else %}
# Default form for {{ model.name }}
class {{ model.name }}Form(BaseModelForm):
    """Default form for {{ model.name }}."""

    class Meta:
        model = {{ model.name }}
        fields = '__all__'
        {% if model.fields|selectattr('type', 'equalto', 'DateField')|list %}
        widgets = {
            {% for field in model.fields %}
            {% if field.type == 'DateField' %}
            '{{ field.name }}': DateInput(attrs={'type': 'date'}),
            {% elif field.type == 'DateTimeField' %}
            '{{ field.name }}': DateTimeInput(attrs={'type': 'datetime-local'}),
            {% endif %}
            {% endfor %}
        }
{% endif %}


{% endif %}
{% endfor %}

# Search forms
{% for model in models %}
{% if model.search_form %}
class {{ model.name }}SearchForm(Form):
    """Search form for {{ model.name }}."""

    q = forms.CharField(
        required=False,
        label=_('Search'),
        widget=forms.TextInput(attrs={
            'placeholder': _('Search {{ model.name|plural }}...'),
            'class': 'form-control',
        })
    )

    {% for field in model.search_form.fields %}
    {{ field.name }} = forms.{{ field.type }}(
                             required=False,
                             label=_('{{ field.label|default(field.name|title_case, true) }}'),
                             {% if field.widget %}widget={{ field.widget }},
                             {% endif %}
                             )
{% endfor %}

def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.helper = FormHelper()
    self.helper.form_method = 'get'
    self.helper.form_class = 'form-inline'
    self.helper.field_template = 'bootstrap5/layout/inline_field.html'
    self.helper.layout = Layout(
        'q',
        {% for field in model.search_form.fields %}'{{ field.name }}',
        {% endfor %}
        Submit('search', _('Search'), css_class='btn-primary ml-2'),
    )

def get_queryset(self, queryset):
    """Filter queryset based on search parameters."""
    if self.is_valid():
        q = self.cleaned_data.get('q')
        if q:
            # Search in multiple fields
            from django.db.models import Q
            search_fields = {{ model.search_form.search_fields|default(['name'], true) }}
            query = Q()
            for field in search_fields:
                query |= Q(**{f'{field}__icontains': q})
            queryset = queryset.filter(query)

            {% for field in model.search_form.fields %}
            {% if field.filter_method %}
            # Custom filter for {{ field.name }}
        {{ field.name }} = self.cleaned_data.get('{{ field.name }}')
        if {{ field.name }}:
        {{ field.filter_method|indent(16) }}
        {% else %}
            # Standard filter for {{ field.name }}
            {{ field.name }} = self.cleaned_data.get('{{ field.name }}')
        if {{ field.name }}:
            queryset = queryset.filter({{ field.name }}={{ field.name }})
        {% endif %}
        {% endfor %}

        return queryset


{% endif %}
{% endfor %}

# Bulk action forms
{% for model in models %}
{% if model.bulk_actions %}
class {{ model.name }}BulkActionForm(Form):
    """Bulk action form for {{ model.name }}."""

    action = forms.ChoiceField(
        choices=[
            ('', '--- Select Action ---'),
            {% for action in model.bulk_actions %}
            ('{{ action.value }}', _('{{ action.label }}')),
            {% endfor %}
        ],
        required=True,
        label=_('Action'),
    )

    selected_ids = forms.CharField(
        widget=forms.HiddenInput(),
        required=True,
    )

    {% for action in model.bulk_actions %}
    {% if action.fields %}
    # Fields for {{ action.value }} action
    {% for field in action.fields %}
    {{ action.value }}_{{ field.name }} = forms.{{ field.type }}(
                                                required=False,
                                                label=_('{{ field.label }}'),
                                                {% if field.help_text %}help_text=_('{{ field.help_text }}'),
                                                {% endif %}
                                                )
    {% endfor %}
    {% endif %}
    {% endfor %}

    def clean_selected_ids(self):
        """Parse selected IDs."""
        ids_str = self.cleaned_data.get('selected_ids', '')
        try:
            ids = [int(id) for id in ids_str.split(',') if id]
            if not ids:
                raise ValidationError(_('No items selected.'))
            return ids
        except ValueError:
            raise ValidationError(_('Invalid selection.'))

    def execute_action(self, queryset):
        """Execute the selected bulk action."""
        action = self.cleaned_data.get('action')
        ids = self.cleaned_data.get('selected_ids')

        # Filter queryset
        queryset = queryset.filter(id__in=ids)

        {% for action in model.bulk_actions %}
        if action == '{{ action.value }}':
        {% if action.implementation %}
        {{ action.implementation|indent(12) }}
        {% else %}
            # TODO: Implement {{ action.value }} action
            pass
        {% endif %}
        {% endfor %}

        return queryset.count()


{% endif %}
{% endfor %}