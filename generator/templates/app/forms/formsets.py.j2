"""
Formsets for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.forms import formset_factory, modelformset_factory, inlineformset_factory
from django.forms import BaseFormSet, BaseModelFormSet, BaseInlineFormSet
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _

from .models import {{ models|map(attribute='name')|join(', ') }}
from .forms import *


{% for formset in formsets %}
{% if formset.base_class %}
class {{ formset.name }}FormSet({{ formset.base_class }}):
    """Custom formset for {{ formset.model|default(formset.form, true) }}."""

    def clean(self):
        """Validate the formset."""
        if any(self.errors):
            return

    {{ formset.clean|indent(8) if formset.clean else 'pass' }}

    {% if formset.get_form_kwargs %}
    def get_form_kwargs(self, index):
        """Get kwargs for individual forms."""
        kwargs = super().get_form_kwargs(index)
        {{ formset.get_form_kwargs|indent(8) }}
        return kwargs
    {% endif %}

    {% if formset.save %}
    def save(self, commit=True):
        """Custom save method."""
        instances = super().save(commit=False)
        {{ formset.save|indent(8) }}
        if commit:
            for instance in instances:
                instance.save()
        return instances
    {% endif %}


    {% endif %}
    # {{ formset.type|default('Model', true) }} formset for {{ formset.model|default(formset.form, true) }}
{{ formset.name }} = {{ formset.factory|default('modelformset_factory', true) }}(
                     {% if formset.model %}{{ formset.model }}{% else %}{{ formset.form }}{% endif %},
                     {% if formset.form %}form={{ formset.form }},
                     {% endif %}{% if formset.formset and formset.base_class %}formset={{ formset.name }}FormSet,
                     {% endif %}extra={{ formset.extra|default(1) }},
                     {% if formset.max_num %}max_num={{ formset.max_num }},
                     {% endif %}{% if formset.min_num %}min_num={{ formset.min_num }},
                     {% endif %}{% if formset.can_order %}can_order=True,
                     {% endif %}{% if formset.can_delete %}can_delete=True,
                     {% endif %}{% if formset.fields %}fields={{ formset.fields }},
                     {% endif %}{% if formset.exclude %}exclude={{ formset.exclude }},
                     {% endif %}{% if formset.widgets %}widgets={{ formset.widgets }},
                     {% endif %}
                     )

{% endfor %}

# Inline formsets
{% for model in models %}
{% for rel in model.relationships %}
{% if rel.type == 'inline' %}
{{ model.name }}{{ rel.related_model }}FormSet = inlineformset_factory(
{{ model.name }},
{{ rel.related_model }},
{% if rel.form %}form={{ rel.form }},
{% endif %}fields='__all__',
extra={{ rel.extra|default(1) }},
{% if rel.max_num %}max_num={{ rel.max_num }},
{% endif %}{% if rel.min_num %}min_num={{ rel.min_num }},
{% endif %}can_delete=True,
{% if rel.fk_name %}fk_name='{{ rel.fk_name }}',
{% endif %}
)

{% endif %}
{% endfor %}
{% endfor %}

# Base formset classes for common patterns

class RequiredFormSet(BaseModelFormSet):
    """Formset that requires at least one form."""

    def clean(self):
        """Ensure at least one form has data."""
        if any(self.errors):
            return

        if not any(cleaned_data and not cleaned_data.get('DELETE', False)
                   for cleaned_data in self.cleaned_data):
            raise ValidationError(_('At least one item is required.'))


class UniqueTogetherFormSet(BaseModelFormSet):
    """Formset that validates unique together constraints."""

    def clean(self):
        """Check for duplicate entries."""
        if any(self.errors):
            return

        # Collect all non-deleted forms data
        valid_forms = []
        for form in self.forms:
            if self.can_delete and self._should_delete_form(form):
                continue
            if form.cleaned_data:
                valid_forms.append(form.cleaned_data)

        # Check for duplicates
        seen = set()
        for data in valid_forms:
            # Create a tuple of fields that should be unique together
            unique_check = tuple(data.get(field) for field in self.unique_fields)
            if unique_check in seen:
                raise ValidationError(_('Duplicate entries are not allowed.'))
            seen.add(unique_check)


class OrderedFormSet(BaseModelFormSet):
    """Formset with custom ordering."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.can_order = True

    def save(self, commit=True):
        """Save with proper ordering."""
        instances = super().save(commit=False)

        # Apply ordering
        for i, instance in enumerate(instances):
            if hasattr(instance, 'order'):
                instance.order = i

        if commit:
            for instance in instances:
                instance.save()

        return instances


# Factory functions for common formset patterns

def create_bulk_edit_formset(model, fields, extra=0, max_num=100):
    """Create a formset for bulk editing."""
    return modelformset_factory(
        model,
        fields=fields,
        extra=extra,
        max_num=max_num,
        can_delete=True,
        widgets={
            'id': forms.HiddenInput(),
        }
    )


def create_import_formset(model, fields, extra=10):
    """Create a formset for importing data."""
    class ImportForm(forms.ModelForm):
        class Meta:
            model = model
            fields = fields

        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            # Make all fields optional for import
            for field in self.fields.values():
                field.required = False

    return modelformset_factory(
        model,
        form=ImportForm,
        extra=extra,
        can_delete=False,
    )