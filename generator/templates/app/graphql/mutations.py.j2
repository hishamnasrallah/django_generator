"""
GraphQL mutations for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import graphene
from graphene_django.types import ErrorType
from django.core.exceptions import ValidationError
from django.db import transaction
from graphql_jwt.decorators import login_required
{% if has_file_uploads %}from graphene_file_upload.scalars import Upload
{% endif %}

from ..models import {{ models|map(attribute='name')|join(', ') }}
from .types import {{ types|map(attribute='name')|join(', ') }}


{% for model in models %}
class Create{{ model.name }}Mutation(graphene.Mutation):
    """Create a new {{ model.name }}."""

    class Arguments:
    {% for field in model.fields %}
    {% if not field.auto_now_add and not field.auto_now and field.name != 'id' %}
    {{ field.name }} = graphene.{{ field|graphene_type }}({% if field.required %}required=True{% endif %})
    {% endif %}
    {% endfor %}

    {{ model.name|lower }} = graphene.Field({{ model.name }}Type)
    errors = graphene.List(ErrorType)
    success = graphene.Boolean()

    @login_required
    def mutate(self, info, **kwargs):
        errors = []

        try:
            with transaction.atomic():
                # Create instance
                instance = {{ model.name }}()

                # Set fields
                {% for field in model.fields %}
                {% if not field.auto_now_add and not field.auto_now and field.name != 'id' %}
                if '{{ field.name }}' in kwargs:
                {% if field.type == 'ForeignKey' %}
                    instance.{{ field.name }}_id = kwargs['{{ field.name }}']
                    {% else %}
                    instance.{{ field.name }} = kwargs['{{ field.name }}']
                {% endif %}
                {% endif %}
                {% endfor %}

                {% if model.features and model.features.audit %}
                # Set audit fields
                instance.created_by = info.context.user
                {% endif %}

                # Validate and save
                instance.full_clean()
                instance.save()

                {% for field in model.fields %}
                {% if field.type == 'ManyToManyField' %}
                # Handle many-to-many relationships
                if '{{ field.name }}' in kwargs:
                    instance.{{ field.name }}.set(kwargs['{{ field.name }}'])
                {% endif %}
                {% endfor %}

                return Create{{ model.name }}Mutation(
                {{ model.name|lower }}=instance,
                success=True,
                errors=[]
                )

            except ValidationError as e:
            errors = [ErrorType(field=field, messages=messages)
                      for field, messages in e.message_dict.items()]
            return Create{{ model.name }}Mutation(
            {{ model.name|lower }}=None,
            success=False,
            errors=errors
            )


    class Update{{ model.name }}Mutation(graphene.Mutation):
        """Update an existing {{ model.name }}."""

        class Arguments:
            id = graphene.ID(required=True)
            {% for field in model.fields %}
            {% if not field.auto_now_add and not field.auto_now and field.name != 'id' %}
            {{ field.name }} = graphene.{{ field|graphene_type }}()
    {% endif %}
    {% endfor %}

    {{ model.name|lower }} = graphene.Field({{ model.name }}Type)
    errors = graphene.List(ErrorType)
    success = graphene.Boolean()

    @login_required
    def mutate(self, info, id, **kwargs):
        errors = []

        try:
            with transaction.atomic():
                # Get instance
                instance = {{ model.name }}.objects.get(pk=id)

                # Check permissions
                if not info.context.user.has_perm('{{ app_name }}.change_{{ model.name|lower }}'):
                    raise PermissionError("You don't have permission to update this {{ model.name }}.")

                # Update fields
                {% for field in model.fields %}
                {% if not field.auto_now_add and not field.auto_now and field.name != 'id' %}
                if '{{ field.name }}' in kwargs:
                {% if field.type == 'ForeignKey' %}
                    instance.{{ field.name }}_id = kwargs['{{ field.name }}']
                    {% elif field.type == 'ManyToManyField' %}
                    # Handle M2M separately after save
                    pass
                    {% else %}
                    instance.{{ field.name }} = kwargs['{{ field.name }}']
                {% endif %}
                {% endif %}
                {% endfor %}

                {% if model.features and model.features.audit %}
                # Set audit fields
                instance.updated_by = info.context.user
                {% endif %}

                # Validate and save
                instance.full_clean()
                instance.save()

                {% for field in model.fields %}
                {% if field.type == 'ManyToManyField' %}
                # Update many-to-many relationships
                if '{{ field.name }}' in kwargs:
                    instance.{{ field.name }}.set(kwargs['{{ field.name }}'])
                {% endif %}
                {% endfor %}

                return Update{{ model.name }}Mutation(
                {{ model.name|lower }}=instance,
                success=True,
                errors=[]
                )

            except {{ model.name }}.DoesNotExist:
            return Update{{ model.name }}Mutation(
            {{ model.name|lower }}=None,
            success=False,
            errors=[ErrorType(field='id', messages=['{{ model.name }} not found'])]
            )
            except ValidationError as e:
            errors = [ErrorType(field=field, messages=messages)
                      for field, messages in e.message_dict.items()]
            return Update{{ model.name }}Mutation(
            {{ model.name|lower }}=None,
            success=False,
            errors=errors
            )


    class Delete{{ model.name }}Mutation(graphene.Mutation):
        """Delete a {{ model.name }}."""

        class Arguments:
            id = graphene.ID(required=True)

        success = graphene.Boolean()
        message = graphene.String()

        @login_required
        def mutate(self, info, id):
            try:
                instance = {{ model.name }}.objects.get(pk=id)

                # Check permissions
                if not info.context.user.has_perm('{{ app_name }}.delete_{{ model.name|lower }}'):
                    raise PermissionError("You don't have permission to delete this {{ model.name }}.")

                {% if model.features and model.features.soft_delete %}
                # Soft delete
                instance.is_deleted = True
                instance.save()
                message = "{{ model.name }} has been soft deleted."
                {% else %}
                # Hard delete
                instance.delete()
                message = "{{ model.name }} has been deleted."
                {% endif %}

                return Delete{{ model.name }}Mutation(
                    success=True,
                    message=message
                )

            except {{ model.name }}.DoesNotExist:
                return Delete{{ model.name }}Mutation(
                    success=False,
                    message="{{ model.name }} not found."
                )


    {% if model.api and model.api.custom_mutations %}
    # Custom mutations for {{ model.name }}
    {% for mutation in model.api.custom_mutations %}
    class {{ mutation.name }}(graphene.Mutation):
        """{{ mutation.description }}"""

        class Arguments:
        {% for arg in mutation.arguments %}
        {{ arg.name }} = graphene.{{ arg.type }}({% if arg.required %}required=True{% endif %})
        {% endfor %}

        {% for output in mutation.outputs %}
        {{ output.name }} = graphene.{{ output.type }}()
        {% endfor %}
        success = graphene.Boolean()
        message = graphene.String()

        {% if mutation.login_required %}@login_required
        {% endif %}def mutate(self, info, **kwargs):
    {{ mutation.implementation|indent(8) }}


    {% endfor %}
    {% endif %}
    {% endfor %}

    {% if has_file_uploads %}
    # File upload mutations
    {% for model in models %}
    {% for field in model.fields %}
    {% if field.type in ['FileField', 'ImageField'] %}
    class Upload{{ model.name }}{{ field.name|title }}Mutation(graphene.Mutation):
        """Upload {{ field.name }} for {{ model.name }}."""

        class Arguments:
            id = graphene.ID(required=True)
            file = Upload(required=True)

        {{ model.name|lower }} = graphene.Field({{ model.name }}Type)
        success = graphene.Boolean()
        message = graphene.String()

        @login_required
        def mutate(self, info, id, file):
            try:
                instance = {{ model.name }}.objects.get(pk=id)

                # Check permissions
                if not info.context.user.has_perm('{{ app_name }}.change_{{ model.name|lower }}'):
                    raise PermissionError("You don't have permission to update this {{ model.name }}.")

                # Save file
                instance.{{ field.name }} = file
                instance.save()

                return Upload{{ model.name }}{{ field.name|title }}Mutation(
                {{ model.name|lower }}=instance,
                success=True,
                message="File uploaded successfully."
                )

                except {{ model.name }}.DoesNotExist:
                return Upload{{ model.name }}{{ field.name|title }}Mutation(
                {{ model.name|lower }}=None,
                success=False,
                message="{{ model.name }} not found."
                )


        {% endif %}
        {% endfor %}
        {% endfor %}
        {% endif %}

        # Bulk mutations
        {% for model in models %}
        {% if model.api and model.api.allow_bulk %}
        class BulkCreate{{ model.name }}Mutation(graphene.Mutation):
            """Bulk create {{ model.name }} objects."""

            class Arguments:
                objects = graphene.List({{ model.name }}Input, required=True)

            {{ model.name|lower|plural }} = graphene.List({{ model.name }}Type)
            created_count = graphene.Int()
            errors = graphene.List(ErrorType)

            @login_required
            def mutate(self, info, objects):
                created = []
                errors = []

                with transaction.atomic():
                    for obj_data in objects:
                        try:
                            instance = {{ model.name }}(**obj_data)
                            instance.full_clean()
                            instance.save()
                            created.append(instance)
                        except ValidationError as e:
                            errors.extend([
                                ErrorType(field=field, messages=messages)
                                for field, messages in e.message_dict.items()
                            ])

                return BulkCreate{{ model.name }}Mutation(
                {{ model.name|lower|plural }}=created,
                created_count=len(created),
                errors=errors
                )


            class BulkUpdate{{ model.name }}Mutation(graphene.Mutation):
                """Bulk update {{ model.name }} objects."""

                class Arguments:
                    ids = graphene.List(graphene.ID, required=True)
                    data = graphene.JSONString(required=True)

                updated_count = graphene.Int()
                success = graphene.Boolean()
                message = graphene.String()

                @login_required
                def mutate(self, info, ids, data):
                    try:
                        queryset = {{ model.name }}.objects.filter(id__in=ids)
                        updated_count = queryset.update(**data)

                        return BulkUpdate{{ model.name }}Mutation(
                            updated_count=updated_count,
                            success=True,
                            message=f"Updated {updated_count} {{ model.name }} objects."
                        )

                    except Exception as e:
                        return BulkUpdate{{ model.name }}Mutation(
                            updated_count=0,
                            success=False,
                            message=str(e)
                        )


            class BulkDelete{{ model.name }}Mutation(graphene.Mutation):
                """Bulk delete {{ model.name }} objects."""

                class Arguments:
                    ids = graphene.List(graphene.ID, required=True)

                deleted_count = graphene.Int()
                success = graphene.Boolean()
                message = graphene.String()

                @login_required
                def mutate(self, info, ids):
                    try:
                        queryset = {{ model.name }}.objects.filter(id__in=ids)
                        {% if model.features and model.features.soft_delete %}
                        # Soft delete
                        deleted_count = queryset.update(is_deleted=True)
                        message = f"Soft deleted {deleted_count} {{ model.name }} objects."
                        {% else %}
                        # Hard delete
                        deleted_count, _ = queryset.delete()
                        message = f"Deleted {deleted_count} {{ model.name }} objects."
                        {% endif %}

                        return BulkDelete{{ model.name }}Mutation(
                            deleted_count=deleted_count,
                            success=True,
                            message=message
                        )

                    except Exception as e:
                        return BulkDelete{{ model.name }}Mutation(
                            deleted_count=0,
                            success=False,
                            message=str(e)
                        )


            {% endif %}
            {% endfor %}

            # Mutation class
            class Mutation(graphene.ObjectType):
                """{{ app_name }} mutations."""

                {% for model in models %}
                create_{{ model.name|lower }} = Create{{ model.name }}Mutation.Field()
                update_{{ model.name|lower }} = Update{{ model.name }}Mutation.Field()
                delete_{{ model.name|lower }} = Delete{{ model.name }}Mutation.Field()

                {% if model.api and model.api.custom_mutations %}
                # Custom mutations
                {% for mutation in model.api.custom_mutations %}
                {{ mutation.name|snake_case }} = {{ mutation.name }}.Field()
            {% endfor %}
            {% endif %}

            {% if has_file_uploads %}
            {% for field in model.fields %}
            {% if field.type in ['FileField', 'ImageField'] %}
            upload_{{ model.name|lower }}_{{ field.name }} = Upload{{ model.name }}{{ field.name|title }}Mutation.Field()
            {% endif %}
            {% endfor %}
            {% endif %}

            {% if model.api and model.api.allow_bulk %}
            # Bulk operations
            bulk_create_{{ model.name|lower }} = BulkCreate{{ model.name }}Mutation.Field()
            bulk_update_{{ model.name|lower }} = BulkUpdate{{ model.name }}Mutation.Field()
            bulk_delete_{{ model.name|lower }} = BulkDelete{{ model.name }}Mutation.Field()
        {% endif %}

{% endfor %}