"""
Admin inline classes for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib import admin
from django.utils.html import format_html
from django.forms import BaseInlineFormSet

from .models import {{ models|map(attribute='name')|join(', ') }}


{% for inline in inlines %}
{% if inline.formset_class %}
class {{ inline.name }}FormSet(BaseInlineFormSet):
    """Custom formset for {{ inline.name }}."""

    def clean(self):
        """Validate the formset."""
        super().clean()
{% if inline.formset_validation %}
{{ inline.formset_validation|indent(8) }}
{% endif %}


{% endif %}
class {{ inline.name }}(admin.{{ inline.type|default('TabularInline', true) }}):
    """{{ inline.description|default('Inline for ' + inline.model, true) }}"""

    model = {{ inline.model }}
    {% if inline.fk_name %}fk_name = '{{ inline.fk_name }}'
    {% endif %}{% if inline.formset_class %}formset = {{ inline.name }}FormSet
    {% endif %}

    # Display options
    extra = {{ inline.extra|default(1) }}
    {% if inline.max_num %}max_num = {{ inline.max_num }}
    {% endif %}{% if inline.min_num %}min_num = {{ inline.min_num }}
    {% endif %}{% if inline.can_delete is defined %}can_delete = {{ inline.can_delete|lower }}
    {% endif %}

    {% if inline.fields %}fields = {{ inline.fields }}
    {% endif %}{% if inline.readonly_fields %}readonly_fields = {{ inline.readonly_fields }}
    {% endif %}{% if inline.exclude %}exclude = {{ inline.exclude }}
    {% endif %}

    {% if inline.verbose_name %}verbose_name = '{{ inline.verbose_name }}'
    {% endif %}{% if inline.verbose_name_plural %}verbose_name_plural = '{{ inline.verbose_name_plural }}'
    {% endif %}

    {% if inline.show_change_link %}show_change_link = True
    {% endif %}

    {% if inline.ordering %}ordering = {{ inline.ordering }}
    {% endif %}

    {% if inline.classes %}classes = {{ inline.classes }}
    {% endif %}

    {% if inline.has_add_permission is defined %}
    def has_add_permission(self, request, obj=None):
        """Check if user can add inline items."""
        {% if inline.has_add_permission %}
        {{ inline.has_add_permission|indent(8) }}
        {% else %}
        return False
    {% endif %}
    {% endif %}

    {% if inline.get_queryset %}
    def get_queryset(self, request):
        """Customize inline queryset."""
        qs = super().get_queryset(request)
        {{ inline.get_queryset|indent(8) }}
        return qs
{% endif %}


{% endfor %}

# Specialized inline classes

class ReadOnlyInline(admin.TabularInline):
    """Base class for read-only inlines."""

    extra = 0
    can_delete = False

    def has_add_permission(self, request, obj=None):
        return False

    def has_change_permission(self, request, obj=None):
        return False


class CollapsibleInline(admin.StackedInline):
    """Base class for collapsible inlines."""

    classes = ['collapse']


class SortableInline(admin.TabularInline):
    """Base class for sortable inlines."""

    class Media:
        css = {
            'all': ('admin/css/sortable_inline.css',)
        }
        js = ('admin/js/sortable_inline.js',)


# Generic related object inline
class GenericInline(admin.TabularInline):
    """Generic inline for related objects."""

    template = 'admin/edit_inline/tabular.html'
    extra = 1

    def get_fields(self, request, obj=None):
        """Dynamically determine fields."""
        if self.fields:
            return self.fields

        # Get all fields except auto fields
        fields = []
        for field in self.model._meta.fields:
            if not field.auto_created and field.name != 'id':
                fields.append(field.name)

        return fields