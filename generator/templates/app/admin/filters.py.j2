"""
Custom admin filters for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib import admin
from django.db.models import Q
from django.utils.translation import gettext_lazy as _
from datetime import datetime, timedelta
from django.utils import timezone


{% for filter in custom_filters %}
class {{ filter.name }}(admin.SimpleListFilter):
    """{{ filter.description|default('Custom filter for ' + filter.field, true) }}"""

    title = _('{{ filter.title|default(filter.field|title_case, true) }}')
    parameter_name = '{{ filter.parameter_name|default(filter.field, true) }}'

    def lookups(self, request, model_admin):
        """Return filter options."""
        return (
            {% for option in filter.options %}
            ('{{ option.value }}', _('{{ option.label }}')),
            {% endfor %}
        )

    def queryset(self, request, queryset):
        """Filter the queryset."""
        {% if filter.implementation %}
        {{ filter.implementation|indent(8) }}
        {% else %}
        if self.value() == 'custom':
            # TODO: Implement custom filter logic
            return queryset
        return queryset
{% endif %}


{% endfor %}

# Date range filters
class DateRangeFilter(admin.SimpleListFilter):
    """Filter by date ranges."""

    title = _('Date Range')
    parameter_name = 'date_range'

    def lookups(self, request, model_admin):
        return (
            ('today', _('Today')),
            ('yesterday', _('Yesterday')),
            ('week', _('This week')),
            ('month', _('This month')),
            ('year', _('This year')),
            ('last_week', _('Last week')),
            ('last_month', _('Last month')),
            ('last_year', _('Last year')),
        )

    def queryset(self, request, queryset):
        if self.value() == 'today':
            return queryset.filter(created_at__date=timezone.now().date())
        elif self.value() == 'yesterday':
            return queryset.filter(created_at__date=timezone.now().date() - timedelta(days=1))
        elif self.value() == 'week':
            return queryset.filter(created_at__gte=timezone.now() - timedelta(days=7))
        elif self.value() == 'month':
            return queryset.filter(created_at__month=timezone.now().month)
        elif self.value() == 'year':
            return queryset.filter(created_at__year=timezone.now().year)
        elif self.value() == 'last_week':
            end = timezone.now() - timedelta(days=7)
            start = end - timedelta(days=7)
            return queryset.filter(created_at__range=(start, end))
        elif self.value() == 'last_month':
            return queryset.filter(
                created_at__month=timezone.now().month - 1,
                created_at__year=timezone.now().year
            )
        elif self.value() == 'last_year':
            return queryset.filter(created_at__year=timezone.now().year - 1)
        return queryset


# Status filters
{% for model in models %}
{% if model.fields|selectattr('name', 'equalto', 'status')|list %}
class {{ model.name }}StatusFilter(admin.SimpleListFilter):
    """Filter {{ model.name }} by status."""

    title = _('Status')
    parameter_name = 'status'

    def lookups(self, request, model_admin):
        from .models import {{ model.name }}
        return {{ model.name }}.STATUS_CHOICES if hasattr({{ model.name }}, 'STATUS_CHOICES') else []

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(status=self.value())
        return queryset


{% endif %}
{% endfor %}

# Related object filters
{% for model in models %}
{% for field in model.fields %}
{% if field.type in ['ForeignKey', 'ManyToManyField'] %}
class {{ model.name }}{{ field.name|title_case }}Filter(admin.SimpleListFilter):
    """Filter {{ model.name }} by {{ field.name }}."""

    title = _('{{ field.verbose_name|default(field.name|title_case, true) }}')
    parameter_name = '{{ field.name }}'

    def lookups(self, request, model_admin):
    {% if field.type == 'ForeignKey' %}
        from .models import {{ field.to }}
        return [(obj.id, str(obj)) for obj in {{ field.to }}.objects.all()]
        {% else %}
        # For ManyToMany, we need to get unique values
        values = set()
        for obj in model_admin.model.objects.all():
            values.update(obj.{{ field.name }}.values_list('id', 'name'))
        return list(values)
    {% endif %}

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter({{ field.name }}__id=self.value())
        return queryset


{% endif %}
{% endfor %}
{% endfor %}

# Null/Not Null filters
class NullFilter(admin.SimpleListFilter):
    """Filter by null/not null values."""

    title = _('Has Value')
    parameter_name = 'has_value'

    def __init__(self, request, params, model, model_admin):
        super().__init__(request, params, model, model_admin)
        self.field_name = getattr(self, 'field_name', 'value')

    def lookups(self, request, model_admin):
        return (
            ('1', _('Yes')),
            ('0', _('No')),
        )

    def queryset(self, request, queryset):
        if self.value() == '1':
            return queryset.exclude(**{f'{self.field_name}__isnull': True})
        elif self.value() == '0':
            return queryset.filter(**{f'{self.field_name}__isnull': True})
        return queryset