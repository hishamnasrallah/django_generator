"""
Admin configuration for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.db.models import Count, Q
{% if features.enterprise.audit %}from simple_history.admin import SimpleHistoryAdmin
{% endif %}{% if features.enterprise.soft_delete %}from safedelete.admin import SafeDeleteAdmin
{% endif %}{% if features.performance.elasticsearch %}from django_elasticsearch_dsl.registries import registry
{% endif %}

from .models import {{ models|map(attribute='name')|join(', ') }}
{% if has_custom_filters %}from .filters import *
{% endif %}{% if has_inlines %}from .inlines import *
{% endif %}

{% for model in models %}
{% if model.admin %}

@admin.register({{ model.name }})
class {{ model.name }}Admin({% if model.admin.base_class %}{{ model.admin.base_class }}{% else %}{% if features.enterprise.audit %}SimpleHistoryAdmin{% elif features.enterprise.soft_delete %}SafeDeleteAdmin{% else %}admin.ModelAdmin{% endif %}{% endif %}):
    """Admin for {{ model.name }} model."""

    # Display configuration
    list_display = [
        {% for field in model.admin.list_display %}'{{ field }}',
        {% endfor %}{% if model.admin.custom_list_display %}{% for method in model.admin.custom_list_display %}'{{ method.name }}',
        {% endfor %}{% endif %}
    ]

    list_filter = [
        {% for field in model.admin.list_filter %}'{{ field }}',
        {% endfor %}{% if model.admin.custom_filters %}{% for filter in model.admin.custom_filters %}'{{ filter }}',
        {% endfor %}{% endif %}
    ]

    search_fields = [
        {% for field in model.admin.search_fields %}'{{ field }}',
        {% endfor %}
    ]

    {% if model.admin.date_hierarchy %}date_hierarchy = '{{ model.admin.date_hierarchy }}'
    {% endif %}

    {% if model.admin.ordering %}ordering = {{ model.admin.ordering }}
    {% endif %}

    {% if model.admin.list_per_page %}list_per_page = {{ model.admin.list_per_page }}
    {% endif %}

    # Form configuration
    {% if model.admin.fieldsets %}
    fieldsets = (
        {% for fieldset in model.admin.fieldsets %}
        ('{{ fieldset.title }}', {
            'fields': {{ fieldset.fields }},
         {% if fieldset.classes %}'classes': {{ fieldset.classes }},
         {% endif %}{% if fieldset.description %}'description': '{{ fieldset.description }}',
         {% endif %}
         }),
        {% endfor %}
    )
    {% elif model.admin.fields %}
    fields = {{ model.admin.fields }}
    {% endif %}

    {% if model.admin.readonly_fields %}readonly_fields = {{ model.admin.readonly_fields }}
    {% endif %}

    {% if model.admin.exclude %}exclude = {{ model.admin.exclude }}
    {% endif %}

    {% if model.admin.autocomplete_fields %}autocomplete_fields = {{ model.admin.autocomplete_fields }}
    {% endif %}

    {% if model.admin.raw_id_fields %}raw_id_fields = {{ model.admin.raw_id_fields }}
    {% endif %}

    {% if model.admin.radio_fields %}radio_fields = {
        {% for field, style in model.admin.radio_fields.items() %}'{{ field }}': admin.{{ style }},
        {% endfor %}
    }
    {% endif %}

    {% if model.admin.prepopulated_fields %}prepopulated_fields = {{ model.admin.prepopulated_fields }}
    {% endif %}

    {% if model.admin.inlines %}
    # Inlines
    inlines = [
        {% for inline in model.admin.inlines %}{{ inline }},
        {% endfor %}
    ]
    {% endif %}

    {% if model.admin.actions %}
    # Actions
    actions = [
        {% for action in model.admin.actions %}'{{ action }}',
        {% endfor %}
    ]
    {% endif %}

    # Permissions
    {% if model.admin.has_add_permission is defined %}
    def has_add_permission(self, request):
        """Check if user can add {{ model.name }}."""
        {% if model.admin.has_add_permission %}
        {{ model.admin.has_add_permission|indent(8) }}
        {% else %}
        return super().has_add_permission(request)
    {% endif %}
    {% endif %}

    {% if model.admin.has_change_permission is defined %}
    def has_change_permission(self, request, obj=None):
        """Check if user can change {{ model.name }}."""
        {% if model.admin.has_change_permission %}
        {{ model.admin.has_change_permission|indent(8) }}
        {% else %}
        return super().has_change_permission(request, obj)
    {% endif %}
    {% endif %}

    {% if model.admin.has_delete_permission is defined %}
    def has_delete_permission(self, request, obj=None):
        """Check if user can delete {{ model.name }}."""
        {% if model.admin.has_delete_permission %}
        {{ model.admin.has_delete_permission|indent(8) }}
        {% else %}
        return super().has_delete_permission(request, obj)
    {% endif %}
    {% endif %}

    {% if model.admin.get_queryset %}
    def get_queryset(self, request):
        """Customize queryset for {{ model.name }}."""
        qs = super().get_queryset(request)
        {{ model.admin.get_queryset|indent(8) }}
        return qs
    {% endif %}

    {% if model.admin.save_model %}
    def save_model(self, request, obj, form, change):
        """Custom save logic for {{ model.name }}."""
        {{ model.admin.save_model|indent(8) }}
        super().save_model(request, obj, form, change)
    {% endif %}

    {% if model.admin.custom_list_display %}
    # Custom display methods
    {% for method in model.admin.custom_list_display %}
    def {{ method.name }}(self, obj):
        """{{ method.description|default('Display ' + method.name, true) }}"""
    {{ method.implementation|indent(8) }}

    {{ method.name }}.short_description = '{{ method.label|default(method.name|title_case, true) }}'
    {% if method.admin_order_field %}{{ method.name }}.admin_order_field = '{{ method.admin_order_field }}'
    {% endif %}{% if method.boolean %}{{ method.name }}.boolean = True
    {% endif %}
    {% endfor %}{% endif %}

    {% if model.admin.actions %}
    # Custom actions
    {% for action in model.admin.actions %}
    def {{ action }}(self, request, queryset):
        """{{ action|title_case }} selected {{ model.name|plural }}."""
        {% if model.admin.action_implementations and model.admin.action_implementations[action] %}
        {{ model.admin.action_implementations[action]|indent(8) }}
        {% else %}
        # TODO: Implement {{ action }} action
        pass
    {% endif %}

    {{ action }}.short_description = '{{ action|title_case }}'
    {% endfor %}{% endif %}

    {% if features.performance.elasticsearch and model.admin.search_indexes %}
    def reindex_search(self, request, queryset):
        """Reindex selected items in Elasticsearch."""
        registry.update(queryset)
        self.message_user(request, f"Reindexed {queryset.count()} items.")

    reindex_search.short_description = 'Reindex in search'
    actions = actions + ['reindex_search'] if 'actions' in locals() else ['reindex_search']
    {% endif %}

    class Media:
        css = {
            'all': ('admin/css/{{ app_name }}_admin.css',) if hasattr(admin, '{{ app_name }}_admin.css') else ()
        }
        js = ('admin/js/{{ app_name }}_admin.js',) if hasattr(admin, '{{ app_name }}_admin.js') else ()

{% endif %}{% endfor %}

# Register any additional models without custom admin
{% for model in models %}{% if not model.admin %}
admin.site.register({{ model.name }})
{% endif %}{% endfor %}