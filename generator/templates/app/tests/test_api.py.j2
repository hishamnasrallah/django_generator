"""
API tests for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import pytest
from rest_framework import status
from django.urls import reverse
from django.contrib.auth import get_user_model
import json

from ..models import {{ models|map(attribute='name')|join(', ') }}
from ..serializers import {{ models|map(attribute='name')|map('append', 'Serializer')|join(', ') }}

User = get_user_model()


{% for model in models %}
@pytest.mark.django_db
class Test{{ model.name }}API:
    """Test {{ model.name }} API endpoints."""

    def test_list_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}_list):
        """Test listing {{ model.name }} objects."""
        url = reverse('{{ app_name }}:{{ model.name|lower }}-list')
        response = authenticated_api_client.get(url)

        assert response.status_code == status.HTTP_200_OK
        assert response.data['count'] == len({{ model.name|lower }}_list)
        assert len(response.data['results']) == len({{ model.name|lower }}_list)

    def test_retrieve_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}):
        """Test retrieving a single {{ model.name }}."""
        url = reverse('{{ app_name }}:{{ model.name|lower }}-detail', kwargs={'pk': {{ model.name|lower }}.pk})
        response = authenticated_api_client.get(url)

        assert response.status_code == status.HTTP_200_OK
        assert response.data['id'] == {{ model.name|lower }}.pk
        {% for field in model.fields[:3] %}  # Check first 3 fields
        {% if field.name not in ['created_at', 'updated_at'] and field.type not in ['ManyToManyField', 'FileField', 'ImageField'] %}
        assert response.data['{{ field.name }}'] == {{ model.name|lower }}.{{ field.name }}
        {% endif %}
        {% endfor %}

        def test_create_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}_form_data):
            """Test creating a {{ model.name }}."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-list')
            response = authenticated_api_client.post(url, data={{ model.name|lower }}_form_data, format='json')

            assert response.status_code == status.HTTP_201_CREATED
            assert {{ model.name }}.objects.filter(pk=response.data['id']).exists()

            # Verify created object
            created = {{ model.name }}.objects.get(pk=response.data['id'])
            {% for field in model.fields[:3] %}
            {% if field.name in ['name', 'title', 'description'] and field.type not in ['ManyToManyField', 'FileField', 'ImageField'] %}
            assert created.{{ field.name }} == {{ model.name|lower }}_form_data['{{ field.name }}']
        {% endif %}
        {% endfor %}

        def test_update_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}, {{ model.name|lower }}_form_data):
            """Test updating a {{ model.name }}."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-detail', kwargs={'pk': {{ model.name|lower }}.pk})

            # Update some fields
            update_data = {{ model.name|lower }}_form_data.copy()
            {% for field in model.fields %}
            {% if field.name == 'name' %}
            update_data['name'] = 'Updated Name'
            {% elif field.name == 'title' %}
            update_data['title'] = 'Updated Title'
            {% elif field.name == 'description' %}
            update_data['description'] = 'Updated Description'
            {% endif %}
            {% endfor %}

            response = authenticated_api_client.put(url, data=update_data, format='json')

            assert response.status_code == status.HTTP_200_OK

            # Verify update
            {{ model.name|lower }}.refresh_from_db()
            {% for field in model.fields %}
            {% if field.name == 'name' %}
            assert {{ model.name|lower }}.name == 'Updated Name'
            {% elif field.name == 'title' %}
            assert {{ model.name|lower }}.title == 'Updated Title'
            {% elif field.name == 'description' %}
            assert {{ model.name|lower }}.description == 'Updated Description'
        {% endif %}
        {% endfor %}

        def test_partial_update_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}):
            """Test partial update of {{ model.name }}."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-detail', kwargs={'pk': {{ model.name|lower }}.pk})

            update_data = {
                {% for field in model.fields[:1] %}
                {% if field.name in ['name', 'title', 'status'] %}
                '{{ field.name }}': 'Partially Updated',
                {% endif %}
                {% endfor %}
            }

            response = authenticated_api_client.patch(url, data=update_data, format='json')

            assert response.status_code == status.HTTP_200_OK

            {{ model.name|lower }}.refresh_from_db()
            {% for field in model.fields[:1] %}
            {% if field.name in ['name', 'title', 'status'] %}
            assert {{ model.name|lower }}.{{ field.name }} == 'Partially Updated'
        {% endif %}
        {% endfor %}

        def test_delete_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}):
            """Test deleting a {{ model.name }}."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-detail', kwargs={'pk': {{ model.name|lower }}.pk})
            response = authenticated_api_client.delete(url)

            assert response.status_code == status.HTTP_204_NO_CONTENT
            {% if model.features and model.features.soft_delete %}
            # Verify soft delete
            {{ model.name|lower }}.refresh_from_db()
            assert {{ model.name|lower }}.is_deleted is True
            {% else %}
            # Verify hard delete
            assert not {{ model.name }}.objects.filter(pk={{ model.name|lower }}.pk).exists()
        {% endif %}

        def test_unauthorized_access(self, api_client, {{ model.name|lower }}):
            """Test unauthorized access to {{ model.name }} API."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-list')
            response = api_client.get(url)

            assert response.status_code == status.HTTP_401_UNAUTHORIZED

        {% if model.api and model.api.filterset_fields %}
        def test_filter_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}_list):
            """Test filtering {{ model.name }} objects."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-list')

            # Test exact filter
            first_item = {{ model.name|lower }}_list[0]
            {% for field in model.api.filterset_fields[:1] %}
            {% if field is string %}
            response = authenticated_api_client.get(url, {'{{ field }}': getattr(first_item, '{{ field }}')})
            assert response.status_code == status.HTTP_200_OK
            assert response.data['count'] >= 1
        {% endif %}
        {% endfor %}
        {% endif %}

        {% if model.api and model.api.search_fields %}
        def test_search_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}_list):
            """Test searching {{ model.name }} objects."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-list')

            # Search by first search field
            first_item = {{ model.name|lower }}_list[0]
            search_value = getattr(first_item, '{{ model.api.search_fields[0] }}')

            response = authenticated_api_client.get(url, {'search': search_value})

            assert response.status_code == status.HTTP_200_OK
            assert response.data['count'] >= 1
        {% endif %}

        {% if model.api and model.api.ordering_fields %}
        def test_ordering_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}_list):
            """Test ordering {{ model.name }} objects."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-list')

            # Test ascending order
            response = authenticated_api_client.get(url, {'ordering': '{{ model.api.ordering_fields[0] }}'})
            assert response.status_code == status.HTTP_200_OK

            # Test descending order
            response = authenticated_api_client.get(url, {'ordering': '-{{ model.api.ordering_fields[0] }}'})
            assert response.status_code == status.HTTP_200_OK
        {% endif %}

        def test_pagination_{{ model.name|lower }}(self, authenticated_api_client):
            """Test pagination of {{ model.name }} list."""
            # Create many objects
            from .factories import {{ model.name }}Factory
            {{ model.name }}Factory.create_batch(25)

            url = reverse('{{ app_name }}:{{ model.name|lower }}-list')
            response = authenticated_api_client.get(url, {'page_size': 10})

            assert response.status_code == status.HTTP_200_OK
            assert len(response.data['results']) <= 10
            assert 'next' in response.data
            assert 'previous' in response.data
            assert 'count' in response.data

        {% if model.api and model.api.custom_actions %}
        # Test custom actions
        {% for action in model.api.custom_actions %}
        def test_{{ action.name }}_action(self, authenticated_api_client, {{ model.name|lower }}):
            """Test {{ action.name }} custom action."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-{{ action.name|dasherize }}', kwargs={'pk': {{ model.name|lower }}.pk})

            {% if action.method == 'POST' %}
            response = authenticated_api_client.post(url, data={{ action.test_data|default({}) }}, format='json')
            {% else %}
            response = authenticated_api_client.{{ action.method|lower }}(url)
            {% endif %}

            assert response.status_code == status.HTTP_200_OK
        {% if action.assertions %}
        {{ action.assertions|indent(8) }}
        {% endif %}

        {% endfor %}
        {% endif %}

        {% if model.api and model.api.allow_bulk %}
        def test_bulk_create_{{ model.name|lower }}(self, authenticated_api_client):
            """Test bulk creation of {{ model.name }} objects."""
            from .factories import {{ model.name }}Factory

            url = reverse('{{ app_name }}:{{ model.name|lower }}-bulk-create')
            data = [
                factory.build(dict, FACTORY_CLASS={{ model.name }}Factory)
                for _ in range(3)
            ]

            response = authenticated_api_client.post(url, data=data, format='json')

            assert response.status_code == status.HTTP_201_CREATED
            assert len(response.data) == 3

        def test_bulk_update_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}_list):
            """Test bulk update of {{ model.name }} objects."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-bulk-update')

            ids = [obj.pk for obj in {{ model.name|lower }}_list[:3]]
            data = {
                'ids': ids,
                'data': {
                    {% for field in model.fields[:1] %}
                    {% if field.name in ['status', 'is_active'] %}
                    '{{ field.name }}': 'updated',
                    {% endif %}
                    {% endfor %}
                }
            }

            response = authenticated_api_client.post(url, data=data, format='json')

            assert response.status_code == status.HTTP_200_OK
            assert response.data['updated'] == 3

        def test_bulk_delete_{{ model.name|lower }}(self, authenticated_api_client, {{ model.name|lower }}_list):
            """Test bulk deletion of {{ model.name }} objects."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-bulk-delete')

            ids = [obj.pk for obj in {{ model.name|lower }}_list[:3]]
            data = {'ids': ids}

            response = authenticated_api_client.post(url, data=data, format='json')

            assert response.status_code == status.HTTP_204_NO_CONTENT
    {% endif %}


    {% endfor %}

    # Test API permissions
    @pytest.mark.django_db
    class TestAPIPermissions:
        """Test API permission classes."""

        {% for model in models %}
        {% if model.api and model.api.permissions %}
        def test_{{ model.name|lower }}_permissions(self, api_client, user, {{ model.name|lower }}):
            """Test {{ model.name }} API permissions."""
            url = reverse('{{ app_name }}:{{ model.name|lower }}-detail', kwargs={'pk': {{ model.name|lower }}.pk})

            # Test without authentication
            response = api_client.get(url)
            assert response.status_code == status.HTTP_401_UNAUTHORIZED

            # Test with authentication but without permission
            api_client.force_authenticate(user=user)
            response = api_client.get(url)

            {% if 'IsAuthenticated' in model.api.permissions %}
            assert response.status_code == status.HTTP_200_OK
            {% else %}
            assert response.status_code == status.HTTP_403_FORBIDDEN
    {% endif %}

    {% endif %}
    {% endfor %}


    # Test API throttling
    {% if features.api.throttling %}
    @pytest.mark.django_db
    class TestAPIThrottling:
        """Test API throttling."""

        def test_throttle_anonymous_requests(self, api_client):
            """Test throttling for anonymous users."""
            url = reverse('{{ app_name }}:{{ models[0].name|lower }}-list')

            # Make many requests
            for i in range(101):  # Assuming 100/hour limit
                response = api_client.get(url)
                if i < 100:
                    assert response.status_code != status.HTTP_429_TOO_MANY_REQUESTS
                else:
                    assert response.status_code == status.HTTP_429_TOO_MANY_REQUESTS

        def test_throttle_authenticated_requests(self, authenticated_api_client):
            """Test throttling for authenticated users."""
            url = reverse('{{ app_name }}:{{ models[0].name|lower }}-list')

            # Authenticated users should have higher limit
            for i in range(1001):  # Assuming 1000/hour limit
                response = authenticated_api_client.get(url)
                if i < 1000:
                    assert response.status_code != status.HTTP_429_TOO_MANY_REQUESTS
    {% endif %}


    # Test API versioning
    {% if features.api.versioning %}
    @pytest.mark.django_db
    class TestAPIVersioning:
        """Test API versioning."""

        def test_version_in_header(self, authenticated_api_client):
            """Test API version in header."""
            url = reverse('{{ app_name }}:{{ models[0].name|lower }}-list')

            # Test v1
            response = authenticated_api_client.get(
                url,
                HTTP_ACCEPT='application/json; version=v1'
            )
            assert response.status_code == status.HTTP_200_OK

        def test_version_in_url(self, authenticated_api_client):
            """Test API version in URL."""
            url = '/api/v1/{{ app_name }}/{{ models[0].name|lower|plural }}/'
            response = authenticated_api_client.get(url)
            assert response.status_code == status.HTTP_200_OK
    {% endif %}