"""
Test fixtures for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import pytest
from django.contrib.auth import get_user_model
from django.test import Client
from django.urls import reverse
from rest_framework.test import APIClient
import json

from ..models import {{ models|map(attribute='name')|join(', ') }}
from .factories import *

User = get_user_model()


# User fixtures
@pytest.fixture
def user():
    """Create a regular user."""
    return User.objects.create_user(
        username='testuser',
        email='testuser@example.com',
        password='testpass123'
    )


@pytest.fixture
def staff_user():
    """Create a staff user."""
    return User.objects.create_user(
        username='staffuser',
        email='staff@example.com',
        password='testpass123',
        is_staff=True
    )


@pytest.fixture
def superuser():
    """Create a superuser."""
    return User.objects.create_superuser(
        username='admin',
        email='admin@example.com',
        password='testpass123'
    )


# Client fixtures
@pytest.fixture
def client():
    """Django test client."""
    return Client()


@pytest.fixture
def authenticated_client(client, user):
    """Authenticated Django test client."""
    client.force_login(user)
    return client


@pytest.fixture
def staff_client(client, staff_user):
    """Staff authenticated Django test client."""
    client.force_login(staff_user)
    return client


@pytest.fixture
def admin_client(client, superuser):
    """Admin authenticated Django test client."""
    client.force_login(superuser)
    return client


@pytest.fixture
def api_client():
    """DRF API client."""
    return APIClient()


@pytest.fixture
def authenticated_api_client(api_client, user):
    """Authenticated DRF API client."""
    api_client.force_authenticate(user=user)
    return api_client


# Model fixtures
{% for model in models %}
@pytest.fixture
def {{ model.name|lower }}():
    """Create a {{ model.name }} instance."""
    return {{ model.name }}Factory()


@pytest.fixture
def {{ model.name|lower }}_list():
    """Create a list of {{ model.name }} instances."""
    return {{ model.name }}Factory.create_batch(5)


@pytest.fixture
def {{ model.name|lower }}_dict():
    """{{ model.name }} data as dictionary."""
    return factory.build(dict, FACTORY_CLASS={{ model.name }}Factory)


{% endfor %}

# Complex fixtures
{% for model in models %}
{% if model.relationships %}
@pytest.fixture
def {{ model.name|lower }}_with_relations():
    """Create {{ model.name }} with all relationships."""
    instance = {{ model.name }}Factory()

    {% for rel in model.relationships %}
    {% if rel.type == 'ForeignKey' %}
    # Create related {{ rel.to }}
    instance.{{ rel.field }} = {{ rel.to }}Factory()
    instance.save()
    {% elif rel.type == 'ManyToManyField' %}
    # Create related {{ rel.to }} objects
    {{ rel.field }}_objects = {{ rel.to }}Factory.create_batch(3)
    instance.{{ rel.field }}.set({{ rel.field }}_objects)
    {% elif rel.type == 'OneToOneField' %}
    # Create related {{ rel.to }}
    {{ rel.to }}Factory({{ rel.reverse_name|default(model.name|lower) }}=instance)
    {% endif %}
    {% endfor %}

    return instance


{% endif %}
{% endfor %}

# Request fixtures
@pytest.fixture
def mock_request(user):
    """Mock request object."""
    from django.http import HttpRequest
    request = HttpRequest()
    request.user = user
    request.META = {
        'HTTP_HOST': 'testserver',
        'HTTP_USER_AGENT': 'test',
    }
    return request


# API fixtures
{% if features.api.rest_framework %}
{% for model in models %}
@pytest.fixture
def {{ model.name|lower }}_api_url():
    """API URL for {{ model.name }}."""
    return reverse('{{ app_name }}:{{ model.name|lower }}-list')


@pytest.fixture
def {{ model.name|lower }}_detail_api_url({{ model.name|lower }}):
    """API detail URL for {{ model.name }}."""
    return reverse('{{ app_name }}:{{ model.name|lower }}-detail', kwargs={'pk': {{ model.name|lower }}.pk})


    {% endfor %}
    {% endif %}

    # Form data fixtures
    {% for model in models %}
    @pytest.fixture
    def {{ model.name|lower }}_form_data():
        """Valid form data for {{ model.name }}."""
        data = factory.build(dict, FACTORY_CLASS={{ model.name }}Factory)
        # Remove non-form fields
        data.pop('id', None)
        data.pop('created_at', None)
        data.pop('updated_at', None)

        # Handle relationships
        {% for field in model.fields %}
        {% if field.type == 'ForeignKey' %}
        if '{{ field.name }}' in data:
            data['{{ field.name }}'] = data['{{ field.name }}'].pk if data['{{ field.name }}'] else None
        {% elif field.type == 'ManyToManyField' %}
        # M2M handled separately after save
        data.pop('{{ field.name }}', None)
        {% elif field.type in ['FileField', 'ImageField'] %}
        # File fields need special handling
        data.pop('{{ field.name }}', None)
        {% endif %}
        {% endfor %}

        return data


    {% endfor %}

    # Batch fixtures
    @pytest.fixture
    def {{ app_name }}_dataset():
        """Create a complete dataset for {{ app_name }}."""
        return create_complete_{{ app_name }}_dataset()


    # Utility fixtures
    @pytest.fixture
    def captured_emails(settings):
        """Capture emails sent during tests."""
        settings.EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'
        from django.core import mail
        mail.outbox = []
        return mail.outbox


    @pytest.fixture
    def mock_celery_task(mocker):
        """Mock Celery task execution."""
        return mocker.patch('celery.task.Task.apply_async')


    @pytest.fixture
    def temp_media_root(settings, tmp_path):
        """Temporary media root for file uploads."""
        settings.MEDIA_ROOT = tmp_path / 'media'
        settings.MEDIA_ROOT.mkdir()
        return settings.MEDIA_ROOT


    # GraphQL fixtures
    {% if features.api.graphql %}
    @pytest.fixture
    def graphql_client():
        """GraphQL test client."""
        from graphene_django.utils.testing import GraphQLTestCase
        return GraphQLTestCase().client


    @pytest.fixture
    def graphql_request_factory():
        """Factory for GraphQL requests."""
        def factory(query, variables=None, user=None):
            from django.test import RequestFactory
            from graphene_django.views import GraphQLView

            rf = RequestFactory()
            request = rf.post(
                '/graphql/',
                data=json.dumps({
                    'query': query,
                    'variables': variables or {}
                }),
                content_type='application/json'
            )

            if user:
                request.user = user

            return request

        return factory
    {% endif %}