"""
Serializer tests for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import pytest
from django.contrib.auth import get_user_model
from rest_framework.exceptions import ValidationError
import json

from ..models import {{ models|map(attribute='name')|join(', ') }}
from ..serializers import {{ models|map(attribute='name')|map('append', 'Serializer')|join(', ') }}

User = get_user_model()


{% for model in models %}
@pytest.mark.django_db
class Test{{ model.name }}Serializer:
    """Test {{ model.name }}Serializer."""

    def test_serialize_{{ model.name|lower }}(self, {{ model.name|lower }}):
        """Test serializing a {{ model.name }} instance."""
        serializer = {{ model.name }}Serializer({{ model.name|lower }})
        data = serializer.data

        assert data['id'] == {{ model.name|lower }}.pk
        {% for field in model.fields[:5] %}
        {% if field.name not in ['created_at', 'updated_at'] and field.type not in ['ManyToManyField', 'FileField', 'ImageField'] %}
        assert '{{ field.name }}' in data
    {% endif %}
    {% endfor %}

    def test_deserialize_{{ model.name|lower }}(self, {{ model.name|lower }}_form_data):
        """Test deserializing data to create {{ model.name }}."""
        serializer = {{ model.name }}Serializer(data={{ model.name|lower }}_form_data)

        assert serializer.is_valid(), serializer.errors

        instance = serializer.save()
        assert isinstance(instance, {{ model.name }})
        {% for field in model.fields[:3] %}
        {% if field.name in model.name|lower + '_form_data' and field.type not in ['ManyToManyField', 'FileField', 'ImageField'] %}
        assert instance.{{ field.name }} == {{ model.name|lower }}_form_data['{{ field.name }}']
    {% endif %}
    {% endfor %}

    def test_update_{{ model.name|lower }}(self, {{ model.name|lower }}, {{ model.name|lower }}_form_data):
        """Test updating {{ model.name }} through serializer."""
        # Modify some data
        update_data = {{ model.name|lower }}_form_data.copy()
        {% for field in model.fields[:1] %}
        {% if field.name in ['name', 'title', 'description'] %}
        update_data['{{ field.name }}'] = 'Updated Value'
        {% endif %}
        {% endfor %}

        serializer = {{ model.name }}Serializer({{ model.name|lower }}, data=update_data)
        assert serializer.is_valid(), serializer.errors

        updated = serializer.save()
        {% for field in model.fields[:1] %}
        {% if field.name in ['name', 'title', 'description'] %}
        assert updated.{{ field.name }} == 'Updated Value'
    {% endif %}
    {% endfor %}

    def test_partial_update_{{ model.name|lower }}(self, {{ model.name|lower }}):
        """Test partial update of {{ model.name }}."""
        partial_data = {
            {% for field in model.fields[:1] %}
            {% if field.name in ['name', 'title', 'status'] %}
            '{{ field.name }}': 'Partially Updated',
            {% endif %}
            {% endfor %}
        }

        serializer = {{ model.name }}Serializer({{ model.name|lower }}, data=partial_data, partial=True)
        assert serializer.is_valid(), serializer.errors

        updated = serializer.save()
        {% for field in model.fields[:1] %}
        {% if field.name in ['name', 'title', 'status'] %}
        assert updated.{{ field.name }} == 'Partially Updated'
    {% endif %}
    {% endfor %}

    {% if model.validation_rules %}
    def test_validation_rules(self):
        """Test serializer validation rules."""
        invalid_data = {{ model.name|lower }}_form_data.copy()

        {% for rule in model.validation_rules %}
        # Test {{ rule.description }}
        invalid_data['{{ rule.field }}'] = {{ rule.invalid_value }}

        serializer = {{ model.name }}Serializer(data=invalid_data)
        assert not serializer.is_valid()
        assert '{{ rule.field }}' in serializer.errors
    {% endfor %}
    {% endif %}

    {% if model.api and model.api.read_only_fields %}
    def test_read_only_fields(self, {{ model.name|lower }}):
        """Test read-only fields are not writable."""
        data = {{ model.name }}Serializer({{ model.name|lower }}).data

        # Try to modify read-only fields
        {% for field in model.api.read_only_fields %}
        data['{{ field }}'] = 'Modified Value'
        {% endfor %}

        serializer = {{ model.name }}Serializer({{ model.name|lower }}, data=data)
        assert serializer.is_valid()

        updated = serializer.save()
        {% for field in model.api.read_only_fields %}
        # Read-only fields should not be changed
        assert updated.{{ field }} == {{ model.name|lower }}.{{ field }}
        {% endfor %}
        {% endif %}

        {% if model.api and model.api.write_only_fields %}
        def test_write_only_fields(self, {{ model.name|lower }}_form_data):
            """Test write-only fields are not readable."""
            # Add write-only field
            {% for field in model.api.write_only_fields %}
            {{ model.name|lower }}_form_data['{{ field }}'] = 'secret_value'
            {% endfor %}

            serializer = {{ model.name }}Serializer(data={{ model.name|lower }}_form_data)
            assert serializer.is_valid()

            instance = serializer.save()

            # Serialize the instance
            read_serializer = {{ model.name }}Serializer(instance)
            data = read_serializer.data

            # Write-only fields should not be in output
            {% for field in model.api.write_only_fields %}
            assert '{{ field }}' not in data
        {% endfor %}
        {% endif %}

        {% if model.relationships %}
        def test_nested_serialization(self, {{ model.name|lower }}_with_relations):
            """Test serialization with nested relationships."""
            serializer = {{ model.name }}Serializer({{ model.name|lower }}_with_relations)
            data = serializer.data

            {% for rel in model.relationships %}
            {% if rel.type == 'ForeignKey' %}
            # Check foreign key is serialized
            assert '{{ rel.field }}_id' in data
            assert '{{ rel.field }}_detail' in data
            {% elif rel.type == 'ManyToManyField' %}
            # Check many-to-many is serialized
            assert '{{ rel.field }}_detail' in data
            assert isinstance(data['{{ rel.field }}_detail'], list)
        {% endif %}
        {% endfor %}
        {% endif %}

        def test_serializer_context(self, {{ model.name|lower }}, user):
            """Test serializer with context."""
            context = {'request': type('Request', (), {'user': user})}
            serializer = {{ model.name }}Serializer({{ model.name|lower }}, context=context)

            # Context should be available in serializer
            assert serializer.context['request'].user == user

        {% if model.api and model.api.computed_fields %}
        def test_computed_fields(self, {{ model.name|lower }}):
            """Test computed/method fields."""
            serializer = {{ model.name }}Serializer({{ model.name|lower }})
            data = serializer.data

            {% for field in model.api.computed_fields %}
            # Check computed field {{ field.name }}
            assert '{{ field.name }}' in data
            {% if field.test_value %}
            assert data['{{ field.name }}'] == {{ field.test_value }}
        {% endif %}
        {% endfor %}
        {% endif %}

        def test_serializer_create_with_user(self, {{ model.name|lower }}_form_data, user):
            """Test creating with current user from context."""
            context = {'request': type('Request', (), {'user': user})}
            serializer = {{ model.name }}Serializer(data={{ model.name|lower }}_form_data, context=context)

            assert serializer.is_valid()
            instance = serializer.save()

            {% if model.features and model.features.audit %}
            assert instance.created_by == user
        {% endif %}

        def test_serializer_update_with_user(self, {{ model.name|lower }}, {{ model.name|lower }}_form_data, user):
            """Test updating with current user from context."""
            context = {'request': type('Request', (), {'user': user})}
            serializer = {{ model.name }}Serializer(
            {{ model.name|lower }},
            data={{ model.name|lower }}_form_data,
            context=context
            )

            assert serializer.is_valid()
            instance = serializer.save()

            {% if model.features and model.features.audit %}
            assert instance.updated_by == user
    {% endif %}


    {% if model.api and model.api.list_serializer %}
    @pytest.mark.django_db
    class Test{{ model.name }}ListSerializer:
        """Test {{ model.name }}ListSerializer."""

        def test_list_serialization(self, {{ model.name|lower }}_list):
            """Test list serializer with minimal fields."""
            serializer = {{ model.name }}ListSerializer({{ model.name|lower }}_list, many=True)
            data = serializer.data

            assert len(data) == len({{ model.name|lower }}_list)

            # Check only essential fields are included
            for item in data:
                assert 'id' in item
                {% for field in ['name', 'title', 'status', 'created_at'] %}
                {% if field in model.fields|map(attribute='name') %}
                assert '{{ field }}' in item
                {% endif %}
                {% endfor %}

                # Check verbose fields are not included
                {% for field in model.fields %}
                {% if field.name not in ['id', 'name', 'title', 'status', 'created_at'] and field.type == 'TextField' %}
                assert '{{ field.name }}' not in item
    {% endif %}
    {% endfor %}
    {% endif %}


    {% endfor %}

    # Test serializer field types
    @pytest.mark.django_db
    class TestSerializerFields:
        """Test custom serializer fields."""

        {% for model in models %}
        {% for field in model.fields %}
        {% if field.type == 'JSONField' %}
        def test_json_field_serialization(self, {{ model.name|lower }}):
            """Test JSON field serialization."""
            # Set JSON data
            json_data = {'key': 'value', 'nested': {'data': 123}}
            {{ model.name|lower }}.{{ field.name }} = json_data
            {{ model.name|lower }}.save()

            serializer = {{ model.name }}Serializer({{ model.name|lower }})
            assert serializer.data['{{ field.name }}'] == json_data

        {% elif field.type == 'DecimalField' %}
        def test_decimal_field_serialization(self, {{ model.name|lower }}):
            """Test decimal field serialization."""
            from decimal import Decimal

            {{ model.name|lower }}.{{ field.name }} = Decimal('123.45')
            {{ model.name|lower }}.save()

            serializer = {{ model.name }}Serializer({{ model.name|lower }})
            assert serializer.data['{{ field.name }}'] == '123.45'

        {% elif field.type in ['DateField', 'DateTimeField'] %}
        def test_{{ field.type|lower }}_serialization(self, {{ model.name|lower }}):
            """Test {{ field.type }} serialization."""
            serializer = {{ model.name }}Serializer({{ model.name|lower }})
            data = serializer.data

            # Check date format
            assert '{{ field.name }}' in data
            {% if field.type == 'DateTimeField' %}
            # Should be ISO format with timezone
            assert 'T' in data['{{ field.name }}']
            {% else %}
            # Should be YYYY-MM-DD format
            assert len(data['{{ field.name }}']) == 10
            assert data['{{ field.name }}'].count('-') == 2
    {% endif %}

    {% endif %}
    {% endfor %}
    {% endfor %}