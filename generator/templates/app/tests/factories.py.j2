"""
Factory classes for {{ app_name }} app tests.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
import factory
from factory import fuzzy
from factory.django import DjangoModelFactory
from django.utils import timezone
from datetime import timedelta
import random

from ..models import {{ models|map(attribute='name')|join(', ') }}


class BaseFactory(DjangoModelFactory):
    """Base factory with common fields."""

    class Meta:
        abstract = True

    {% if has_timestamps %}
    created_at = factory.LazyFunction(timezone.now)
    updated_at = factory.LazyFunction(timezone.now)
    {% endif %}

    {% if has_audit_fields %}
    created_by = factory.SubFactory('users.factories.UserFactory')
    updated_by = factory.LazyAttribute(lambda obj: obj.created_by)
{% endif %}


{% for model in models %}
class {{ model.name }}Factory(BaseFactory):
    """Factory for {{ model.name }} model."""

    class Meta:
        model = {{ model.name }}
        django_get_or_create = {{ model.factory.get_or_create|default(['name']) if model.factory and model.factory.get_or_create else [] }}

    {% for field in model.fields %}
    {% if field.name not in ['id', 'created_at', 'updated_at', 'created_by', 'updated_by'] %}
    {% if field.type == 'CharField' %}
    {% if field.name == 'email' %}
    {{ field.name }} = factory.Faker('email')
    {% elif field.name == 'phone' %}
    {{ field.name }} = factory.Faker('phone_number')
    {% elif field.name == 'url' or field.name == 'website' %}
    {{ field.name }} = factory.Faker('url')
    {% elif field.name == 'name' or field.name == 'title' %}
    {{ field.name }} = factory.Faker('sentence', nb_words=3)
    {% elif field.name == 'first_name' %}
    {{ field.name }} = factory.Faker('first_name')
    {% elif field.name == 'last_name' %}
    {{ field.name }} = factory.Faker('last_name')
    {% elif field.name == 'company' %}
    {{ field.name }} = factory.Faker('company')
    {% elif field.name == 'address' %}
    {{ field.name }} = factory.Faker('address')
    {% elif field.name == 'city' %}
    {{ field.name }} = factory.Faker('city')
    {% elif field.name == 'country' %}
    {{ field.name }} = factory.Faker('country')
    {% elif field.choices %}
    {{ field.name }} = factory.fuzzy.FuzzyChoice([choice[0] for choice in {{ field.choices }}])
    {% else %}
    {{ field.name }} = factory.Faker('text', max_nb_chars={{ field.max_length|default(100) }})
    {% endif %}
    {% elif field.type == 'TextField' %}
    {% if field.name == 'description' %}
    {{ field.name }} = factory.Faker('paragraph', nb_sentences=5)
    {% elif field.name == 'content' %}
    {{ field.name }} = factory.Faker('text', max_nb_chars=1000)
    {% else %}
    {{ field.name }} = factory.Faker('text')
    {% endif %}
    {% elif field.type == 'EmailField' %}
    {{ field.name }} = factory.Faker('email')
    {% elif field.type == 'URLField' %}
    {{ field.name }} = factory.Faker('url')
    {% elif field.type == 'SlugField' %}
    {{ field.name }} = factory.Faker('slug')
    {% elif field.type == 'IntegerField' or field.type == 'PositiveIntegerField' %}
    {% if field.name == 'age' %}
    {{ field.name }} = factory.fuzzy.FuzzyInteger(18, 80)
    {% elif field.name == 'quantity' or field.name == 'count' %}
    {{ field.name }} = factory.fuzzy.FuzzyInteger(1, 100)
    {% elif field.name == 'price' %}
    {{ field.name }} = factory.fuzzy.FuzzyInteger(100, 10000)
    {% else %}
    {{ field.name }} = factory.fuzzy.FuzzyInteger(0, 1000)
    {% endif %}
    {% elif field.type == 'DecimalField' %}
    {% if field.name == 'price' or field.name == 'amount' %}
    {{ field.name }} = factory.fuzzy.FuzzyDecimal(0.01, 999.99, precision=2)
    {% elif field.name == 'rating' %}
    {{ field.name }} = factory.fuzzy.FuzzyDecimal(1.0, 5.0, precision=1)
    {% else %}
    {{ field.name }} = factory.fuzzy.FuzzyDecimal(0.0, 100.0, precision=2)
    {% endif %}
    {% elif field.type == 'BooleanField' %}
    {{ field.name }} = factory.Faker('boolean')
    {% elif field.type == 'DateField' %}
    {% if field.name == 'birth_date' or field.name == 'date_of_birth' %}
    {{ field.name }} = factory.Faker('date_of_birth', minimum_age=18, maximum_age=80)
    {% else %}
    {{ field.name }} = factory.Faker('date_between', start_date='-1y', end_date='today')
    {% endif %}
    {% elif field.type == 'DateTimeField' %}
    {% if field.auto_now_add or field.auto_now %}
    # Auto-generated field
    {% else %}
    {{ field.name }} = factory.Faker('date_time_between', start_date='-1y', end_date='now', tzinfo=timezone.utc)
    {% endif %}
    {% elif field.type == 'TimeField' %}
    {{ field.name }} = factory.Faker('time')
    {% elif field.type == 'DurationField' %}
    {{ field.name }} = timedelta(hours=factory.fuzzy.FuzzyInteger(1, 24).fuzz())
    {% elif field.type == 'FileField' %}
    {{ field.name }} = factory.django.FileField(filename='test_file.pdf')
    {% elif field.type == 'ImageField' %}
    {{ field.name }} = factory.django.ImageField(width=1024, height=768)
    {% elif field.type == 'JSONField' %}
    {{ field.name }} = factory.LazyFunction(lambda: {'key': 'value', 'number': random.randint(1, 100)})
    {% elif field.type == 'UUIDField' %}
    {{ field.name }} = factory.Faker('uuid4')
    {% elif field.type == 'ForeignKey' %}
    {% if field.to == 'User' or field.to == 'auth.User' %}
    {{ field.name }} = factory.SubFactory('users.factories.UserFactory')
    {% else %}
    {{ field.name }} = factory.SubFactory('{{ app_name }}.factories.{{ field.to }}Factory')
    {% endif %}
    {% elif field.type == 'OneToOneField' %}
    {{ field.name }} = factory.SubFactory('{{ app_name }}.factories.{{ field.to }}Factory')
{% elif field.type == 'ManyToManyField' %}
# M2M handled in post_generation
{% endif %}
{% endif %}
{% endfor %}

{% for field in model.fields %}
{% if field.type == 'ManyToManyField' %}
@factory.post_generation
def {{ field.name }}(obj, create, extracted, **kwargs):
    """Handle {{ field.name }} many-to-many relationship."""
    if not create:
        return

    if extracted:
        # A list of items was passed
        for item in extracted:
            obj.{{ field.name }}.add(item)
    else:
        # Create some related items
        {% if field.to == 'User' or field.to == 'auth.User' %}
        from users.factories import UserFactory
        for _ in range(random.randint(0, 3)):
            obj.{{ field.name }}.add(UserFactory())
        {% else %}
        for _ in range(random.randint(0, 3)):
            obj.{{ field.name }}.add({{ field.to }}Factory())
{% endif %}

{% endif %}
{% endfor %}

{% if model.factory and model.factory.traits %}
# Traits
{% for trait in model.factory.traits %}
class Params:
{{ trait.name }} = factory.Trait(
{% for field, value in trait.fields.items() %}
{{ field }}={{ value }},
{% endfor %}
)

{% endfor %}
{% endif %}


{% if model.factory and model.factory.variations %}
# Factory variations for {{ model.name }}
{% for variation in model.factory.variations %}
class {{ variation.name }}({{ model.name }}Factory):
    """{{ variation.description }}"""

    {% for field, value in variation.fields.items() %}
    {{ field }} = {{ value }}
    {% endfor %}


    {% endfor %}
    {% endif %}
    {% endfor %}

    # Batch creation helpers
{% for model in models %}
def create_{{ model.name|lower }}_batch(size=10, **kwargs):
    """Create a batch of {{ model.name }} instances."""
    return {{ model.name }}Factory.create_batch(size, **kwargs)


def build_{{ model.name|lower }}_batch(size=10, **kwargs):
    """Build a batch of {{ model.name }} instances without saving."""
    return {{ model.name }}Factory.build_batch(size, **kwargs)


{% endfor %}

# Complex object creation helpers
{% if has_related_models %}
def create_complete_{{ app_name }}_dataset():
    """Create a complete dataset with all related objects."""
    data = {}

    {% for model in models %}
    # Create {{ model.name }} instances
    data['{{ model.name|lower|plural }}'] = create_{{ model.name|lower }}_batch(5)

    {% endfor %}

    # Create relationships
    {% for model in models %}
    {% for field in model.fields %}
    {% if field.type == 'ForeignKey' and field.to in models|map(attribute='name') %}
    # Link {{ model.name }} to {{ field.to }}
    for obj in data['{{ model.name|lower|plural }}']:
        obj.{{ field.name }} = random.choice(data['{{ field.to|lower|plural }}'])
        obj.save()

    {% endif %}
    {% endfor %}
    {% endfor %}

    return data
{% endif %}