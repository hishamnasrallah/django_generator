"""
Views for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
{% for import_type, import_list in imports.items() %}{% if import_list %}
# {{ import_type|title }} imports
{% for import_line in import_list %}{{ import_line }}
{% endfor %}{% endif %}{% endfor %}


{% if view_config.mixins %}
# Base mixins
{% if 'BulkModelViewSet' in view_config.mixins %}
class BulkModelViewSet(viewsets.ModelViewSet):
    """ViewSet with bulk operations support."""

    @action(detail=False, methods=['post'])
    def bulk_delete(self, request):
        """Delete multiple objects."""
        ids = request.data.get('ids', [])
        if not ids:
            return Response(
                {'error': 'No IDs provided'},
                status=status.HTTP_400_BAD_REQUEST
            )

        queryset = self.get_queryset().filter(id__in=ids)
        count = queryset.count()
        queryset.delete()

        return Response(
            {'deleted': count},
            status=status.HTTP_204_NO_CONTENT
        )

    @action(detail=False, methods=['post'])
    def bulk_update(self, request):
        """Update multiple objects."""
        ids = request.data.get('ids', [])
        data = request.data.get('data', {})

        if not ids or not data:
            return Response(
                {'error': 'IDs and data are required'},
                status=status.HTTP_400_BAD_REQUEST
            )

        queryset = self.get_queryset().filter(id__in=ids)
        count = queryset.update(**data)

        return Response(
            {'updated': count},
            status=status.HTTP_200_OK
        )
{% endif %}

{% if 'SoftDeleteMixin' in view_config.mixins %}
class SoftDeleteMixin:
    """Mixin for soft delete functionality."""

    def perform_destroy(self, instance):
        """Soft delete instead of hard delete."""
        instance.is_deleted = True
        instance.save()

    def get_queryset(self):
        """Filter out soft deleted objects by default."""
        qs = super().get_queryset()
        if self.action == 'list':
            return qs.filter(is_deleted=False)
        return qs

    @action(detail=True, methods=['post'])
    def restore(self, request, pk=None):
        """Restore a soft deleted object."""
        instance = self.get_object()
        instance.is_deleted = False
        instance.save()
        serializer = self.get_serializer(instance)
        return Response(serializer.data)
{% endif %}
{% endif %}


{% for model in models %}
{% set viewset_config = view_config.viewsets[model.name] %}
class {{ model.name }}ViewSet({% if viewset_config.mixins %}{{ viewset_config.mixins|join(', ') }}, {% endif %}viewsets.{{ viewset_config.type }}):
    """
    ViewSet for {{ model.name }} model.
    {% if model.api and model.api.description %}

    {{ model.api.description }}
    {% endif %}
    """
    queryset = {{ model.name }}.objects.all()
    serializer_class = {{ model.name }}Serializer
    {% if viewset_config.permissions %}
    permission_classes = [{{ viewset_config.permissions|join(', ') }}]
    {% else %}
    permission_classes = [IsAuthenticated]
    {% endif %}
    {% if viewset_config.authentication %}
    authentication_classes = [{{ viewset_config.authentication|join(', ') }}]
    {% endif %}
    {% if viewset_config.filterset_fields or viewset_config.search_fields or viewset_config.ordering_fields %}
    filter_backends = [
        {% if viewset_config.filterset_fields %}DjangoFilterBackend,{% endif %}
        {% if viewset_config.search_fields %}SearchFilter,{% endif %}
        {% if viewset_config.ordering_fields %}OrderingFilter,{% endif %}
    ]
    {% endif %}
    {% if viewset_config.filterset_fields %}
    filterset_fields = {{ viewset_config.filterset_fields }}
    {% endif %}
    {% if viewset_config.search_fields %}
    search_fields = {{ viewset_config.search_fields }}
    {% endif %}
    {% if viewset_config.ordering_fields %}
    ordering_fields = {{ viewset_config.ordering_fields }}
    ordering = ['-created_at']  # Default ordering
    {% endif %}
    {% if viewset_config.throttle %}
    throttle_classes = [{{ viewset_config.throttle }}]
    {% endif %}
    {% if viewset_config.pagination %}
    pagination_class = {{ viewset_config.pagination }}
    {% endif %}

    def get_queryset(self):
        """
        Optimize queryset with select_related and prefetch_related.
        """
        queryset = super().get_queryset()

        {% if model.api and model.api.select_related %}
        # Optimize foreign key lookups
        queryset = queryset.select_related({{ model.api.select_related|join(', ') }})
        {% endif %}

        {% if model.api and model.api.prefetch_related %}
        # Optimize reverse foreign key and many-to-many lookups
        queryset = queryset.prefetch_related({{ model.api.prefetch_related|join(', ') }})
        {% endif %}

        {% if features.enterprise.multitenancy %}
        # Filter by tenant
        if hasattr(self.request, 'tenant'):
            queryset = queryset.filter(tenant=self.request.tenant)
        {% endif %}

        {% if model.features and model.features.soft_delete %}
        # Filter out soft deleted objects
        if self.action != 'deleted':
            queryset = queryset.filter(is_deleted=False)
        {% endif %}

        return queryset

    def get_serializer_class(self):
        """Return appropriate serializer based on action."""
        {% if model.api and model.api.serializer_classes %}
        if self.action == 'list':
            return {{ model.name }}ListSerializer
        elif self.action in ['create', 'update', 'partial_update']:
            return {{ model.name }}WriteSerializer
        elif self.action == 'retrieve':
            return {{ model.name }}DetailSerializer
        {% endif %}
        return self.serializer_class

    {% if model.features and model.features.audit %}
    def perform_create(self, serializer):
        """Set created_by on create."""
        serializer.save(created_by=self.request.user)

    def perform_update(self, serializer):
        """Set updated_by on update."""
        serializer.save(updated_by=self.request.user)
    {% endif %}

    {% if viewset_config.cache %}
    @extend_schema(
        summary="List {{ model.name|plural }}",
        description="Retrieve a list of {{ model.name|plural }}.",
        tags=['{{ app_name }}']
    )
    @cache_page(60 * 15)  # Cache for 15 minutes
    @vary_on_headers('Authorization')
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @extend_schema(
        summary="Retrieve {{ model.name }}",
        description="Retrieve a single {{ model.name }} by ID.",
        tags=['{{ app_name }}']
    )
    @cache_page(60 * 15)  # Cache for 15 minutes
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)
    {% endif %}

    {% for action in viewset_config.actions %}
    @extend_schema(
        summary="{{ action.description|default(action.name|title_case, true) }}",
        description="{{ action.description|default('Custom action: ' + action.name, true) }}",
        tags=['{{ app_name }}'],
        {% if action.serializer_class %}
        request={{ action.serializer_class }},
        responses={200: {{ action.serializer_class }}},
        {% endif %}
    )
    @action(
        detail={{ action.detail|lower }},
        methods={{ action.methods }},
        {% if action.permission_classes %}
        permission_classes=[{{ action.permission_classes|join(', ') }}],
        {% endif %}
        {% if action.serializer_class %}
        serializer_class={{ action.serializer_class }},
        {% endif %}
    )
    def {{ action.name }}(self, request, {% if action.detail %}pk=None{% endif %}):
        """{{ action.description|default(action.name + ' action', true) }}"""
        {% if action.detail %}
        instance = self.get_object()
        {% endif %}

        {% if action.implementation %}
        {{ action.implementation|indent(8) }}
        {% else %}
        # TODO: Implement {{ action.name }} action
        return Response({'status': 'not implemented'}, status=status.HTTP_501_NOT_IMPLEMENTED)
    {% endif %}
    {% endfor %}

    {% if model.api and model.api.allow_bulk %}
    @extend_schema(
        summary="Bulk create {{ model.name|plural }}",
        description="Create multiple {{ model.name }} objects in a single request.",
        tags=['{{ app_name }}'],
    )
    @action(detail=False, methods=['post'])
    def bulk_create(self, request):
        """Create multiple objects in one request."""
        serializer = self.get_serializer(data=request.data, many=True)
        serializer.is_valid(raise_exception=True)

        with transaction.atomic():
            instances = serializer.save()

        return Response(
            self.get_serializer(instances, many=True).data,
            status=status.HTTP_201_CREATED
        )
    {% endif %}

    {% if model.api and model.api.export %}
    @extend_schema(
        summary="Export {{ model.name|plural }}",
        description="Export {{ model.name }} data in various formats.",
        tags=['{{ app_name }}'],
        parameters=[
            OpenApiParameter(
                name='format',
                description='Export format',
                required=False,
                type=str,
                enum=['csv', 'excel', 'json']
            ),
        ],
    )
    @action(detail=False, methods=['get'])
    def export(self, request):
        """Export data in various formats."""
        format_type = request.query_params.get('format', 'csv')
        queryset = self.filter_queryset(self.get_queryset())

        if format_type == 'csv':
            # TODO: Implement CSV export
            pass
        elif format_type == 'excel':
            # TODO: Implement Excel export
            pass
        else:
            # JSON export
            serializer = self.get_serializer(queryset, many=True)
            return Response(serializer.data)
    {% endif %}

    {% if model.api and model.api.statistics %}
    @extend_schema(
        summary="{{ model.name }} statistics",
        description="Get statistical data for {{ model.name|plural }}.",
        tags=['{{ app_name }}'],
    )
    @action(detail=False, methods=['get'])
    def statistics(self, request):
        """Return statistical data."""
        queryset = self.filter_queryset(self.get_queryset())

        stats = {
            'total': queryset.count(),
            {% for stat in model.api.statistics %}
            '{{ stat.name }}': queryset.aggregate({{ stat.aggregation }})['{{ stat.field }}__{{ stat.function }}'],
            {% endfor %}
        }

        return Response(stats)
{% endif %}


{% endfor %}

{% if view_config.api_views %}
# Custom API Views
{% for view in view_config.api_views %}
class {{ view.name }}(APIView):
    """
    {{ view.description|default(view.name + ' API view', true) }}
    """
    {% if view.permission_classes %}
    permission_classes = [{{ view.permission_classes|join(', ') }}]
    {% endif %}
    {% if view.authentication_classes %}
    authentication_classes = [{{ view.authentication_classes|join(', ') }}]
    {% endif %}

    {% for method in view.methods %}
    @extend_schema(
        summary="{{ view.description|default(view.name + ' ' + method, true) }}",
        tags=['{{ app_name }}'],
        {% if view.request_serializer %}
        request={{ view.request_serializer }},
        {% endif %}
        {% if view.response_serializer %}
        responses={200: {{ view.response_serializer }}},
        {% endif %}
    )
    def {{ method|lower }}(self, request):
        """Handle {{ method }} request."""
        {% if view[method|lower + '_implementation'] %}
        {{ view[method|lower + '_implementation']|indent(8) }}
        {% else %}
        # TODO: Implement {{ method }} handler
        return Response({'status': 'not implemented'}, status=status.HTTP_501_NOT_IMPLEMENTED)
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}