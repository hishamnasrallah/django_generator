"""
API throttling classes for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from rest_framework import throttling
from django.core.cache import cache
import hashlib


class BurstRateThrottle(throttling.UserRateThrottle):
    """
    Throttle for burst requests - allows short bursts of activity.
    """
    scope = 'burst'
    rate = '60/min'


class SustainedRateThrottle(throttling.UserRateThrottle):
    """
    Throttle for sustained requests - limits over longer period.
    """
    scope = 'sustained'
    rate = '1000/hour'


class DailyRateThrottle(throttling.UserRateThrottle):
    """
    Daily rate limit throttle.
    """
    scope = 'daily'
    rate = '10000/day'


class AnonBurstRateThrottle(throttling.AnonRateThrottle):
    """
    Throttle for anonymous burst requests.
    """
    scope = 'anon_burst'
    rate = '20/min'


class AnonSustainedRateThrottle(throttling.AnonRateThrottle):
    """
    Throttle for anonymous sustained requests.
    """
    scope = 'anon_sustained'
    rate = '100/hour'


{% for model in models if model and model.get('name') %}
{% set model_name = model.get('name', 'Model') %}
{% set model_api = model.get('api', {}) if model else {} %}
{% if model_api.get('throttle') %}
class {{ model_name }}RateThrottle(throttling.UserRateThrottle):
    """
    Custom throttle for {{ model_name }} endpoints.
    """
    scope = '{{ model_name|lower }}'
    rate = '{{ model_api.get('throttle', '100/hour') }}'


{% endif %}
{% endfor %}

class PerViewRateThrottle(throttling.BaseThrottle):
    """
    Throttle that allows different rates per view.
    """

    cache_format = 'throttle_%(scope)s_%(ident)s'

    def __init__(self):
        self.rate = self.get_rate()
        self.num_requests, self.duration = self.parse_rate(self.rate)

    def get_rate(self):
        """
        Get rate from view or default.
        """
        if hasattr(self.view, 'throttle_rate'):
            return self.view.throttle_rate
        return '100/hour'

    def parse_rate(self, rate):
        """
        Parse rate string like '100/hour' into number and duration.
        """
        if rate is None:
            return (None, None)
        num, period = rate.split('/')
        num_requests = int(num)
        duration = {
            's': 1, 'sec': 1, 'second': 1,
            'm': 60, 'min': 60, 'minute': 60,
            'h': 3600, 'hour': 3600,
            'd': 86400, 'day': 86400,
        }[period]
        return (num_requests, duration)

    def get_cache_key(self, request, view):
        """
        Generate cache key for throttle.
        """
        if request.user.is_authenticated:
            ident = request.user.pk
        else:
            ident = self.get_ident(request)

        scope = view.__class__.__name__
        return self.cache_format % {'scope': scope, 'ident': ident}

    def get_ident(self, request):
        """
        Get unique identifier for request.
        """
        xff = request.META.get('HTTP_X_FORWARDED_FOR')
        remote_addr = request.META.get('REMOTE_ADDR')
        num_proxies = getattr(settings, 'NUM_PROXIES', 0)

        if num_proxies is not None:
            if num_proxies == 0 or xff is None:
                return remote_addr
            addrs = xff.split(',')
            client_addr = addrs[-min(num_proxies, len(addrs))]
            return client_addr.strip()

        return ''.join(xff.split()) if xff else remote_addr

    def allow_request(self, request, view):
        """
        Check if request should be allowed.
        """
        if self.rate is None:
            return True

        self.key = self.get_cache_key(request, view)
        if self.key is None:
            return True

        self.history = cache.get(self.key, [])
        self.now = time.time()

        # Drop old requests from history
        while self.history and self.history[-1] <= self.now - self.duration:
            self.history.pop()

        if len(self.history) >= self.num_requests:
            return self.throttle_failure()

        return self.throttle_success()

    def throttle_success(self):
        """
        Add request to history and return success.
        """
        self.history.insert(0, self.now)
        cache.set(self.key, self.history, self.duration)
        return True

    def throttle_failure(self):
        """
        Return throttle failure.
        """
        return False

    def wait(self):
        """
        Return recommended wait time.
        """
        if self.history:
            remaining_duration = self.duration - (self.now - self.history[-1])
        else:
            remaining_duration = self.duration

        available_requests = self.num_requests - len(self.history) + 1
        if available_requests <= 0:
            return None

        return remaining_duration / float(available_requests)


class EndpointRateThrottle(throttling.BaseThrottle):
    """
    Throttle specific to endpoint paths.
    """

    # Define rates for specific endpoints
    endpoint_rates = {
        '/api/auth/login/': '5/min',
        '/api/auth/register/': '3/hour',
        '/api/upload/': '10/hour',
        '/api/export/': '5/day',
    }

    default_rate = '100/hour'

    def get_rate(self, request):
        """
        Get rate for specific endpoint.
        """
        path = request.path

        # Check exact match
        if path in self.endpoint_rates:
            return self.endpoint_rates[path]

        # Check prefix match
        for endpoint, rate in self.endpoint_rates.items():
            if path.startswith(endpoint):
                return rate

        return self.default_rate

    def allow_request(self, request, view):
        """
        Implement throttling logic.
        """
        # Implementation similar to PerViewRateThrottle
        # but using endpoint-specific rates
        rate = self.get_rate(request)
        # ... rest of implementation
        return True  # Placeholder


{% set features_dict = features if features else {} %}
{% if features_dict.get('api', {}).get('custom_throttles') %}
# Custom throttle classes
{% for throttle in features_dict.get('api', {}).get('custom_throttles', []) %}
class {{ throttle.get('name', 'CustomThrottle') }}(throttling.{{ throttle.get('base_class', 'UserRateThrottle') }}):
    """
    {{ throttle.get('description', 'Custom throttle class') }}
    """
    scope = '{{ throttle.get('scope', 'custom') }}'
    rate = '{{ throttle.get('rate', '100/hour') }}'

    {% if throttle.get('custom_method') %}
    def allow_request(self, request, view):
        """
        Custom throttle logic.
        """
{{ throttle.get('custom_method')|indent(8) }}
{% endif %}


{% endfor %}
{% endif %}