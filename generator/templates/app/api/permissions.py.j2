"""
API permissions for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from rest_framework import permissions
from django.contrib.auth.models import AnonymousUser

{% if models %}
from .models import {{ models|selectattr('name')|map(attribute='name')|join(', ') }}
{% endif %}


class IsOwnerOrReadOnly(permissions.BasePermission):
    """
    Object-level permission to only allow owners of an object to edit it.
    """

    def has_object_permission(self, request, view, obj):
        # Read permissions are allowed to any request
        if request.method in permissions.SAFE_METHODS:
            return True

        # Write permissions are only allowed to the owner
        owner_fields = ['owner', 'user', 'created_by', 'author']
        for field in owner_fields:
            if hasattr(obj, field):
                return getattr(obj, field) == request.user

        return False


class IsOwner(permissions.BasePermission):
    """
    Object-level permission to only allow owners of an object to access it.
    """

    def has_object_permission(self, request, view, obj):
        owner_fields = ['owner', 'user', 'created_by', 'author']
        for field in owner_fields:
            if hasattr(obj, field):
                return getattr(obj, field) == request.user

        return False


class IsStaffOrReadOnly(permissions.BasePermission):
    """
    Permission to only allow staff users to edit.
    """

    def has_permission(self, request, view):
        if request.method in permissions.SAFE_METHODS:
            return True

        return request.user and request.user.is_staff


class IsSuperuserOrReadOnly(permissions.BasePermission):
    """
    Permission to only allow superusers to edit.
    """

    def has_permission(self, request, view):
        if request.method in permissions.SAFE_METHODS:
            return True

        return request.user and request.user.is_superuser


{% set features_dict = features if features else {} %}
{% set enterprise = features_dict.get('enterprise', {}) %}
{% if enterprise.get('multitenancy') %}
class IsTenantUser(permissions.BasePermission):
    """
    Permission to only allow users of the same tenant.
    """

    def has_permission(self, request, view):
        if not request.user or not request.user.is_authenticated:
            return False

        if not hasattr(request, 'tenant'):
            return False

        # Check if user belongs to the tenant
        return request.user.tenants.filter(id=request.tenant.id).exists()

    def has_object_permission(self, request, view, obj):
        if not hasattr(obj, 'tenant'):
            return True

        return obj.tenant == request.tenant


class IsTenantAdmin(permissions.BasePermission):
    """
    Permission to only allow tenant admins.
    """

    def has_permission(self, request, view):
        if not request.user or not request.user.is_authenticated:
            return False

        if not hasattr(request, 'tenant'):
            return False

        # Check if user is admin of the tenant
        return request.tenant.admins.filter(id=request.user.id).exists()
{% endif %}


{% for model in models if model and model.get('name') %}
{% set model_name = model.get('name', 'Model') %}
{% set model_api = model.get('api', {}) if model else {} %}
{% if model_api.get('custom_permissions') %}
# Custom permissions for {{ model_name }}
{% for perm in model_api.get('custom_permissions', []) %}
class {{ perm.get('name', 'CustomPermission') }}(permissions.BasePermission):
    """
    {{ perm.get('description', 'Custom permission for ' + model_name) }}
    """

    def has_permission(self, request, view):
        """
        Check if user has permission to access the view.
        """
    {{ perm.get('has_permission', 'return True')|indent(8) }}

    def has_object_permission(self, request, view, obj):
        """
        Check if user has permission to access the object.
        """
{{ perm.get('has_object_permission', 'return True')|indent(8) }}


{% endfor %}
{% endif %}
{% endfor %}

class DynamicPermission(permissions.BasePermission):
    """
    Dynamic permission class that checks Django model permissions.
    """

    perms_map = {
        'GET': 'view',
        'OPTIONS': 'view',
        'HEAD': 'view',
        'POST': 'add',
        'PUT': 'change',
        'PATCH': 'change',
        'DELETE': 'delete',
    }

    def has_permission(self, request, view):
        if not request.user or not request.user.is_authenticated:
            return False

        # Get the model from the view
        if hasattr(view, 'get_queryset'):
            model = view.get_queryset().model
        elif hasattr(view, 'queryset'):
            model = view.queryset.model
        else:
            return True

        # Get the required permission
        perm_name = self.perms_map.get(request.method)
        if not perm_name:
            return False

        # Check permission
        app_label = model._meta.app_label
        model_name = model._meta.model_name
        permission = f'{app_label}.{perm_name}_{model_name}'

        return request.user.has_perm(permission)


class ConditionalPermission(permissions.BasePermission):
    """
    Permission class that combines multiple permissions with AND/OR logic.
    """

    def __init__(self, *permissions, require_all=True):
        self.permissions = permissions
        self.require_all = require_all

    def has_permission(self, request, view):
        if self.require_all:
            return all(
                perm().has_permission(request, view)
                for perm in self.permissions
            )
        else:
            return any(
                perm().has_permission(request, view)
                for perm in self.permissions
            )

    def has_object_permission(self, request, view, obj):
        if self.require_all:
            return all(
                perm().has_object_permission(request, view, obj)
                for perm in self.permissions
            )
        else:
            return any(
                perm().has_object_permission(request, view, obj)
                for perm in self.permissions
            )