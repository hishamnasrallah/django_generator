"""
API views for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
{% set imports_dict = imports if imports else {} %}
{% set view_cfg = view_config if view_config else {} %}
{% set project_dict = project if project else {} %}
{% set features_dict = features if features else {} %}

# REST Framework imports
{{ imports_dict.get('rest_framework', ['from rest_framework import viewsets, status'])|join('\n') }}

# Django imports
{{ imports_dict.get('django', ['from django.shortcuts import get_object_or_404'])|join('\n') }}

# App imports
{{ imports_dict.get('app', [])|join('\n') }}

# Project imports
{{ imports_dict.get('project', [])|join('\n') }}

# Python imports
{{ imports_dict.get('python', [])|join('\n') }}


{% for model in models if model %}
{% set model_name = model.get('name', 'Model') %}
{% set viewset_config = view_cfg.get('viewsets', {}).get(model_name, {}) %}
{% set viewset_type = viewset_config.get('type', 'ModelViewSet') %}
{% set model_api = model.get('api', {}) if model else {} %}

class {{ model_name }}ViewSet(
    {%- if viewset_type == 'GenericViewSet' %}
    {%- for mixin in viewset_config.get('mixins', []) %}
    mixins.{{ mixin }},
    {%- endfor %}
    viewsets.GenericViewSet
{%- elif viewset_type == 'ReadOnlyModelViewSet' %}
viewsets.ReadOnlyModelViewSet
{%- else %}
viewsets.ModelViewSet
{%- endif %}
):
    """
    ViewSet for {{ model_name }} model.

    Provides CRUD operations for {{ model_name }} instances.
    """
    queryset = {{ model_name }}.objects.all()
    serializer_class = {{ model_name }}Serializer

    {% if viewset_config.get('permissions') %}
    permission_classes = [{{ viewset_config.get('permissions')|join(', ') }}]
    {% endif %}

    {% if viewset_config.get('authentication') %}
    authentication_classes = [{{ viewset_config.get('authentication')|join(', ') }}]
    {% endif %}

    {% if viewset_config.get('filterset_fields') %}
    filterset_fields = {{ viewset_config.get('filterset_fields') }}
    {% endif %}

    {% if viewset_config.get('search_fields') %}
    search_fields = {{ viewset_config.get('search_fields') }}
    {% endif %}

    {% if viewset_config.get('ordering_fields') %}
    ordering_fields = {{ viewset_config.get('ordering_fields') }}
    ordering = ['-created_at']
    {% endif %}

    {% if viewset_config.get('pagination') %}
    pagination_class = {{ viewset_config.get('pagination') }}
    {% endif %}

    {% if viewset_config.get('throttle') %}
    throttle_classes = [{{ viewset_config.get('throttle') }}]
    {% endif %}

    def get_queryset(self):
        """
        Get the queryset for this view.
        """
        queryset = super().get_queryset()

        {% if model_api.get('select_related') %}
        # Optimize queries with select_related
        queryset = queryset.select_related({{ model_api.get('select_related')|join(', ') }})
        {% endif %}

        {% if model_api.get('prefetch_related') %}
        # Optimize queries with prefetch_related
        queryset = queryset.prefetch_related({{ model_api.get('prefetch_related')|join(', ') }})
        {% endif %}

        {% set model_features = model.get('features', {}) if model else {} %}
        {% if model_features.get('soft_delete') %}
        # Filter out soft deleted items by default
        if not self.request.query_params.get('include_deleted'):
            queryset = queryset.filter(is_deleted=False)
        {% endif %}

        {% set enterprise = features_dict.get('enterprise', {}) %}
        {% if enterprise.get('multitenancy') %}
        # Filter by tenant
        if hasattr(self.request, 'tenant'):
            queryset = queryset.filter(tenant=self.request.tenant)
        {% endif %}

        return queryset

    def perform_create(self, serializer):
        """
        Create a new instance.
        """
        kwargs = {}

        {% if model_features.get('audit') %}
        # Set audit fields
        kwargs['created_by'] = self.request.user
        {% endif %}

        {% if enterprise.get('multitenancy') %}
        # Set tenant
        if hasattr(self.request, 'tenant'):
            kwargs['tenant'] = self.request.tenant
        {% endif %}

        serializer.save(**kwargs)

    def perform_update(self, serializer):
        """
        Update an instance.
        """
        kwargs = {}

        {% if model_features.get('audit') %}
        # Set audit fields
        kwargs['updated_by'] = self.request.user
        {% endif %}

        serializer.save(**kwargs)

    {% if viewset_config.get('actions') %}
    # Custom actions
    {% for action in viewset_config.get('actions', []) %}
    @action(
        detail={% if action.get('detail', True) %}True{% else %}False{% endif %},
        methods={{ action.get('methods', ['POST']) }},
        {% if action.get('permission_classes') %}
        permission_classes=[{{ action.get('permission_classes')|join(', ') }}],
        {% endif %}
        {% if action.get('serializer_class') %}
        serializer_class={{ action.get('serializer_class') }},
        {% endif %}
    )
    def {{ action.get('name', 'custom_action') }}(self, request, {% if action.get('detail', True) %}pk=None, {% endif %}**kwargs):
        """
        {{ action.get('description', 'Custom action') }}
        """
        {% if action.get('detail', True) %}
        instance = self.get_object()
        {% endif %}

        # Custom action implementation
        # TODO: Implement {{ action.get('name', 'custom_action') }} logic

        return Response(
            {'message': '{{ action.get('name', 'custom_action') }} executed successfully'},
            status=status.HTTP_200_OK
        )
    {% endfor %}
    {% endif %}

    {% if model_api.get('allow_bulk') %}
    @action(detail=False, methods=['post'])
    def bulk_create(self, request):
        """
        Create multiple {{ model_name }} instances.
        """
        serializer = self.get_serializer(data=request.data, many=True)
        serializer.is_valid(raise_exception=True)
        self.perform_bulk_create(serializer)
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    def perform_bulk_create(self, serializer):
        """
        Perform bulk creation.
        """
        instances = []
        for validated_data in serializer.validated_data:
        {% if model_features.get('audit') %}
            validated_data['created_by'] = self.request.user
            {% endif %}
            {% if enterprise.get('multitenancy') %}
            if hasattr(self.request, 'tenant'):
                validated_data['tenant'] = self.request.tenant
            {% endif %}
            instances.append({{ model_name }}(**validated_data))

        {{ model_name }}.objects.bulk_create(instances)

    @action(detail=False, methods=['post'])
    def bulk_update(self, request):
        """
        Update multiple {{ model_name }} instances.
        """
        # TODO: Implement bulk update logic
        return Response(
            {'message': 'Bulk update not implemented'},
            status=status.HTTP_501_NOT_IMPLEMENTED
        )

    @action(detail=False, methods=['post'])
    def bulk_delete(self, request):
        """
        Delete multiple {{ model_name }} instances.
        """
        ids = request.data.get('ids', [])
        if not ids:
            return Response(
                {'error': 'No IDs provided'},
                status=status.HTTP_400_BAD_REQUEST
            )

        queryset = self.get_queryset().filter(id__in=ids)
        count = queryset.count()

        {% if model_features.get('soft_delete') %}
        # Soft delete
        queryset.update(is_deleted=True)
        {% else %}
        # Hard delete
        queryset.delete()
        {% endif %}

        return Response(
            {'deleted': count, 'ids': ids},
            status=status.HTTP_200_OK
        )
{% endif %}


{% endfor %}

{% if view_cfg.get('api_views') %}
# Custom API Views
{% for api_view in view_cfg.get('api_views', []) %}
class {{ api_view.get('name', 'CustomAPIView') }}(APIView):
    """
    {{ api_view.get('description', 'Custom API view') }}
    """
    {% if api_view.get('permission_classes') %}
    permission_classes = [{{ api_view.get('permission_classes')|join(', ') }}]
    {% endif %}

    {% if api_view.get('authentication_classes') %}
    authentication_classes = [{{ api_view.get('authentication_classes')|join(', ') }}]
    {% endif %}

    def get(self, request, *args, **kwargs):
        """
        Handle GET request.
        """
        # TODO: Implement GET logic
        return Response({'message': 'GET method not implemented'})

    def post(self, request, *args, **kwargs):
        """
        Handle POST request.
        """
        # TODO: Implement POST logic
        return Response({'message': 'POST method not implemented'})


{% endfor %}
{% endif %}