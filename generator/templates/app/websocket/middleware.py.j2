"""
WebSocket middleware for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from channels.middleware import BaseMiddleware
from channels.auth import AuthMiddlewareStack
from django.contrib.auth.models import AnonymousUser
from django.contrib.auth import get_user_model
from django.db import close_old_connections
from urllib.parse import parse_qs
import jwt
import logging

logger = logging.getLogger(__name__)
User = get_user_model()


class JWTAuthMiddleware(BaseMiddleware):
    """JWT authentication middleware for WebSockets."""

    async def __call__(self, scope, receive, send):
        """Authenticate WebSocket connection using JWT token."""
        close_old_connections()

        # Get token from query string
        query_string = scope.get('query_string', b'').decode()
        query_params = parse_qs(query_string)
        token = query_params.get('token', [None])[0]

        if token:
            try:
                # Decode JWT token
                from django.conf import settings
                payload = jwt.decode(
                    token,
                    settings.SECRET_KEY,
                    algorithms=['HS256']
                )

                # Get user
                user_id = payload.get('user_id')
                scope['user'] = await self.get_user(user_id)

            except (jwt.ExpiredSignatureError, jwt.InvalidTokenError) as e:
                logger.warning(f"JWT authentication failed: {e}")
                scope['user'] = AnonymousUser()
        else:
            scope['user'] = AnonymousUser()

        return await super().__call__(scope, receive, send)

    @database_sync_to_async
    def get_user(self, user_id):
        """Get user from database."""
        try:
            return User.objects.get(id=user_id)
        except User.DoesNotExist:
            return AnonymousUser()


class TenantMiddleware(BaseMiddleware):
    """Tenant middleware for multi-tenant WebSockets."""

    async def __call__(self, scope, receive, send):
        """Add tenant to scope."""
        # Get tenant from headers or subdomain
        headers = dict(scope.get('headers', []))
        host = headers.get(b'host', b'').decode()

        # Extract tenant from subdomain
        subdomain = host.split('.')[0] if '.' in host else None

        if subdomain and subdomain != 'www':
            scope['tenant'] = await self.get_tenant(subdomain)
        else:
            scope['tenant'] = None

        return await super().__call__(scope, receive, send)

    @database_sync_to_async
    def get_tenant(self, subdomain):
        """Get tenant from database."""
        from tenants.models import Tenant
        try:
            return Tenant.objects.get(subdomain=subdomain, is_active=True)
        except Tenant.DoesNotExist:
            return None


class RateLimitMiddleware(BaseMiddleware):
    """Rate limiting middleware for WebSockets."""

    def __init__(self, inner):
        super().__init__(inner)
        self.connections = {}
        self.max_connections_per_ip = 10
        self.max_messages_per_minute = 60

    async def __call__(self, scope, receive, send):
        """Apply rate limiting."""
        # Get client IP
        headers = dict(scope.get('headers', []))
        x_forwarded_for = headers.get(b'x-forwarded-for', b'').decode()

        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0].strip()
        else:
            ip = scope.get('client', [''])[0]

        # Check connection limit
        if ip in self.connections:
            if self.connections[ip] >= self.max_connections_per_ip:
                await send({
                    'type': 'websocket.close',
                    'code': 4008,  # Policy violation
                })
                return
            self.connections[ip] += 1
        else:
            self.connections[ip] = 1

        # Add rate limiting info to scope
        scope['rate_limit'] = {
            'ip': ip,
            'message_count': 0,
            'last_reset': time.time(),
        }

        try:
            await super().__call__(scope, receive, send)
        finally:
            # Decrement connection count
            if ip in self.connections:
                self.connections[ip] -= 1
                if self.connections[ip] <= 0:
                    del self.connections[ip]


class LoggingMiddleware(BaseMiddleware):
    """Logging middleware for WebSocket connections."""

    async def __call__(self, scope, receive, send):
        """Log WebSocket events."""
        import time
        start_time = time.time()

        # Log connection
        logger.info(
            f"WebSocket connection: {scope['type']} {scope['path']} "
            f"from {scope.get('client', ['unknown'])[0]}"
        )

        async def send_wrapper(message):
            """Wrap send to log messages."""
            if message['type'] == 'websocket.accept':
                logger.info(f"WebSocket accepted: {scope['path']}")
            elif message['type'] == 'websocket.close':
                duration = time.time() - start_time
                logger.info(
                    f"WebSocket closed: {scope['path']} "
                    f"(duration: {duration:.2f}s, code: {message.get('code')})"
                )

            await send(message)

        try:
            await super().__call__(scope, receive, send_wrapper)
        except Exception as e:
            duration = time.time() - start_time
            logger.error(
                f"WebSocket error: {scope['path']} "
                f"(duration: {duration:.2f}s, error: {e})"
            )
            raise


class PermissionMiddleware(BaseMiddleware):
    """Permission checking middleware for WebSockets."""

    async def __call__(self, scope, receive, send):
        """Check permissions before establishing connection."""
        user = scope.get('user', AnonymousUser())
        path = scope.get('path', '')

        # Define permission requirements for paths
        permission_map = {
            '/ws/admin/': 'is_staff',
            '/ws/{{ app_name }}/': '{{ app_name }}.view_{{ models[0].name|lower }}',
        }

        # Check permissions
        for path_prefix, permission in permission_map.items():
            if path.startswith(path_prefix):
                if permission == 'is_staff' and not user.is_staff:
                    await send({
                        'type': 'websocket.close',
                        'code': 4003,  # Forbidden
                    })
                    return
                elif not user.has_perm(permission):
                    await send({
                        'type': 'websocket.close',
                        'code': 4003,  # Forbidden
                    })
                    return

        await super().__call__(scope, receive, send)


def get_middleware_stack():
    """Get the complete middleware stack for WebSockets."""
    return LoggingMiddleware(
        RateLimitMiddleware(
            PermissionMiddleware(
                {% if features.enterprise.multitenancy %}TenantMiddleware(
                    {% endif %}{% if features.authentication.jwt %}JWTAuthMiddleware(
                        AuthMiddlewareStack
                    ){% else %}AuthMiddlewareStack{% endif %}{% if features.enterprise.multitenancy %}
    ){% endif %}
    )
    )
    )