"""
Signals for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.db.models.signals import pre_save, post_save, pre_delete, post_delete
from django.dispatch import receiver
from django.core.cache import cache
import logging

{% for model in models %}
from .models import {{ model.name }}
{% endfor %}

logger = logging.getLogger(__name__)


{% for model in models %}
{% if model.features and (model.features.audit or model.features.cache or model.signals) %}
# {{ model.name }} signals

{% if model.features.audit %}
@receiver(pre_save, sender={{ model.name }})
def {{ model.name.lower() }}_pre_save_audit(sender, instance, **kwargs):
    """Audit trail for {{ model.name }} pre-save."""
    if instance.pk:
        try:
            old_instance = sender.objects.get(pk=instance.pk)
            # Log changes here
            logger.info(f"{{ model.name }} {instance.pk} is being updated")
        except sender.DoesNotExist:
            pass
{% endif %}

@receiver(post_save, sender={{ model.name }})
def {{ model.name.lower() }}_post_save(sender, instance, created, **kwargs):
    """Handle {{ model.name }} post-save signal."""
    if created:
        logger.info(f"New {{ model.name }} created: {instance.pk}")
    else:
        logger.info(f"{{ model.name }} updated: {instance.pk}")

    {% if model.features.cache %}
    # Clear related caches
    cache_keys = [
        f"{{ app_name }}:{{ model.name.lower() }}:{instance.pk}",
        f"{{ app_name }}:{{ model.name.lower() }}:list",
    ]
    for key in cache_keys:
        cache.delete(key)
{% endif %}

@receiver(pre_delete, sender={{ model.name }})
def {{ model.name.lower() }}_pre_delete(sender, instance, **kwargs):
    """Handle {{ model.name }} pre-delete signal."""
    logger.info(f"{{ model.name }} {instance.pk} is being deleted")

@receiver(post_delete, sender={{ model.name }})
def {{ model.name.lower() }}_post_delete(sender, instance, **kwargs):
    """Handle {{ model.name }} post-delete signal."""
    logger.info(f"{{ model.name }} {instance.pk} was deleted")

    {% if model.features.cache %}
    # Clear related caches
    cache_keys = [
        f"{{ app_name }}:{{ model.name.lower() }}:{instance.pk}",
        f"{{ app_name }}:{{ model.name.lower() }}:list",
    ]
    for key in cache_keys:
        cache.delete(key)
{% endif %}

{% if model.signals %}
# Custom signals for {{ model.name }}
{% for signal in model.signals %}
@receiver({{ signal.signal }}, sender={{ model.name }})
def {{ model.name.lower() }}_{{ signal.name }}(sender, instance, **kwargs):
    """{{ signal.description|default('Custom signal handler for ' + signal.name) }}"""
{{ signal.implementation|indent(4) }}
{% endfor %}
{% endif %}

{% endif %}
{% endfor %}