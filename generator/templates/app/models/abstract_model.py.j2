"""
Abstract models for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from django.db import models
from django.utils.translation import gettext_lazy as _
from django.contrib.auth import get_user_model
from django.utils import timezone
import uuid

User = get_user_model()


class TimestampedModel(models.Model):
    """Abstract model with created and updated timestamps."""

    created_at = models.DateTimeField(
        _('created at'),
        auto_now_add=True,
        db_index=True,
        help_text=_('Date and time when the record was created')
    )
    updated_at = models.DateTimeField(
        _('updated at'),
        auto_now=True,
        db_index=True,
        help_text=_('Date and time when the record was last updated')
    )

    class Meta:
        abstract = True
        ordering = ['-created_at']

    def save(self, *args, **kwargs):
        """Override save to handle timezone-aware timestamps."""
        if not self.id and not self.created_at:
            self.created_at = timezone.now()
        self.updated_at = timezone.now()
        return super().save(*args, **kwargs)


class AuditedModel(TimestampedModel):
    """Abstract model with audit fields."""

    created_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        related_name='%(app_label)s_%(class)s_created',
        null=True,
        blank=True,
        verbose_name=_('created by'),
        help_text=_('User who created this record')
    )
    updated_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        related_name='%(app_label)s_%(class)s_updated',
        null=True,
        blank=True,
        verbose_name=_('updated by'),
        help_text=_('User who last updated this record')
    )

    class Meta:
        abstract = True


class SoftDeleteModel(models.Model):
    """Abstract model with soft delete functionality."""

    is_deleted = models.BooleanField(
        _('is deleted'),
        default=False,
        db_index=True,
        help_text=_('Whether this record is soft deleted')
    )
    deleted_at = models.DateTimeField(
        _('deleted at'),
        null=True,
        blank=True,
        db_index=True,
        help_text=_('Date and time when the record was soft deleted')
    )
    deleted_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        related_name='%(app_label)s_%(class)s_deleted',
        null=True,
        blank=True,
        verbose_name=_('deleted by'),
        help_text=_('User who soft deleted this record')
    )

    class Meta:
        abstract = True

    def delete(self, using=None, soft=True, **kwargs):
        """Soft delete by default."""
        if soft:
            self.is_deleted = True
            self.deleted_at = timezone.now()
            self.save(using=using)
        else:
            super().delete(using=using, **kwargs)

    def restore(self):
        """Restore soft deleted record."""
        self.is_deleted = False
        self.deleted_at = None
        self.deleted_by = None
        self.save()


class UUIDModel(models.Model):
    """Abstract model with UUID primary key."""

    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
        verbose_name=_('ID'),
        help_text=_('Unique identifier')
    )

    class Meta:
        abstract = True


class SluggedModel(models.Model):
    """Abstract model with slug field."""

    slug = models.SlugField(
        _('slug'),
        max_length=255,
        unique=True,
        db_index=True,
        help_text=_('URL-friendly version of the name')
    )

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        """Auto-generate slug if not provided."""
        if not self.slug and hasattr(self, 'name'):
            from django.utils.text import slugify
            self.slug = slugify(self.name)

            # Ensure uniqueness
            original_slug = self.slug
            counter = 1
            while self.__class__.objects.filter(slug=self.slug).exists():
                self.slug = f"{original_slug}-{counter}"
                counter += 1

        super().save(*args, **kwargs)


class PublishableModel(models.Model):
    """Abstract model for publishable content."""

    STATUS_CHOICES = [
        ('draft', _('Draft')),
        ('published', _('Published')),
        ('archived', _('Archived')),
    ]

    status = models.CharField(
        _('status'),
        max_length=20,
        choices=STATUS_CHOICES,
        default='draft',
        db_index=True,
        help_text=_('Publication status')
    )
    published_at = models.DateTimeField(
        _('published at'),
        null=True,
        blank=True,
        db_index=True,
        help_text=_('Date and time when the content was published')
    )

    class Meta:
        abstract = True

    def publish(self):
        """Publish the content."""
        self.status = 'published'
        if not self.published_at:
            self.published_at = timezone.now()
        self.save()

    def unpublish(self):
        """Unpublish the content."""
        self.status = 'draft'
        self.save()

    @property
    def is_published(self):
        """Check if content is published."""
        return self.status == 'published' and (
                self.published_at is None or self.published_at <= timezone.now()
        )


class OrderedModel(models.Model):
    """Abstract model with ordering functionality."""

    order = models.PositiveIntegerField(
        _('order'),
        default=0,
        db_index=True,
        help_text=_('Display order')
    )

    class Meta:
        abstract = True
        ordering = ['order', '-created_at']

    def save(self, *args, **kwargs):
        """Auto-set order if not provided."""
        if not self.order:
            # Get the highest order value
            max_order = self.__class__.objects.aggregate(
                models.Max('order')
            )['order__max'] or 0
            self.order = max_order + 1

        super().save(*args, **kwargs)

    def move_up(self):
        """Move item up in order."""
        if self.order > 0:
            # Find item to swap with
            try:
                other = self.__class__.objects.filter(
                    order__lt=self.order
                ).order_by('-order').first()

                if other:
                    # Swap orders
                    self.order, other.order = other.order, self.order
                    self.save()
                    other.save()
            except self.__class__.DoesNotExist:
                pass

    def move_down(self):
        """Move item down in order."""
        # Find item to swap with
        try:
            other = self.__class__.objects.filter(
                order__gt=self.order
            ).order_by('order').first()

            if other:
                # Swap orders
                self.order, other.order = other.order, self.order
                self.save()
                other.save()
        except self.__class__.DoesNotExist:
            pass


class ActivableModel(models.Model):
    """Abstract model with activation functionality."""

    is_active = models.BooleanField(
        _('is active'),
        default=True,
        db_index=True,
        help_text=_('Whether this record is active')
    )
    activated_at = models.DateTimeField(
        _('activated at'),
        null=True,
        blank=True,
        help_text=_('Date and time when the record was activated')
    )
    deactivated_at = models.DateTimeField(
        _('deactivated at'),
        null=True,
        blank=True,
        help_text=_('Date and time when the record was deactivated')
    )

    class Meta:
        abstract = True

    def activate(self):
        """Activate the record."""
        self.is_active = True
        self.activated_at = timezone.now()
        self.deactivated_at = None
        self.save()

    def deactivate(self):
        """Deactivate the record."""
        self.is_active = False
        self.deactivated_at = timezone.now()
        self.save()


{% if features.enterprise.multitenancy %}
class TenantModel(models.Model):
    """Abstract model for multi-tenant applications."""

    tenant = models.ForeignKey(
        'tenants.Tenant',
        on_delete=models.CASCADE,
        related_name='%(app_label)s_%(class)s_set',
        verbose_name=_('tenant'),
        help_text=_('Tenant this record belongs to')
    )

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        """Ensure tenant is set."""
        if not self.tenant_id:
            # Try to get tenant from thread local
            from django_tenants.utils import get_current_tenant
            current_tenant = get_current_tenant()
            if current_tenant:
                self.tenant = current_tenant

        super().save(*args, **kwargs)
{% endif %}


# Combined abstract models
class BaseModel(TimestampedModel, SoftDeleteModel):
    """Base model with common fields."""

    class Meta:
        abstract = True


class FullAuditModel(AuditedModel, SoftDeleteModel):
    """Model with full audit trail."""

    class Meta:
        abstract = True


class ContentModel(TimestampedModel, PublishableModel, SluggedModel):
    """Model for content items."""

    class Meta:
        abstract = True