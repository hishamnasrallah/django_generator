"""
Models for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
{% for import_type, import_list in imports.items() %}{% if import_list %}
# {{ import_type|title }} imports
{% for import_line in import_list %}{{ import_line }}
{% endfor %}{% endif %}{% endfor %}
{% if has_relationships %}
User = get_user_model()
{% endif %}

# Local imports
{% if imports.project %}{% for import_line in imports.project %}{{ import_line }}
{% endfor %}{% endif %}
{% for model in models %}

{% if model.description %}
# {{ model.description }}
{% endif %}
class {{ model.name }}({% if model.extends %}{{ model.extends }}{% else %}{% if model.mixins %}{{ model.mixins|join(', ') }}, {% endif %}models.Model{% endif %}):
    """
    {{ model.description|default(model.name + ' model', true) }}
    {% if model.features %}

    Features:
    {% for feature, enabled in model.features.items() %}{% if enabled %}  - {{ feature|title }}
    {% endif %}{% endfor %}{% endif %}
    """
    {% if model.fields %}
    # Fields
    {% for field in model.fields %}
    {{ field.name }} = {{ field|django_field }}{% if field.help_text %}  # {{ field.help_text }}{% endif %}
    {% endfor %}{% endif %}

    {% if model.state_machine %}
    # State Machine
    {{ model.state_machine.field }} = FSMField(
        default='{{ model.state_machine.initial }}',
        verbose_name=_('Status'),
        choices=[
                {% for state in model.state_machine.states %}{% if state is string %}('{{ state }}', _('{{ state|title_case }}')),
        {% else %}{{ state }},
    {% endif %}{% endfor %}
    ]
    )
    {% endif %}

    {% if model.features.audit %}
    # Audit
    history = HistoricalRecords()
    {% endif %}

    {% if model.managers %}
    # Managers
    {% for manager in model.managers %}
    {{ manager.name }} = {{ manager.class_name|default(model.name + 'Manager', true) }}()
{% endfor %}
objects = models.Manager()  # Keep default manager
{% endif %}

class Meta:
{% if model.meta %}{% for key, value in model.meta.items() %}{% if key == 'ordering' %}
    ordering = {{ value }}
    {% elif key == 'indexes' %}
    indexes = [
        {% for index in value %}models.Index(fields={{ index.fields }}, name='{{ index.name }}'),
        {% endfor %}
    ]
    {% elif key == 'unique_together' %}
    unique_together = {{ value }}
    {% elif key == 'constraints' %}
    constraints = [
        {% for constraint in value %}models.{{ constraint.type }}({{ constraint.params }}),
        {% endfor %}
    ]
    {% elif key in ['verbose_name', 'verbose_name_plural', 'db_table'] %}
    {{ key }} = _('{{ value }}')
    {% else %}
    {{ key }} = {{ value }}
    {% endif %}{% endfor %}{% else %}
    verbose_name = _('{{ model.name|verbose_name }}')
    verbose_name_plural = _('{{ model.name|plural|verbose_name }}')
    {% if not model.abstract %}db_table = '{{ app_name }}_{{ model.name|snake_case }}'
    {% endif %}ordering = ['-created_at']
{% endif %}

def __str__(self):
    """String representation of {{ model.name }}."""
    {% if model.str_field %}
    return str(self.{{ model.str_field }})
    {% else %}{% for field in model.fields %}{% if field.name in ['name', 'title', 'label'] %}
    return str(self.{{ field.name }})
    {% endif %}{% else %}
    return f"{{ model.name }} #{self.pk}"
{% endfor %}{% endif %}

{% if model.methods %}
# Business Methods
{% for method in model.methods %}
{% if method.decorator %}{{ method.decorator }}
{% endif %}def {{ method.name }}(self{% if method.params %}, {{ method.params|join(', ') }}{% endif %}):
    """
{{ method.description|default(method.name + ' method', true) }}
        {% if method.params %}

        Args:
        {% for param in method.params %}    {{ param }}: Parameter description
        {% endfor %}{% endif %}{% if method.returns %}

        Returns:
            {{ method.returns }}: Return value description
        {% endif %}
        """
{{ method.implementation|indent(8) }}
{% endfor %}{% endif %}

{% if model.properties %}
# Properties
{% for prop in model.properties %}
@property
def {{ prop.name }}(self):
    """
{{ prop.description|default(prop.name + ' property', true) }}
        {% if prop.returns %}

        Returns:
            {{ prop.returns }}: Property value
        {% endif %}
        """
{{ prop.implementation|indent(8) }}
{% endfor %}{% endif %}

{% if model.state_machine %}
# State Transitions
{% for transition in model.state_machine.transitions %}
@transition(
    field={{ model.state_machine.field }},
    source={{ transition.source if transition.source is string else transition.source|join(', ') }},
    target='{{ transition.target }}'{% if transition.permission %},
    permission='{{ app_name }}.{{ transition.permission }}'{% endif %}{% if transition.condition %},
    conditions=[{{ transition.condition }}]{% endif %}
)
def {{ transition.name }}(self{% if transition.params %}, {{ transition.params|join(', ') }}{% endif %}):
    """
    Transition from {{ transition.source }} to {{ transition.target }}.
        {% if transition.description %}

        {{ transition.description }}
        {% endif %}
        """
    {% if transition.implementation %}{{ transition.implementation|indent(8) }}{% else %}pass{% endif %}
{% endfor %}{% endif %}

def save(self, *args, **kwargs):
    """Override save to add custom logic."""
    {% if model.save_logic %}
    # Custom save logic
    {{ model.save_logic|indent(8) }}
    {% endif %}

    # Call full_clean to ensure validation
    if not kwargs.pop('skip_validation', False):
        self.full_clean()

    super().save(*args, **kwargs)

{% if model.features.soft_delete %}
def delete(self, *args, **kwargs):
    """Soft delete instead of hard delete."""
    self.is_deleted = True
    self.deleted_at = timezone.now()
    self.save()

def restore(self):
    """Restore soft deleted object."""
    self.is_deleted = False
    self.deleted_at = None
    self.save()
{% endif %}

{% if model.features.versioning %}
def create_version(self, user=None, comment=None):
    """Create a new version of this object."""
    # Implementation depends on versioning strategy
    pass
{% endif %}

{% if model.api_methods %}
# API Serialization Methods
def to_dict(self, fields=None, exclude=None):
    """
    Convert model instance to dictionary.

    Args:
        fields: List of fields to include
        exclude: List of fields to exclude

    Returns:
        dict: Model data as dictionary
    """
    data = {}

    for field in self._meta.fields:
        if fields and field.name not in fields:
            continue
        if exclude and field.name in exclude:
            continue

        value = getattr(self, field.name)

        # Handle special field types
        if isinstance(field, models.DateTimeField):
            data[field.name] = value.isoformat() if value else None
        elif isinstance(field, models.DateField):
            data[field.name] = value.isoformat() if value else None
        elif isinstance(field, models.DecimalField):
            data[field.name] = str(value) if value else None
        elif isinstance(field, models.ForeignKey):
            data[field.name + '_id'] = value.id if value else None
        else:
            data[field.name] = value

    return data
{% endif %}

{% if model.validation_methods %}
# Validation Methods
def clean(self):
    """Model validation."""
    super().clean()

    {% for validation in model.validation_methods %}
    # {{ validation.description }}
{{ validation.implementation|indent(8) }}
{% endfor %}
{% endif %}

{% if model.permissions %}
class Meta:
    permissions = [
            {% for perm in model.permissions %}('{{ perm.codename }}', _('{{ perm.name }}')),
        {% endfor %}
    ]
{% endif %}
{% endfor %}