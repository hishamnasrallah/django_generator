"""
Domain events for {{ app_name }} app.

Generated by Django Enhanced Generator on {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.
"""
from dataclasses import dataclass
from datetime import datetime
from typing import Any, Dict, Optional, List
from django.utils import timezone
import uuid


@dataclass
class DomainEvent:
    """Base class for domain events."""

    event_id: str
    event_type: str
    aggregate_id: str
    aggregate_type: str
    timestamp: datetime
    user_id: Optional[int] = None
    metadata: Optional[Dict[str, Any]] = None

    def __post_init__(self):
        """Initialize event after creation."""
        if not self.event_id:
            self.event_id = str(uuid.uuid4())
        if not self.timestamp:
            self.timestamp = timezone.now()
        if self.metadata is None:
            self.metadata = {}

    def to_dict(self) -> Dict[str, Any]:
        """Convert event to dictionary."""
        return {
            'event_id': self.event_id,
            'event_type': self.event_type,
            'aggregate_id': self.aggregate_id,
            'aggregate_type': self.aggregate_type,
            'timestamp': self.timestamp.isoformat(),
            'user_id': self.user_id,
            'metadata': self.metadata,
        }


{% for model in models %}
# {{ model.name }} Events

@dataclass
class {{ model.name }}Created(DomainEvent):
    """Event raised when {{ model.name }} is created."""

    def __init__(self, {{ model.name|lower }}_id: str, user_id: Optional[int] = None, **data):
        super().__init__(
            event_id=str(uuid.uuid4()),
            event_type='{{ model.name|lower }}.created',
            aggregate_id={{ model.name|lower }}_id,
            aggregate_type='{{ model.name }}',
            timestamp=timezone.now(),
            user_id=user_id,
            metadata=data
        )


@dataclass
class {{ model.name }}Updated(DomainEvent):
    """Event raised when {{ model.name }} is updated."""

    changes: Dict[str, Any]

    def __init__(self, {{ model.name|lower }}_id: str, changes: Dict[str, Any],
                 user_id: Optional[int] = None, **data):
        super().__init__(
            event_id=str(uuid.uuid4()),
            event_type='{{ model.name|lower }}.updated',
            aggregate_id={{ model.name|lower }}_id,
            aggregate_type='{{ model.name }}',
            timestamp=timezone.now(),
            user_id=user_id,
            metadata=data
        )
        self.changes = changes


@dataclass
class {{ model.name }}Deleted(DomainEvent):
    """Event raised when {{ model.name }} is deleted."""

    def __init__(self, {{ model.name|lower }}_id: str, user_id: Optional[int] = None, **data):
        super().__init__(
            event_id=str(uuid.uuid4()),
            event_type='{{ model.name|lower }}.deleted',
            aggregate_id={{ model.name|lower }}_id,
            aggregate_type='{{ model.name }}',
            timestamp=timezone.now(),
            user_id=user_id,
            metadata=data
        )


{% if model.state_machine %}
# State transition events
{% for transition in model.state_machine.transitions %}
@dataclass
class {{ model.name }}{{ transition.name|title }}(DomainEvent):
    """Event raised when {{ model.name }} transitions via {{ transition.name }}."""

    from_state: str
    to_state: str

    def __init__(self, {{ model.name|lower }}_id: str, from_state: str, to_state: str,
                 user_id: Optional[int] = None, **data):
        super().__init__(
            event_id=str(uuid.uuid4()),
            event_type='{{ model.name|lower }}.{{ transition.name }}',
            aggregate_id={{ model.name|lower }}_id,
            aggregate_type='{{ model.name }}',
            timestamp=timezone.now(),
            user_id=user_id,
            metadata=data
        )
        self.from_state = from_state
        self.to_state = to_state


{% endfor %}
{% endif %}

{% if model.custom_events %}
# Custom events
{% for event in model.custom_events %}
@dataclass
class {{ model.name }}{{ event.name }}(DomainEvent):
    """{{ event.description }}"""

    {% for field in event.fields %}
    {{ field.name }}: {{ field.type }}
    {% endfor %}

    def __init__(self, {{ model.name|lower }}_id: str, {% for field in event.fields %}{{ field.name }}: {{ field.type }}, {% endfor %}
                 user_id: Optional[int] = None, **data):
        super().__init__(
            event_id=str(uuid.uuid4()),
            event_type='{{ model.name|lower }}.{{ event.name|lower }}',
            aggregate_id={{ model.name|lower }}_id,
            aggregate_type='{{ model.name }}',
            timestamp=timezone.now(),
            user_id=user_id,
            metadata=data
        )
        {% for field in event.fields %}
        self.{{ field.name }} = {{ field.name }}
    {% endfor %}


    {% endfor %}
    {% endif %}
    {% endfor %}

    # Event Registry
EVENT_REGISTRY = {
    {% for model in models %}
    '{{ model.name|lower }}.created': {{ model.name }}Created,
    '{{ model.name|lower }}.updated': {{ model.name }}Updated,
    '{{ model.name|lower }}.deleted': {{ model.name }}Deleted,
    {% if model.state_machine %}
    {% for transition in model.state_machine.transitions %}
    '{{ model.name|lower }}.{{ transition.name }}': {{ model.name }}{{ transition.name|title }},
{% endfor %}
{% endif %}
{% if model.custom_events %}
{% for event in model.custom_events %}
'{{ model.name|lower }}.{{ event.name|lower }}': {{ model.name }}{{ event.name }},
{% endfor %}
{% endif %}
{% endfor %}
}


def create_event(event_type: str, **kwargs) -> DomainEvent:
    """Factory function to create events."""
    event_class = EVENT_REGISTRY.get(event_type)
    if not event_class:
        raise ValueError(f"Unknown event type: {event_type}")

    return event_class(**kwargs)


def deserialize_event(data: Dict[str, Any]) -> DomainEvent:
    """Deserialize event from dictionary."""
    event_type = data.get('event_type')
    event_class = EVENT_REGISTRY.get(event_type)

    if not event_class:
        raise ValueError(f"Unknown event type: {event_type}")

    # Convert ISO timestamp to datetime
    if 'timestamp' in data and isinstance(data['timestamp'], str):
        data['timestamp'] = datetime.fromisoformat(data['timestamp'])

    return event_class(**data)